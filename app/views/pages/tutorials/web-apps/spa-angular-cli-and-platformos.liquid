---
converter: markdown
metadata:
  title: SPA Angular CLI and platformOS
  description: This guide will help you connect your Angular app (created with CLI) with platformOS.
slug: tutorials/web-apps/spa-angular-cli-and-platformos
searchable: true
---

This guide will help you connect your Angular app (created with CLI) with platformOS. The goal is to have Angular app ready for local development communicating with instance by api via proxy.

This tutorial has been based on Angular version 8.

## Requirements

- [Set up Platform Instance](/get-started)
- [Installed Angular CLI](https://angular.io/cli)

## Steps

Connecting Angular with platformOS is a six-step process. Angular CLI is based on webpack so some steps will be valid for other frameworks/builds based on webpack.

<div data-autosteps></div>

### Step 1: Place for Angular App files

Source files of web app are not part of platformOS app and can be stored anywhere you want.
I wanted to keep it together in one repo, in one project so I've created Angular app directly in my instance `/app`. folder. It's recommended but not required.

Let's do it now, navigate to `/app` folder and create new app with:

```$ng new web-app```

And pick scss as `stylesheet format`.

Instead of `web-app` you can use other name for your project.

### Step 2: Local development, production build and "hosting" ideas

Angular app build files are part of platformOS instance.

In platformOS there's no traditional `hosting`. You cannot put files straight into some `root` folder and have `your-domain.com/the-file.html`.

But there's special place in Your instance where You can achieve similar effect.
Every file that has been put into `app/assets/` will be "visible" as `your-domain.com/assets/the-file.html`.

There will be place for your build files. I strongly recommend to wrap it into another folder like `app/assets/web-app`.
It's because in the future You may want to store other assets like for example graphic files for emails etc.

Let's change place to store build files in `web-app/angular.json` config file.

Please find line with `"outputPath": "dist/web-app",`

and change it into:

`"outputPath": "../app/assets/web-app",`

If You are using version control like GIT it's recommended to add this folder into your `.gitignore` rules.

So after building our app now, files will be copied into `/app/assets/web-app`.

But now compiled files will be stored under `app/assets/web-app` (like for example `main.js`) and Angular will be looking for it in root folder. We need to let it know where to find it.

Open `web-app/package.json` and in `scripts` extend `build` command:

`"build": "ng build --prod --base-href / --deploy-url /assets/web-app/",`

Now our Angular app routing will know that our base-href is `/` and compiled files will be stored in `/assets/web-app/`.

It will append proper paths into index.html automatically.

### Step 3: Routing and Redirects

platformOS routing is based on liquid files (pages and layouts).

I assume that Angular router will do his job, so I need to rewrite all urls into one file.

I will do this with pages and layouts. [Learn More about Pages and Layouts](/tutorials/pages/pages)

First let's create layout that will be injected into every liquid page.
This file will be generated during build by Angular and copied into `app/views/layouts` as `app.html.liquid`

I'll do this in three steps:

* go into `web-app/src` and change name `index.html` into `app.html.liquid` (name it as You want, but it has to have `.liquid` extension)
* go into `web-app/angular.json` config file, find line with `"index": "src/index.html",` and change it with `"index": "src/app.html.liquid",`
* go into `web-app/package.json` and add commands

```
"copyIndex": "cp ../app/assets/web-app/app.html.liquid ../app/views/layouts/",
```

and

```
"postbuild": "npm run copyIndex"
```

So right after our web app will be built, our `index` will be copied into `app/views/layouts` as a layout with name `app`.

Now let's create home page.

I do this in `app/views/pages` where I create `routing` folder.
Now in `app/views/pages/routing` I create `home.html.liquid` page with code:

```
---
slug: /
layout_name: app
---
```

I will need similar page for every url, but fortunately only on first level.

For example, let's have urls:

* company/about
* company/terms-of-service
* company/info/some-example-page

For all these links only one page has to be created (let's call it company.html.liquid):

```
---
slug: company
layout_name: app
---
```

Angular router will do rest of the job.

### Step 4: Local and production paths

If I needed to add some asset files like for example images or custom svg icons for [Angular Materials](https://material.angular.io/components/icon/overview) or maybe translation files like for [ngx-translate](https://www.codeandweb.com/babeledit/tutorials/how-to-translate-your-angular8-app-with-ngx-translate), I would definitely store it in `web-app/src/assets/`

Now I need to let know my app where I store it. I will use Angular `environments` files.

Simply in `web-app/src/environments/environment.ts` I'll add:

```javascript
export const environment = {
  production: false,
  assetsPrefix: ''
}
```

and in `web-app/src/environments/environment.prod.ts`

```javascript
export const environment = {
  production: true,
  assetsPrefix: '/assets/web-app',
}
```

And anywhere in code I need reference to one of my assets I'll just use `environment.assetsPrefix` variable.

### Step 5: Local and production paths inside (s)css files

It's not as easy as with assets from ts / template files.
Angular CLI cannot replace css files because css is build before replacement engine run.
There are some [different approaches](https://github.com/angular/angular-cli/issues/11451) to achieve that, but I went another way.

I've created two files:
* `web-app/src/styles/environments/local/asset-path.scss` that contains:

```scss
$assets-path: '';
```

* and `web-app/src/styles/environments/prod/asset-path.scss` that contains:

```scss
$assets-path: '/assets/web-app/';
```

(`web-app/src/styles/` is where I store all global scss files)

Then I've created two commands that will do the job - before angular build will change the `$assets-path: ''` into `$assets-path: '/assets/web-app/'` and restore it after build.

```json
"cssAssetsPath": "cp src/styles/environments/prod/asset-path.scss src/styles/environments/",
"cssAssetsPathReset": "cp src/styles/environments/local/asset-path.scss src/styles/environments/",
```

Also I've added `"prebuild": "npm run cssAssetsPath",` command to run it before and updated `postbuild` so that's how my scripts look like now:

```json
"cssAssetsPath": "cp src/styles/environments/prod/asset-path.scss src/styles/environments/",
"cssAssetsPathReset": "cp src/styles/environments/local/asset-path.scss src/styles/environments/",
"copyIndex": "cp ../app/assets/web-app/app.html.liquid ../app/views/layouts/",
"prebuild": "npm run cssAssetsPath",
"build": "ng build --prod --base-href / --deploy-url /assets/web-app/",
"postbuild": "npm run copyIndex && npm run cssAssetsPathReset"
```

And now in any of my `scss` files when I need assets I'll use:

```scss
@import '~styles/environments/asset-path.scss';

.my-component {
  background-image: url('#{$assets-path}/assets/images/some-image.jpg');
}
```

### Step 6: Proxy for local api calls

Due to security issues You cannot use:
```
response_headers: >
  {
    "Access-Control-Allow-Origin": "*"
  }
```
So you need to use proxy. To do this just follow the instructions here: [Proxying to a backend server](https://angular.io/guide/build#proxying-to-a-backend-server).

Now You have `$ng serve` for local development and `$npm run build` for production build.
