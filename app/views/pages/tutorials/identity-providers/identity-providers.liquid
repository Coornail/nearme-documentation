---
converter: markdown
metadata:
  title: Identity providers
  description: This guide will help you configure third party identity providers like Facebook login, Auth0 etc.
slug: tutorials/identity-providers/identity-providers
searchable: true
---

This guide will help you understand generic steps of configuring third party identity providers like Facebook login, Auth0 etc.
Integration allows you to:
* connect an User from external service with an User in your Instance via email
* connect currently logged in User with User from an external service
* register new User with data (name, email) provided by an external service

## Requirements
To follow the steps in this tutorial, you should be familiar with users. This guide builds on previous tutorials in the **Get Started: Users** section.

* [Users](/tutorials/users/users)

## Steps

All identity provider integrations work the same way and consist of few simple steps:

<div data-autosteps></div>

### Step 1: Create application on Identity Provider website
You go to third party website to create application

### Step 2: Configure the application

On Identity Provider website  configure application by setting whitelist of valid callback URL, which is https://<YOUR_DOMAIN>/auth/<PROVIDER>/callback

### Step 3: Partner Portal configuration

Go to Partner Portal `https://partners.platform-os.com/instances/<YOUR INSTANCE ID>/edit` and add Client ID, Client Secret and other parameters required by specific provider to configuration -> integrations JSON.

### Step 4: Use /auth/<PROVIDER> endpoint on your Instance

After those steps everything is up and running. You can add for example Log In / Sign Up link on your instance pointing to /auth/<PROVIDER>. It will redirect the User to provider's website and ask for login and password. Then it will redirect the User to /auth/<PROVIDER>/callback and verify the request to ensure user has successfully logged in on provider's site. platformOS will receive token, along with some extra parameters like User's email, first name etc. What happens next depends on the state:

1. If user is not logged in yet:
  * If Authentication for this provider does not exist yet, but the User with given email does - display error message to avoid potential account hijack.
  * If Authentication does not exist and the User with given email address does not exist - create a new User email and Authentication for chosen provider.
  * IF Authentication exists, logs User in - that's the most common scenario, User just wants to Log In to existing account using Identity Provider
2. If user is logged in:
  * If Authentication does not exist, create Authentication - this allows to add multiple Identity Provider to one User, for example User can connect Facebook, Twitter and LinkedIn accounts
  * If Authentication exists and is associated with currnt user - do nothing
  * If Authentication exists and is associated with different user - re-log User to the one associated with Authentication

  After success, platformOS redirects User to path provided in `return_to` parameter (i.e. your Log In page can be `/auth/<PROVIDER>?return_to=/my-page`) or homepage (default).

### Listing all configured Identity Providers on Instance

In graphql we have endpoint which list configured providers [login_providers](https://documentation.platform-os.com/api-reference/graphql/queries#login_providers-type-string)
```graphql
{
  login_providers
}
```

You can also use `admin_third_party_integrations` query to see current configuration of any third party integration:
```graphql
{
  admin_third_party_integrations {
    results {
      id
      type
    }
  }
}
```
## Authentications

Authentication consists of a uinque pair `user_id` and `provider`, The first one stores the reference to particular User and `provider` contains information, which Identity Provider was used. You can use GraphQL to get all User's authentications and tokens returned by authentication provider, for example:

```graphql
query {
  current_user{
    authentications{
      id
      token
      provider
    }
  }
}
```

### Deleting Authentications

You can also remove authentication from user by sending `DELETE` request to `/api/authentications/:id`

For the user you can fetch created authentications
```graphql
{
  current_user{
    authentications{
      id
      token_expires_at
      provider
    }
  }
}
```
