{% parse_json graphql_objects %}
{% raw %}
[
  {
    "notices": [],
    "name": "Activity",
    "description": null,
    "interfaces": [],
    "fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "payload",
        "description": null,
        "type": { "name": "ActivityPayload", "path": "scalar/activitypayload", "info": "ActivityPayload" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "uuid",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "ActivityCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "Activity", "path": "object/activity", "info": "[Activity]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "ActivityStreamCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "Activity", "path": "object/activity", "info": "[Activity]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "unread_count",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "ActivityStreamsFeed",
    "description": null,
    "interfaces": [],
    "fields": [
      { "notices": [], "name": "ids", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" }, "arguments": [] },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "Aggregations",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "compact",
        "description": null,
        "type": { "name": "JSONPayload", "path": "scalar/jsonpayload", "info": "JSONPayload" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "raw",
        "description": null,
        "type": { "name": "JSONPayload", "path": "scalar/jsonpayload", "info": "JSONPayload" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "ApiCallNotification",
    "description": "ApiCall Notification",
    "interfaces": ["AdminSharedAttributesInterface"],
    "fields": [
      {
        "notices": [],
        "name": "callback",
        "description": "liquid code which can be used to process the response from the endpoint. You have access to \"response\" variable.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "content",
        "description": "liquid code to evaluate to whatever you want to send, for example a JSON.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "delay_by",
        "description": "liquid code which should evaluate to integer. Delays invoking the job by\nspecified number of minutes. Useful to invoke code at certain point in time,\nfor example 1 hour before something etc. To calculate proper number you can\nuse time_diff filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configurations",
        "description": "form configurations which trigger the api call",
        "type": { "name": "FormConfiguration", "path": "object/formconfiguration", "info": "[FormConfiguration!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "headers",
        "description": "liquid code to evaluate to valid json of request headers",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "name of the api call, which is used in form_configurations or mutation to trigger it",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "request_type",
        "description": "Liquid code which should evaluate to valid request type: Get, Post, Put,\nPatch, Delete or if you want to send binary files: Post_Multipart,\nPut_Multipart, Patch_Multipart",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "to",
        "description": "liquid code to evaluate to valid endpoint for the request.",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "trigger_condition",
        "description": "liquid code which should evaluate to true if the api call should be sent",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "ApiCallNotificationCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "ApiCallNotification", "path": "object/apicallnotification", "info": "[ApiCallNotification]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "ApiCallSendPayload",
    "description": "Autogenerated return type of ApiCallSend",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "errors",
        "description": null,
        "type": { "name": "BaseError", "path": "object/baseerror", "info": "[BaseError!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "response",
        "description": null,
        "type": { "name": "Response", "path": "object/response", "info": "Response" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "Asset",
    "description": null,
    "interfaces": ["AdminSharedAttributesInterface"],
    "fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "deleted_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "Name of the asset",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "url",
        "description": "Url to the file",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "AssetCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "Asset", "path": "object/asset", "info": "[Asset]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "Authentication",
    "description": "Authentication using provider",
    "interfaces": [],
    "fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" }, "arguments": [] },
      {
        "notices": [],
        "name": "provider",
        "description": "name of authentication provider used for creating this authentication",
        "type": { "name": "AuthenticationProvider", "path": "enum/authenticationprovider", "info": "AuthenticationProvider" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "raw_info",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "token_expires_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "AuthorizationPolicy",
    "description": "Authorization Policy is used to restrict access to pages and forms",
    "interfaces": ["AdminSharedAttributesInterface"],
    "fields": [
      {
        "notices": [],
        "name": "content",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "flash_alert",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "http_status",
        "description": "use this status code when authorization fails; usually 404 or 403",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_to",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "AuthorizationPolicyCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "AuthorizationPolicy", "path": "object/authorizationpolicy", "info": "[AuthorizationPolicy]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "BankAccount",
    "description": "Stored Bank Account",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "bank_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "instance_client_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_method_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "BaseError",
    "description": "Base error message",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "message",
        "description": "A description of the error",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "CMSItemDefinition",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "fields",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "[String]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "CMSItemType", "path": "enum/cmsitemtype", "info": "CMSItemType!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "path",
        "description": null,
        "type": { "name": "JSONPayload", "path": "scalar/jsonpayload", "info": "JSONPayload!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "CMSItemDefinitionCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "CMSItemDefinition", "path": "object/cmsitemdefinition", "info": "[CMSItemDefinition]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "CMSItemPayload",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "data",
        "description": null,
        "type": { "name": "JSONPayload", "path": "scalar/jsonpayload", "info": "JSONPayload" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "resource_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "type",
        "description": null,
        "type": { "name": "CMSItemType", "path": "enum/cmsitemtype", "info": "CMSItemType" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "CMSItemPayloadCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "CMSItemPayload", "path": "object/cmsitempayload", "info": "[CMSItemPayload]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "Communication",
    "description": "Deprecated",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "phone_number",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "verified",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "CreditCard",
    "description": "Stored Credit Card",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "default_card",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "instance_client_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_method_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "token",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "CustomAddrress",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "address",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "address2",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "apartment",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "city",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "country",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "iso_country_code",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "lat",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "lng",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "point",
        "description": null,
        "type": { "name": "GeoPointType", "path": "object/geopointtype", "info": "GeoPointType" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "postcode",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "service_radius",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "state",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "street",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "street_number",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "suburb",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "CustomAttachment",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "file_url",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "CustomAttributeDefinition",
    "description": "Definition of Custom attribute",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "attribute_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" }, "arguments": [] },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "CustomImage",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "file_url",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "uploader_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "Customization",
    "description": null,
    "interfaces": ["CustomAttributeInterface", "ListingsMetadata", "RelationOnDemandInterface", "RemoteModelInterface"],
    "fields": [
      {
        "notices": [],
        "name": "address",
        "description": "Fetch address by name, e.g: address: address(name: \"office_address\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "addresses",
        "description": "Fetch all addresses, optionally you can filter results by name, e.g: home: addresses(name: \"home\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "attachment",
        "description": "Fetch attachment by name, e.g: sales_report: attachment(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g: sales_reports: attachments(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "custom_address",
        "description": "Fetch address by name, e.g: address: custom_address(name: \"office_address\")",
        "is_deprecated": true,
        "deprecation_reason": "Use address",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_addresses",
        "description": "Fetch all addresses, optionaly you can filter results by name, e.g: home: custom_addresses(name: \"home\")",
        "is_deprecated": true,
        "deprecation_reason": "Use addresses",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_attachment",
        "description": "Fetch attachment by name, e.g: sales_report: custom_attachment(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachment",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g:\nsales_reports: custom_attachments(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachments",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_image",
        "description": "Fetch image by name, e.g: header: custom_image(name: \"header\")",
        "is_deprecated": true,
        "deprecation_reason": "Use image",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: custom_images(name: \"cat\")",
        "is_deprecated": true,
        "deprecation_reason": "Use images",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "customizable",
        "description": null,
        "type": { "name": "Customizable", "path": "union/customizable", "info": "Customizable" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizable_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizable_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "deleted_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "human_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "image",
        "description": "Fetch image by name, e.g: header: image(name: \"header\")",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: images(name: \"cat\")",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "model",
        "description": "Defines belongs-to relation with other model, e.g: parent: model(model_name:\n\"parent\", join_on_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "ListingsCustomization" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "String" }
          }
        ]
      },
      {
        "notices": [],
        "name": "models",
        "description": "Defines has-many relation with other model, e.g: children: models(model_name:\n\"child\", join_on_property: \"parent_id\", foreign_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "[ListingsCustomization]" },
        "arguments": [
          {
            "name": "foreign_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "join_on_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "[String]" }
          }
        ]
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of all properties assigned to the object.",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Fetch any property by name, e.g: hair_color: property(name: \"hair_color\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_array",
        "description": "Fetch any property of Array type by name, it returns Array in contrast to\n\"property\" which returns String. E.g: todo_list: property_array(name: \"todo_list\")",
        "type": { "name": "String", "path": "scalar/string", "info": "[String]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "remote_model",
        "description": "Defines relation object accessible over HTTP in JSON collection identified by it's ID.",
        "type": { "name": "Customization", "path": "object/customization", "info": "Customization" },
        "arguments": [
          {
            "name": "endpoint",
            "description": "Endpoint that will return resources for given ids in json format",
            "type": { "name": "Endpoint", "path": "input_object/endpoint", "info": "Endpoint!" }
          },
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          }
        ]
      },
      {
        "notices": [],
        "name": "sort_score",
        "description": "when sorting by distance - field contains distance to target location",
        "is_deprecated": true,
        "deprecation_reason": "not supported everywhere",
        "type": { "name": "Int", "path": "scalar/int", "info": "[Int]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user",
        "description": "Defines relation with other user, e.g: invited_by: user(join_on_property: \"invited_by_id\") { id }",
        "type": { "name": "User", "path": "object/user", "info": "User" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": null,
            "type": { "name": "String", "path": "scalar/string", "info": "String" },
            "default_value": "user_id"
          }
        ]
      },
      {
        "notices": [],
        "name": "user_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "EmailNotification",
    "description": "Email Notification",
    "interfaces": ["AdminSharedAttributesInterface"],
    "fields": [
      {
        "notices": [],
        "name": "attachments",
        "description": "json of the form { \"file_name.jpg\": { \"url\": \"http://example.com/file.jpg\" } }\nwhich defines email attachments. Liquid will be processed.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "bcc",
        "description": "Comma separated blind carbon copy list. Liquid allowed. For example \"john@example.com, jane@example.com\"",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "cc",
        "description": "Comma separated carbon copy list. Liquid allowed. For example \"john@example.com, jane@example.com\"",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "content",
        "description": "liquid code to evaluate to valid form html. If email is triggered via form\nconfiguration, You have access to \"form\" variable, with data specified in the configuration.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "delay_by",
        "description": "liquid code which should evaluate to integer. Delays invoking the job by\nspecified number of minutes. Useful to invoke code at certain point in time,\nfor example 1 hour before something etc. To calculate proper number you can\nuse time_diff filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configurations",
        "description": "form configurations which trigger the email",
        "type": { "name": "FormConfiguration", "path": "object/formconfiguration", "info": "[FormConfiguration!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "from",
        "description": "email address from which you would like to send the email, for example notifications@mydomain.com",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "layout_path",
        "description": "name of the liquid layout to which the content should be injected",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "name of the email, which is used in form_configurations or mutation to trigger it",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "reply_to",
        "description": "email address to which users should reply, for example support@mydomain.com",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "subject",
        "description": "liquid code to evaluate to text",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "to",
        "description": "Comma separated recipient list. Liquid allowed. For example: \"john@example.com, jane@example.com\"",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "trigger_condition",
        "description": "liquid code which should evaluate to true if the email should be sent",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "EmailNotificationCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "EmailNotification", "path": "object/emailnotification", "info": "[EmailNotification]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "EncryptedConstant",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "deleted_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "Name of the constant",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "value",
        "description": "Decrypted value of a constant",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "EncryptedConstantCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "EncryptedConstant", "path": "object/encryptedconstant", "info": "[EncryptedConstant]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "FlashMessages",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "alert",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "notice",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "FormConfiguration",
    "description": "Form configuration",
    "interfaces": ["AdminSharedAttributesInterface"],
    "fields": [
      {
        "notices": [],
        "name": "api_call_notifications",
        "description": "associated api call notifications",
        "type": { "name": "ApiCallNotification", "path": "object/apicallnotification", "info": "[ApiCallNotification!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "async_callback_actions",
        "description": "Same as callback, but invoked asynchronously. Recommended for performance reason.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "async_callback_delay",
        "description": "Delays invoking the job by specified number of minutes. Liquid allowed -\nuseful to invoke code at certain point in time, for example 1 hour before\nsomething etc. To calculate proper number you can use time_diff filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "async_callback_max_attempts",
        "description": "Defines max number of retrying attempts in case of an error. Usually you do not want to change it.",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "async_callback_priority",
        "description": "defines the invocaction priority, the higher the quicker timeout",
        "type": { "name": "AsyncCallbackPriority", "path": "enum/asynccallbackpriority", "info": "AsyncCallbackPriority" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "authorization_policies",
        "description": "associated authorization policies",
        "type": { "name": "AuthorizationPolicy", "path": "object/authorizationpolicy", "info": "[AuthorizationPolicy!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "callback_actions",
        "description": "liquid code to be invoked after persisting input to DB. If possible, use async callback actions instead",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "configuration",
        "description": "whitelist of attributes which can be persisted in the DB. On server side\n(callbacks, emails etc) you have access to submited values via form variable\n(for exapmple configuration: properties: my_var is accessible via\nform.properties.my_var )",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "default_payload",
        "description": "liquid code which has to evaluate to JSON. This extends/overwrites user\nsubmitted input via form, before validation. Most useful to store in DB\nsensitive data which you do not want user to modify, for example\ncontext.current_user.id",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "email_notifications",
        "description": "associated email notifications",
        "type": { "name": "EmailNotification", "path": "object/emailnotification", "info": "[EmailNotification!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "flash_alert",
        "description": "Message which you want to display to user upon validation errors.Output is\navailable via context.flash_alert. Liquid allowed.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "flash_notice",
        "description": "Message which you want to display to user after successful form submission.\nOutput is available via context.flash_notice. Liquid allowed.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "liquid_body",
        "description": "liquid code to evaluate to valid form html. You have access to form_builder variable and form tag.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_to",
        "description": "Path or URL to which user should be redirected after successful form submission. Liquid allowed.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "resource",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "resource_owner",
        "description": "defines who can submit the form. If set to anyone, please make sure to provide authorization_policies",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "sms_notifications",
        "description": "associated sms notifications",
        "type": { "name": "SmsNotification", "path": "object/smsnotification", "info": "[SmsNotification!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "spam_protection",
        "description": "name of the strategy and configuration for them",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "FormConfigurationCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "FormConfiguration", "path": "object/formconfiguration", "info": "[FormConfiguration]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "GeoPointType",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "lat",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "lon",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "HTTPRequestContext",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "authentication_providers",
        "description": "Returns array of configured authentication providers",
        "type": { "name": "AuthenticationProvider", "path": "enum/authenticationprovider", "info": "[AuthenticationProvider]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "body",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "current_full_path",
        "description": "Returns a String with the last requested path including their params. /foo?bar",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "current_path",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "current_url",
        "description": "Returns the original request URL as a String. # => \"http://www.example.com/articles?page=2\"",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "flash",
        "description": null,
        "type": { "name": "FlashMessages", "path": "object/flashmessages", "info": "FlashMessages" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_authenticity_token",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "headers",
        "description": "Access request headers",
        "type": { "name": "HeadersObject", "path": "scalar/headersobject", "info": "HeadersObject!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "is_xhr",
        "description": "Returns true if the “X-Requested-With” header contains “XMLHttpRequest” (case-insensitive),\nwhich may need to be manually added depending on the choice of JavaScript libraries and frameworks.",
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "params",
        "description": "Access data sent in by the user or other parameters in your controller actions",
        "type": { "name": "ParamsObject", "path": "scalar/paramsobject", "info": "ParamsObject!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "params_unfiltered",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "referer",
        "description": "The referer of the client",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "Handler",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "filter",
        "description": null,
        "type": { "name": "ActivityPayload", "path": "scalar/activitypayload", "info": "ActivityPayload" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "targets",
        "description": null,
        "type": { "name": "ActivityPayload", "path": "scalar/activitypayload", "info": "ActivityPayload" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "HandlerCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "Handler", "path": "object/handler", "info": "[Handler]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "Image",
    "description": "Generic image",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "filename",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" }, "arguments": [] },
      {
        "notices": [],
        "name": "image_original_height",
        "description": "image original height",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "image_original_width",
        "description": "image original width",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "uploader_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "url",
        "description": "image url, ex: thumb: url(version: \"thumb\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": [{ "name": "version", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "ImportCustomizationsMutationPayload",
    "description": "Autogenerated return type of ImportCustomizationsMutation",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "external_ids",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "ids",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID!]!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "ImportTransactablesMutationPayload",
    "description": "Autogenerated return type of ImportTransactablesMutation",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "external_ids",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "ids",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID!]!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "ImportUsersMutationPayload",
    "description": "Autogenerated return type of ImportUsersMutation",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "external_ids",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "ids",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID!]!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "Instance",
    "description": "Instance",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "LiquidLayout",
    "description": "Liquid Layouts",
    "interfaces": ["AdminSharedAttributesInterface"],
    "fields": [
      {
        "notices": [],
        "name": "body",
        "description": "liquid code to evaluate to valid html. To inject content of the resources using the layout use {{ content_for_layout }}",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "format",
        "description": null,
        "type": { "name": "PageFormat", "path": "enum/pageformat", "info": "PageFormat" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "path",
        "description": "defines the the path for layout, must starts with layouts/, for example layouts/my_layout",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "LiquidLayoutCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "LiquidLayout", "path": "object/liquidlayout", "info": "[LiquidLayout]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "LiquidPartial",
    "description": "Liquid Partials",
    "interfaces": ["AdminSharedAttributesInterface"],
    "fields": [
      {
        "notices": [],
        "name": "body",
        "description": "liquid code to evaluate to valid html",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "format",
        "description": null,
        "type": { "name": "PageFormat", "path": "enum/pageformat", "info": "PageFormat" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "path",
        "description": "defines the name of the partial to be used with include tag",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "LiquidPartialCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "LiquidPartial", "path": "object/liquidpartial", "info": "[LiquidPartial]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "Listing",
    "description": null,
    "interfaces": ["ListingCustomAttributeInterface", "ListingsMetadata", "RelationOnDemandInterface", "RemoteModelInterface"],
    "fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "creator",
        "description": "Remember to set `listing: { has_creator: true }` in query arguments",
        "type": { "name": "UserListing", "path": "object/userlisting", "info": "UserListing" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "creator_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "custom_address",
        "description": "Fetch address by name, e.g: address: custom_address(name: \"office_address\")",
        "type": { "name": "ListingAddress", "path": "object/listingaddress", "info": "ListingAddress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_addresses",
        "description": "Fetch all addresses, optionaly you can filter results by name, e.g: home: custom_addresses(name: \"home\")",
        "type": { "name": "ListingAddress", "path": "object/listingaddress", "info": "[ListingAddress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_attachment",
        "description": "Fetch attachment by name, e.g: sales_report: custom_attachment(name: \"sales_report\")",
        "type": { "name": "ListingsPrivateFile", "path": "object/listingsprivatefile", "info": "ListingsPrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_attachments",
        "description": "Fetch all attachments, optionaly you can filter results by name, e.g:\nsales_reports: custom_attachments(name: \"sales_report\")",
        "type": { "name": "ListingsPrivateFile", "path": "object/listingsprivatefile", "info": "[ListingsPrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_image",
        "description": "Fetch image by name, e.g: header: custom_image(name: \"header\")",
        "type": { "name": "ListingImage", "path": "object/listingimage", "info": "ListingImage" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: custom_images(name: \"cat\")",
        "type": { "name": "ListingImage", "path": "object/listingimage", "info": "[ListingImage]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "customizations",
        "description": null,
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "[ListingsCustomization]" },
        "arguments": [
          { "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } },
          {
            "name": "properties",
            "description": null,
            "type": { "name": "QueryCustomAttribute", "path": "input_object/querycustomattribute", "info": "[QueryCustomAttribute]" }
          },
          { "name": "user_id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } }
        ]
      },
      {
        "notices": [],
        "name": "deleted_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "model",
        "description": "Defines belongs-to relation with other model, e.g: parent: model(model_name:\n\"parent\", join_on_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "ListingsCustomization" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "String" }
          }
        ]
      },
      {
        "notices": [],
        "name": "models",
        "description": "Defines has-many relation with other model, e.g: children: models(model_name:\n\"child\", join_on_property: \"parent_id\", foreign_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "[ListingsCustomization]" },
        "arguments": [
          {
            "name": "foreign_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "join_on_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "[String]" }
          }
        ]
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of all properties assigned to the object.",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Fetch any custom attribute by name, ex: hair_color: property(name: \"hair_color\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_array",
        "description": "Fetch any property of Array type by name, it returns Array in contrast to\n\"property\" which returns String. E.g: todo_list: property_array(name: \"todo_list\")",
        "type": { "name": "String", "path": "scalar/string", "info": "[String]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_json",
        "description": "Fetch any property of JSON type by name, it returns JSON in contrast to\n\"property\" which returns String. E.g: todo_list: property_json(name: \"todo_list\")",
        "type": { "name": "JSONPayload", "path": "scalar/jsonpayload", "info": "JSONPayload" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "remote_model",
        "description": "Defines relation object accessible over HTTP in JSON collection identified by it's ID.",
        "type": { "name": "Customization", "path": "object/customization", "info": "Customization" },
        "arguments": [
          {
            "name": "endpoint",
            "description": "Endpoint that will return resources for given ids in json format",
            "type": { "name": "Endpoint", "path": "input_object/endpoint", "info": "Endpoint!" }
          },
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          }
        ]
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "sort_score",
        "description": "when sorting by distance - field contains distance to target location",
        "is_deprecated": true,
        "deprecation_reason": "not supported everywhere",
        "type": { "name": "Int", "path": "scalar/int", "info": "[Int]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user",
        "description": "Defines relation with other user, e.g: invited_by: user(join_on_property: \"invited_by_id\") { id }",
        "type": { "name": "User", "path": "object/user", "info": "User" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": null,
            "type": { "name": "String", "path": "scalar/string", "info": "String" },
            "default_value": "user_id"
          }
        ]
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "ListingAddress",
    "description": "An address",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "address",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "address2",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "apartment",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "city",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "country",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "iso_country_code",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "lat",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "lng",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "point",
        "description": null,
        "type": { "name": "GeoPointType", "path": "object/geopointtype", "info": "GeoPointType" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "postcode",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "service_radius",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "state",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "street",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "street_number",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "suburb",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "ListingCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "aggregations",
        "description": null,
        "type": { "name": "Aggregations", "path": "object/aggregations", "info": "Aggregations" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "Listing", "path": "object/listing", "info": "[Listing]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "size",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "ListingImage",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "file_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "filename",
        "description": null,
        "is_deprecated": true,
        "deprecation_reason": "Use file_name",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" }, "arguments": [] },
      {
        "notices": [],
        "name": "image_original_height",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "image_original_width",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "url",
        "description": "image url, ex: thumb: url(version: \"thumb\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [
          {
            "name": "version",
            "description": null,
            "type": { "name": "String", "path": "scalar/string", "info": "String" },
            "default_value": "thumb"
          }
        ]
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "ListingUserProfile",
    "description": "A profile",
    "interfaces": ["ListingCustomAttributeInterface", "RelationOnDemandInterface", "RemoteModelInterface"],
    "fields": [
      {
        "notices": [],
        "name": "custom_address",
        "description": "Fetch address by name, e.g: address: custom_address(name: \"office_address\")",
        "type": { "name": "ListingAddress", "path": "object/listingaddress", "info": "ListingAddress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_addresses",
        "description": "Fetch all addresses, optionaly you can filter results by name, e.g: home: custom_addresses(name: \"home\")",
        "type": { "name": "ListingAddress", "path": "object/listingaddress", "info": "[ListingAddress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_attachment",
        "description": "Fetch attachment by name, e.g: sales_report: custom_attachment(name: \"sales_report\")",
        "type": { "name": "ListingsPrivateFile", "path": "object/listingsprivatefile", "info": "ListingsPrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_attachments",
        "description": "Fetch all attachments, optionaly you can filter results by name, e.g:\nsales_reports: custom_attachments(name: \"sales_report\")",
        "type": { "name": "ListingsPrivateFile", "path": "object/listingsprivatefile", "info": "[ListingsPrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_image",
        "description": "Fetch image by name, e.g: header: custom_image(name: \"header\")",
        "type": { "name": "ListingImage", "path": "object/listingimage", "info": "ListingImage" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: custom_images(name: \"cat\")",
        "type": { "name": "ListingImage", "path": "object/listingimage", "info": "[ListingImage]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "customizations",
        "description": null,
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "[ListingsCustomization]" },
        "arguments": [
          { "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } },
          { "name": "user_id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } }
        ]
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "model",
        "description": "Defines belongs-to relation with other model, e.g: parent: model(model_name:\n\"parent\", join_on_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "ListingsCustomization" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "String" }
          }
        ]
      },
      {
        "notices": [],
        "name": "models",
        "description": "Defines has-many relation with other model, e.g: children: models(model_name:\n\"child\", join_on_property: \"parent_id\", foreign_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "[ListingsCustomization]" },
        "arguments": [
          {
            "name": "foreign_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "join_on_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "[String]" }
          }
        ]
      },
      {
        "notices": [],
        "name": "profile_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of all properties assigned to the object.",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Fetch any custom attribute by name, ex: hair_color: property(name: \"hair_color\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_array",
        "description": "Fetch any property of Array type by name, it returns Array in contrast to\n\"property\" which returns String. E.g: todo_list: property_array(name: \"todo_list\")",
        "type": { "name": "String", "path": "scalar/string", "info": "[String]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_json",
        "description": "Fetch any property of JSON type by name, it returns JSON in contrast to\n\"property\" which returns String. E.g: todo_list: property_json(name: \"todo_list\")",
        "type": { "name": "JSONPayload", "path": "scalar/jsonpayload", "info": "JSONPayload" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "remote_model",
        "description": "Defines relation object accessible over HTTP in JSON collection identified by it's ID.",
        "type": { "name": "Customization", "path": "object/customization", "info": "Customization" },
        "arguments": [
          {
            "name": "endpoint",
            "description": "Endpoint that will return resources for given ids in json format",
            "type": { "name": "Endpoint", "path": "input_object/endpoint", "info": "Endpoint!" }
          },
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          }
        ]
      },
      {
        "notices": [],
        "name": "user",
        "description": "Defines relation with other user, e.g: invited_by: user(join_on_property: \"invited_by_id\") { id }",
        "type": { "name": "User", "path": "object/user", "info": "User" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": null,
            "type": { "name": "String", "path": "scalar/string", "info": "String" },
            "default_value": "user_id"
          }
        ]
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "ListingsCommunication",
    "description": "Deprecated",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "phone_number",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "verified",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "ListingsCustomModelType",
    "description": null,
    "interfaces": [],
    "fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "ListingsCustomization",
    "description": null,
    "interfaces": ["ListingCustomAttributeInterface", "RelationOnDemandInterface", "RemoteModelInterface"],
    "fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "custom_address",
        "description": "Fetch address by name, e.g: address: custom_address(name: \"office_address\")",
        "type": { "name": "ListingAddress", "path": "object/listingaddress", "info": "ListingAddress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_addresses",
        "description": "Fetch all addresses, optionaly you can filter results by name, e.g: home: custom_addresses(name: \"home\")",
        "type": { "name": "ListingAddress", "path": "object/listingaddress", "info": "[ListingAddress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_attachment",
        "description": "Fetch attachment by name, e.g: sales_report: custom_attachment(name: \"sales_report\")",
        "type": { "name": "ListingsPrivateFile", "path": "object/listingsprivatefile", "info": "ListingsPrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_attachments",
        "description": "Fetch all attachments, optionaly you can filter results by name, e.g:\nsales_reports: custom_attachments(name: \"sales_report\")",
        "type": { "name": "ListingsPrivateFile", "path": "object/listingsprivatefile", "info": "[ListingsPrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_image",
        "description": "Fetch image by name, e.g: header: custom_image(name: \"header\")",
        "type": { "name": "ListingImage", "path": "object/listingimage", "info": "ListingImage" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: custom_images(name: \"cat\")",
        "type": { "name": "ListingImage", "path": "object/listingimage", "info": "[ListingImage]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_model_type",
        "description": null,
        "type": { "name": "ListingsCustomModelType", "path": "object/listingscustommodeltype", "info": "ListingsCustomModelType" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizable",
        "description": null,
        "type": { "name": "Customizable", "path": "union/customizable", "info": "Customizable" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizable_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizable_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizations",
        "description": null,
        "type": {
          "name": "ListingsCustomizationCollection",
          "path": "object/listingscustomizationcollection",
          "info": "ListingsCustomizationCollection"
        },
        "arguments": [
          {
            "name": "filter",
            "description": null,
            "type": {
              "name": "NestedCustomizationFilters",
              "path": "input_object/nestedcustomizationfilters",
              "info": "NestedCustomizationFilters"
            }
          },
          { "name": "page", "description": null, "type": { "name": "Int", "path": "scalar/int", "info": "Int" }, "default_value": 1 },
          { "name": "per_page", "description": null, "type": { "name": "Int", "path": "scalar/int", "info": "Int" }, "default_value": 20 },
          {
            "name": "sort",
            "description": null,
            "type": {
              "name": "CustomizationsSortOrder",
              "path": "input_object/customizationssortorder",
              "info": "[CustomizationsSortOrder]"
            }
          }
        ]
      },
      {
        "notices": [],
        "name": "deleted_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "human_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "model",
        "description": "Defines belongs-to relation with other model, e.g: parent: model(model_name:\n\"parent\", join_on_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "ListingsCustomization" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "String" }
          }
        ]
      },
      {
        "notices": [],
        "name": "models",
        "description": "Defines has-many relation with other model, e.g: children: models(model_name:\n\"child\", join_on_property: \"parent_id\", foreign_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "[ListingsCustomization]" },
        "arguments": [
          {
            "name": "foreign_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "join_on_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "[String]" }
          }
        ]
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment",
        "description": null,
        "type": { "name": "Payment", "path": "object/payment", "info": "Payment" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of all properties assigned to the object.",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Fetch any custom attribute by name, ex: hair_color: property(name: \"hair_color\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_array",
        "description": "Fetch any property of Array type by name, it returns Array in contrast to\n\"property\" which returns String. E.g: todo_list: property_array(name: \"todo_list\")",
        "type": { "name": "String", "path": "scalar/string", "info": "[String]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_json",
        "description": "Fetch any property of JSON type by name, it returns JSON in contrast to\n\"property\" which returns String. E.g: todo_list: property_json(name: \"todo_list\")",
        "type": { "name": "JSONPayload", "path": "scalar/jsonpayload", "info": "JSONPayload" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "remote_model",
        "description": "Defines relation object accessible over HTTP in JSON collection identified by it's ID.",
        "type": { "name": "Customization", "path": "object/customization", "info": "Customization" },
        "arguments": [
          {
            "name": "endpoint",
            "description": "Endpoint that will return resources for given ids in json format",
            "type": { "name": "Endpoint", "path": "input_object/endpoint", "info": "Endpoint!" }
          },
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          }
        ]
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user",
        "description": "Defines relation with other user, e.g: invited_by: user(join_on_property: \"invited_by_id\") { id }",
        "type": { "name": "User", "path": "object/user", "info": "User" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": null,
            "type": { "name": "String", "path": "scalar/string", "info": "String" },
            "default_value": "user_id"
          }
        ]
      },
      {
        "notices": [],
        "name": "user_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "ListingsCustomizationCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "aggregations",
        "description": null,
        "type": { "name": "Aggregations", "path": "object/aggregations", "info": "Aggregations" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "[ListingsCustomization]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "size",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "ListingsPrivateFile",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "content_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "file_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" }, "arguments": [] },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "size_bytes",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "url",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "LogEntry",
    "description": null,
    "interfaces": [],
    "fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "message",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "MerchantAccount",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "account_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "attachments",
        "description": null,
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "bank_account_number",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "date_of_birth",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": "Reference to object in external Payment Gateway",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "first_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "last_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "merchantable_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "merchantable_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_gateway",
        "description": null,
        "type": { "name": "PaymentGateway", "path": "object/paymentgateway", "info": "PaymentGateway" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_gateway_balance",
        "description": "Returns actual Stripe subaccount balance",
        "type": { "name": "PaymentGatewayBalance", "path": "object/paymentgatewaybalance", "info": "PaymentGatewayBalance" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "state",
        "description": null,
        "type": { "name": "MerchantAccountState", "path": "enum/merchantaccountstate", "info": "MerchantAccountState" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "MerchantAccountCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "MerchantAccount", "path": "object/merchantaccount", "info": "[MerchantAccount]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "Model",
    "description": null,
    "interfaces": ["PropertiesInterface"],
    "fields": [
      {
        "notices": [],
        "name": "address",
        "description": "Fetch address by name, e.g: address: address(name: \"office_address\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "addresses",
        "description": "Fetch all addresses, optionally you can filter results by name, e.g: home_address: addresses(name: \"home\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress!]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "attachment",
        "description": "Fetch attachment by name, e.g: sales_report: attachment(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g: sales_reports: attachments(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile!]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizable_id",
        "description": "ID of releated object",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizable_type",
        "description": "Type name of releated object",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "deleted_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": "External id used to import/update from other data source",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": "ID of an object.",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "image",
        "description": "Fetch image by name, e.g: header: image(name: \"header\")",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "images",
        "description": "Fetch all images, optionally you can filter results by name, e.g: cat_images: images(name: \"cat\")",
        "type": { "name": "Image", "path": "object/image", "info": "[Image!]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "models",
        "description": "Defines has-many relation with other model, e.g: children: models(model_name:\n\"child\", join_on_property: \"parent_id\", foreign_property: \"parent_id\") { id }",
        "type": { "name": "Model", "path": "object/model", "info": "[Model!]" },
        "arguments": [
          {
            "name": "foreign_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "join_on_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "[String!]!" }
          }
        ]
      },
      {
        "notices": [],
        "name": "name",
        "description": "Name of the model type",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of all properties assigned to the object.",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Fetch any property by name, ex: hair_color: property(name: \"hair_color\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_array",
        "description": "Fetch any property of Array type by name, it returns Array in contrast to\n\"property\" which returns String. E.g: todo_list: property_array(name: \"todo_list\")",
        "type": { "name": "String", "path": "scalar/string", "info": "[String!]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_json",
        "description": "Fetch property of JSON type by name, it returns JSON in contrast to \"property\" which returns String.",
        "type": { "name": "JSONPayload", "path": "scalar/jsonpayload", "info": "JSONPayload" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user_id",
        "description": "ID of user",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "ModelCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "Model", "path": "object/model", "info": "[Model]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "ModelSchema",
    "description": "Schema for model (old CustomModelType)",
    "interfaces": ["AdminPropertiesInterface", "AdminSharedAttributesInterface"],
    "fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "fields",
        "description": "Deprecated, use properties instead.",
        "is_deprecated": true,
        "deprecation_reason": "Use properties",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "parameterized_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of properties attributes to be included in the results",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "ModelSchemaCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "ModelSchema", "path": "object/modelschema", "info": "[ModelSchema]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "NotificationSendEmailPayload",
    "description": "Autogenerated return type of NotificationSendEmail",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "errors",
        "description": null,
        "type": { "name": "BaseError", "path": "object/baseerror", "info": "[BaseError!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "is_scheduled_to_send",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "ObjectCount",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "count",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "Page",
    "description": "Page",
    "interfaces": ["AdminSharedAttributesInterface"],
    "fields": [
      {
        "notices": [],
        "name": "authorization_policies",
        "description": "associated authorization policies",
        "type": { "name": "AuthorizationPolicy", "path": "object/authorizationpolicy", "info": "[AuthorizationPolicy!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "content",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "dynamic_cache_expire",
        "description": "the number of seconds for which this page will be cached; set\ndynamic_cache_layout accordingly to your scenario. Triggers authorization. Use\nonly if cache_key cannot be easily determined (for example for search results page)",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "dynamic_cache_key",
        "description": "liquid which evaluates to the cache key, for example {{ context.page.slug\n}}/{{ context.params.slug2 }}for page with slug \"abc\" will cache separately\n/abc/1 and /abc/2, however abc/1/1 will return the same value as abc/1/2. If\nleft blank, the full url will be used.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "dynamic_cache_layout",
        "description": "defines whether layout should be cached as well, or only page. Usually it is\nnot possible to cache layout due to dynamic data in it, like name of a logged\nin user, hence default is false.",
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "format",
        "description": null,
        "type": { "name": "PageFormat", "path": "enum/pageformat", "info": "PageFormat" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "handler",
        "description": null,
        "type": { "name": "PageRequestMethod", "path": "enum/pagerequestmethod", "info": "PageRequestMethod" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "layout_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "max_deep_level",
        "description": "max nesting of the url to be resolved by this slug. For example slug \"abc\"\nwith max_deep_level 2 will resolve /abc, abc/1, abc/2, but will NOT resolve\nabc/2/something.",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_code",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_to",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "request_method",
        "description": null,
        "type": { "name": "PageRequestMethod", "path": "enum/pagerequestmethod", "info": "PageRequestMethod" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "response_headers",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "searchable",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "static_cache_expire",
        "description": "the number of seconds for which this page will be cached as a static html\npage; works only for not logged in users, skips any authorization",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "PageCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "Page", "path": "object/page", "info": "[Page]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "Payment",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "additional_tax_price",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "additional_tax_price_cents",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "currency",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "direct_charge",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "failed_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" }, "arguments": [] },
      {
        "notices": [],
        "name": "included_tax_price",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "included_tax_price_cents",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "merchant_account",
        "description": null,
        "type": { "name": "MerchantAccount", "path": "object/merchantaccount", "info": "MerchantAccount" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "paid_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payable_id",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payable_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payer",
        "description": null,
        "type": { "name": "User", "path": "object/user", "info": "User!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_gateway",
        "description": null,
        "type": { "name": "PaymentGateway", "path": "object/paymentgateway", "info": "PaymentGateway" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_gateway_fee_cents",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_method",
        "description": null,
        "type": { "name": "PaymentMethod", "path": "object/paymentmethod", "info": "PaymentMethod" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_transfers",
        "description": null,
        "type": { "name": "PaymentTransfer", "path": "object/paymenttransfer", "info": "[PaymentTransfer]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "receiver",
        "description": null,
        "type": { "name": "User", "path": "object/user", "info": "User!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "refunds",
        "description": null,
        "type": { "name": "Refund", "path": "object/refund", "info": "[Refund]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "service_fee_payer",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "service_fee_receiver",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "state",
        "description": null,
        "type": { "name": "PaymentState", "path": "enum/paymentstate", "info": "PaymentState" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "subtotal_amount",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_amount",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_amount_cents",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "transferable_amount",
        "description": "Amount that can be transferred to receiver",
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "transferable_amount_cents",
        "description": "Amount cents that can be transferred to receiver",
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "PaymentCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "Payment", "path": "object/payment", "info": "[Payment]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "PaymentGateway",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_mode_publishable_key",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "live_active",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "live_publishable_key",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_methods",
        "description": null,
        "type": { "name": "PaymentMethod", "path": "object/paymentmethod", "info": "[PaymentMethod]" },
        "arguments": [
          {
            "name": "payment_method_type",
            "description": null,
            "type": { "name": "PaymentMethodType", "path": "enum/paymentmethodtype", "info": "[PaymentMethodType]" }
          }
        ]
      },
      {
        "notices": [],
        "name": "test_active",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "test_publishable_key",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "PaymentGatewayBalance",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "available",
        "description": null,
        "type": {
          "name": "PaymentGatewayBalanceEntry",
          "path": "object/paymentgatewaybalanceentry",
          "info": "[PaymentGatewayBalanceEntry]"
        },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "pending",
        "description": null,
        "type": {
          "name": "PaymentGatewayBalanceEntry",
          "path": "object/paymentgatewaybalanceentry",
          "info": "[PaymentGatewayBalanceEntry]"
        },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "PaymentGatewayBalanceEntry",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "amount",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "currency",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "source_types",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "PaymentMethod",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "active",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "environment",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "key",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_gateway",
        "description": null,
        "type": { "name": "PaymentGateway", "path": "object/paymentgateway", "info": "PaymentGateway" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_method_type",
        "description": null,
        "type": { "name": "PaymentMethodType", "path": "enum/paymentmethodtype", "info": "PaymentMethodType!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "PaymentMutationResult",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "errors",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "result",
        "description": null,
        "type": { "name": "Payment", "path": "object/payment", "info": "Payment" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "success",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "PaymentTransfer",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "amount",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "amount_cents",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "currency",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "failed_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "gateway_response",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" }, "arguments": [] },
      {
        "notices": [],
        "name": "payment_gateway_fee_cents",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payments",
        "description": null,
        "type": { "name": "Payment", "path": "object/payment", "info": "[Payment]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payout_attempts",
        "description": null,
        "type": { "name": "PayoutAttempt", "path": "object/payoutattempt", "info": "[PayoutAttempt]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "receiver",
        "description": null,
        "type": { "name": "User", "path": "object/user", "info": "User" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "service_fee_amount_guest",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "service_fee_amount_guest_cents",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "service_fee_amount_host",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "service_fee_amount_host_cents",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "token",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "transferred_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "PaymentTransferCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "PaymentTransfer", "path": "object/paymenttransfer", "info": "[PaymentTransfer]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "PaymentTransferMutationResult",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "errors",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "result",
        "description": null,
        "type": { "name": "PaymentTransfer", "path": "object/paymenttransfer", "info": "PaymentTransfer" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "success",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "PayoutAttempt",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "amount",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "amount_cents",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "failed",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "failure_message",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "gateway_response",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "pending",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "success",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "PrivateFile",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "content_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "file_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" }, "arguments": [] },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "size_bytes",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "url",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "Profile",
    "description": "A profile",
    "interfaces": ["CustomAttributeInterface", "RelationOnDemandInterface", "RemoteModelInterface"],
    "fields": [
      {
        "notices": [],
        "name": "address",
        "description": "Fetch address by name, e.g: address: address(name: \"office_address\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "addresses",
        "description": "Fetch all addresses, optionally you can filter results by name, e.g: home: addresses(name: \"home\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "attachment",
        "description": "Fetch attachment by name, e.g: sales_report: attachment(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g: sales_reports: attachments(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_address",
        "description": "Fetch address by name, e.g: address: custom_address(name: \"office_address\")",
        "is_deprecated": true,
        "deprecation_reason": "Use address",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_addresses",
        "description": "Fetch all addresses, optionaly you can filter results by name, e.g: home: custom_addresses(name: \"home\")",
        "is_deprecated": true,
        "deprecation_reason": "Use addresses",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_attachment",
        "description": "Fetch attachment by name, e.g: sales_report: custom_attachment(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachment",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g:\nsales_reports: custom_attachments(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachments",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_image",
        "description": "Fetch image by name, e.g: header: custom_image(name: \"header\")",
        "is_deprecated": true,
        "deprecation_reason": "Use image",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: custom_images(name: \"cat\")",
        "is_deprecated": true,
        "deprecation_reason": "Use images",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "customizations",
        "description": null,
        "type": { "name": "Customization", "path": "object/customization", "info": "[Customization]" },
        "arguments": [
          { "name": "customizable_id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } },
          { "name": "customizable_type", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } },
          { "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" } },
          { "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } },
          {
            "name": "properties",
            "description": null,
            "type": { "name": "QueryCustomAttribute", "path": "input_object/querycustomattribute", "info": "[QueryCustomAttribute]" }
          },
          {
            "name": "sort",
            "description": null,
            "type": { "name": "CustomizationSortOrder", "path": "input_object/customizationsortorder", "info": "[CustomizationSortOrder]" }
          },
          { "name": "user_id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } }
        ]
      },
      {
        "notices": [],
        "name": "id",
        "description": "ID of an object.",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "image",
        "description": "Fetch image by name, e.g: header: image(name: \"header\")",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: images(name: \"cat\")",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "model",
        "description": "Defines belongs-to relation with other model, e.g: parent: model(model_name:\n\"parent\", join_on_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "ListingsCustomization" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "String" }
          }
        ]
      },
      {
        "notices": [],
        "name": "models",
        "description": "Defines has-many relation with other model, e.g: children: models(model_name:\n\"child\", join_on_property: \"parent_id\", foreign_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "[ListingsCustomization]" },
        "arguments": [
          {
            "name": "foreign_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "join_on_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "[String]" }
          }
        ]
      },
      {
        "notices": [],
        "name": "profile_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of all properties assigned to the object.",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Fetch any property by name, e.g: hair_color: property(name: \"hair_color\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_array",
        "description": "Fetch any property of Array type by name, it returns Array in contrast to\n\"property\" which returns String. E.g: todo_list: property_array(name: \"todo_list\")",
        "type": { "name": "String", "path": "scalar/string", "info": "[String]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "remote_model",
        "description": "Defines relation object accessible over HTTP in JSON collection identified by it's ID.",
        "type": { "name": "Customization", "path": "object/customization", "info": "Customization" },
        "arguments": [
          {
            "name": "endpoint",
            "description": "Endpoint that will return resources for given ids in json format",
            "type": { "name": "Endpoint", "path": "input_object/endpoint", "info": "Endpoint!" }
          },
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          }
        ]
      },
      {
        "notices": [],
        "name": "user",
        "description": "Defines relation with other user, e.g: invited_by: user(join_on_property: \"invited_by_id\") { id }",
        "type": { "name": "User", "path": "object/user", "info": "User" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": null,
            "type": { "name": "String", "path": "scalar/string", "info": "String" },
            "default_value": "user_id"
          }
        ]
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "Property",
    "description": "Property definition",
    "interfaces": ["AdminSharedAttributesInterface"],
    "fields": [
      {
        "notices": [],
        "name": "attribute_type",
        "description": "Type of the property",
        "type": { "name": "PropertyTypeEnum", "path": "enum/propertytypeenum", "info": "PropertyTypeEnum" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "default_value",
        "description": "Default value for new objects",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "Name of the property",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "target_id",
        "description": "Id of the schema to which this property definition belongs",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "target_type",
        "description": "Type of the schema to which this property definition belongs",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "Refund",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "amount",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "amount_cents",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "payment",
        "description": null,
        "type": { "name": "Payment", "path": "object/payment", "info": "Payment" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_gateway",
        "description": null,
        "type": { "name": "PaymentGateway", "path": "object/paymentgateway", "info": "PaymentGateway" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "response",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "Relationship",
    "description": null,
    "interfaces": ["CustomAttributeInterface"],
    "fields": [
      {
        "notices": [],
        "name": "address",
        "description": "Fetch address by name, e.g: address: address(name: \"office_address\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "addresses",
        "description": "Fetch all addresses, optionally you can filter results by name, e.g: home: addresses(name: \"home\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "attachment",
        "description": "Fetch attachment by name, e.g: sales_report: attachment(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g: sales_reports: attachments(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "creator",
        "description": null,
        "type": { "name": "User", "path": "object/user", "info": "User" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "creator_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "custom_address",
        "description": "Fetch address by name, e.g: address: custom_address(name: \"office_address\")",
        "is_deprecated": true,
        "deprecation_reason": "Use address",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_addresses",
        "description": "Fetch all addresses, optionaly you can filter results by name, e.g: home: custom_addresses(name: \"home\")",
        "is_deprecated": true,
        "deprecation_reason": "Use addresses",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_attachment",
        "description": "Fetch attachment by name, e.g: sales_report: custom_attachment(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachment",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g:\nsales_reports: custom_attachments(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachments",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_image",
        "description": "Fetch image by name, e.g: header: custom_image(name: \"header\")",
        "is_deprecated": true,
        "deprecation_reason": "Use image",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: custom_images(name: \"cat\")",
        "is_deprecated": true,
        "deprecation_reason": "Use images",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "customizations",
        "description": "Fetch any customization by name or id, ex: hair_color: customizations(name: \"hair_color\")",
        "type": { "name": "Customization", "path": "object/customization", "info": "[Customization]" },
        "arguments": [
          { "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } },
          { "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }
        ]
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "image",
        "description": "Fetch image by name, e.g: header: image(name: \"header\")",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: images(name: \"cat\")",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of all properties assigned to the object.",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Fetch any property by name, e.g: hair_color: property(name: \"hair_color\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_array",
        "description": "Fetch any property of Array type by name, it returns Array in contrast to\n\"property\" which returns String. E.g: todo_list: property_array(name: \"todo_list\")",
        "type": { "name": "String", "path": "scalar/string", "info": "[String]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "relationship_type",
        "description": null,
        "type": { "name": "RelationshipType", "path": "object/relationshiptype", "info": "RelationshipType" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "RelationshipCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "Relationship", "path": "object/relationship", "info": "[Relationship]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "RelationshipType",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "parameterized_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "RelationshipUser",
    "description": null,
    "interfaces": ["CustomAttributeInterface"],
    "fields": [
      {
        "notices": [],
        "name": "address",
        "description": "Fetch address by name, e.g: address: address(name: \"office_address\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "addresses",
        "description": "Fetch all addresses, optionally you can filter results by name, e.g: home: addresses(name: \"home\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "attachment",
        "description": "Fetch attachment by name, e.g: sales_report: attachment(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g: sales_reports: attachments(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "custom_address",
        "description": "Fetch address by name, e.g: address: custom_address(name: \"office_address\")",
        "is_deprecated": true,
        "deprecation_reason": "Use address",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_addresses",
        "description": "Fetch all addresses, optionaly you can filter results by name, e.g: home: custom_addresses(name: \"home\")",
        "is_deprecated": true,
        "deprecation_reason": "Use addresses",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_attachment",
        "description": "Fetch attachment by name, e.g: sales_report: custom_attachment(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachment",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g:\nsales_reports: custom_attachments(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachments",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_image",
        "description": "Fetch image by name, e.g: header: custom_image(name: \"header\")",
        "is_deprecated": true,
        "deprecation_reason": "Use image",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: custom_images(name: \"cat\")",
        "is_deprecated": true,
        "deprecation_reason": "Use images",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "customizations",
        "description": "Fetch any customization by name or id, ex: hair_color: customizations(name: \"hair_color\")",
        "type": { "name": "Customization", "path": "object/customization", "info": "[Customization]" },
        "arguments": [
          { "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } },
          { "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }
        ]
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "image",
        "description": "Fetch image by name, e.g: header: image(name: \"header\")",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: images(name: \"cat\")",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of all properties assigned to the object.",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Fetch any property by name, e.g: hair_color: property(name: \"hair_color\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_array",
        "description": "Fetch any property of Array type by name, it returns Array in contrast to\n\"property\" which returns String. E.g: todo_list: property_array(name: \"todo_list\")",
        "type": { "name": "String", "path": "scalar/string", "info": "[String]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "relationship",
        "description": null,
        "type": { "name": "Relationship", "path": "object/relationship", "info": "Relationship" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "relationship_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "relationship_user_type",
        "description": null,
        "type": { "name": "RelationshipUserType", "path": "object/relationshipusertype", "info": "RelationshipUserType" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user",
        "description": null,
        "type": { "name": "User", "path": "object/user", "info": "User" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "RelationshipUserCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "RelationshipUser", "path": "object/relationshipuser", "info": "[RelationshipUser]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "RelationshipUserType",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "parameterized_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "Response",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "body",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "headers",
        "description": "Hash of headers returned by the server",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "status",
        "description": "Standard HTTP status code",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "SeoData",
    "description": "Deprecated",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "highlighted",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "snippet",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "url",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "SeoKeyword",
    "description": "Deprecated",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "category",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "category_url",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "default_page_meta_description",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "full_keyword_match_score",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "listings",
        "description": null,
        "type": { "name": "ListingCollection", "path": "object/listingcollection", "info": "ListingCollection" },
        "arguments": [
          {
            "name": "listing",
            "description": null,
            "type": { "name": "QueryListing", "path": "input_object/querylisting", "info": "QueryListing" },
            "default_value": {}
          },
          { "name": "page", "description": null, "type": { "name": "Int", "path": "scalar/int", "info": "Int" }, "default_value": 1 },
          { "name": "per_page", "description": null, "type": { "name": "Int", "path": "scalar/int", "info": "Int" }, "default_value": 20 }
        ]
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "related_keywords",
        "description": null,
        "type": { "name": "SeoKeywordCollection", "path": "object/seokeywordcollection", "info": "SeoKeywordCollection" },
        "arguments": [
          { "name": "page", "description": null, "type": { "name": "Int", "path": "scalar/int", "info": "Int" }, "default_value": 1 },
          { "name": "per_page", "description": null, "type": { "name": "Int", "path": "scalar/int", "info": "Int" }, "default_value": 20 },
          {
            "name": "type",
            "description": "available types: \"similar\" and \"popular\"",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          }
        ]
      },
      {
        "notices": [],
        "name": "related_keywords_seo_data",
        "description": null,
        "type": { "name": "SeoData", "path": "object/seodata", "info": "[SeoData]" },
        "arguments": [
          {
            "name": "type",
            "description": "available types: \"similar\" and \"popular\"",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          }
        ]
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "transactable_seo_data",
        "description": null,
        "type": { "name": "SeoData", "path": "object/seodata", "info": "[SeoData]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "transactables",
        "description": null,
        "type": { "name": "TransactableCollection", "path": "object/transactablecollection", "info": "TransactableCollection" },
        "arguments": [
          { "name": "page", "description": null, "type": { "name": "Int", "path": "scalar/int", "info": "Int" }, "default_value": 1 },
          { "name": "per_page", "description": null, "type": { "name": "Int", "path": "scalar/int", "info": "Int" }, "default_value": 20 }
        ]
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "url",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "SeoKeywordCollection",
    "description": "Deprecated",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "SeoKeyword", "path": "object/seokeyword", "info": "[SeoKeyword]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "Session",
    "description": "A session",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "email",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "password",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "SmsNotification",
    "description": "Sms Notification",
    "interfaces": ["AdminSharedAttributesInterface"],
    "fields": [
      {
        "notices": [],
        "name": "content",
        "description": "liquid code to evaluate to valid text. If sms is triggered via form\nconfiguration, You have access to \"form\" variable, with data specified in the configuration.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "delay_by",
        "description": "liquid code which should evaluate to integer. Delays invoking the job by\nspecified number of minutes. Useful to invoke code at certain point in time,\nfor example 1 hour before something etc. To calculate proper number you can\nuse time_diff filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configurations",
        "description": "form configurations which trigger the sms",
        "type": { "name": "FormConfiguration", "path": "object/formconfiguration", "info": "[FormConfiguration!]" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "name of the sms, which is used in form_configurations or mutation to trigger it",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "to",
        "description": "liquid code to evaluate to valid mobile number with country code, for example\n+1 541 754 3010.  Useful filter to build valid mobile number is\n\"$to_mobile_number\".",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "trigger_condition",
        "description": "liquid code which should evaluate to true if the sms should be sent",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "SmsNotificationCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "SmsNotification", "path": "object/smsnotification", "info": "[SmsNotification]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "Transactable",
    "description": null,
    "interfaces": ["RelationOnDemandInterface"],
    "fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "creator",
        "description": null,
        "type": { "name": "User", "path": "object/user", "info": "User!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "creator_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "custom_address",
        "description": null,
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_image",
        "description": null,
        "type": { "name": "ListingImage", "path": "object/listingimage", "info": "[ListingImage]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "customizations",
        "description": "Fetch any customization by name or id, ex: hair_color: customization(name: \"hair_color\")",
        "type": { "name": "Customization", "path": "object/customization", "info": "[Customization]!" },
        "arguments": [
          { "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } },
          { "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } },
          { "name": "user_id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } }
        ]
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "is_deleted",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "model",
        "description": "Defines belongs-to relation with other model, e.g: parent: model(model_name:\n\"parent\", join_on_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "ListingsCustomization" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "String" }
          }
        ]
      },
      {
        "notices": [],
        "name": "models",
        "description": "Defines has-many relation with other model, e.g: children: models(model_name:\n\"child\", join_on_property: \"parent_id\", foreign_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "[ListingsCustomization]" },
        "arguments": [
          {
            "name": "foreign_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "join_on_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "[String]" }
          }
        ]
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Fetch any Property by name, ex: hair_color: property(name: \"hair_color\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_array",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "[String]!" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user",
        "description": "Defines relation with other user, e.g: invited_by: user(join_on_property: \"invited_by_id\") { id }",
        "type": { "name": "User", "path": "object/user", "info": "User" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": null,
            "type": { "name": "String", "path": "scalar/string", "info": "String" },
            "default_value": "user_id"
          }
        ]
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "TransactableCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "Transactable", "path": "object/transactable", "info": "[Transactable]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "TransactableSchema",
    "description": "Schema for transactable (old name was TransactableType). Deprecated, use ModelSchema",
    "interfaces": ["AdminPropertiesInterface", "AdminSharedAttributesInterface"],
    "fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "fields",
        "description": "Deprecated, use properties instead.",
        "is_deprecated": true,
        "deprecation_reason": "Use properties",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "parameterized_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of properties attributes to be included in the results",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "TransactableSchemaCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "TransactableSchema", "path": "object/transactableschema", "info": "[TransactableSchema]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "TransactableType",
    "description": null,
    "interfaces": [],
    "fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "UpdateCustomizationsMutationPayload",
    "description": "Autogenerated return type of UpdateCustomizationsMutation",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "ids",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID!]!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "UpdateUsersMutationPayload",
    "description": "Autogenerated return type of UpdateUsersMutation",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "ids",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID!]!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "User",
    "description": "A user",
    "interfaces": ["CustomAttributeInterface"],
    "fields": [
      {
        "notices": [],
        "name": "address",
        "description": "Fetch address by name, e.g: address: address(name: \"office_address\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "addresses",
        "description": "Fetch all addresses, optionally you can filter results by name, e.g: home: addresses(name: \"home\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "attachment",
        "description": "Fetch attachment by name, e.g: sales_report: attachment(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g: sales_reports: attachments(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "authentications",
        "description": null,
        "type": { "name": "Authentication", "path": "object/authentication", "info": "[Authentication]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "bank_accounts",
        "description": null,
        "type": { "name": "BankAccount", "path": "object/bankaccount", "info": "[BankAccount]" },
        "arguments": [{ "name": "payment_method_id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } }]
      },
      {
        "notices": [],
        "name": "communication",
        "description": null,
        "type": { "name": "Communication", "path": "object/communication", "info": "Communication" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "credit_cards",
        "description": null,
        "type": { "name": "CreditCard", "path": "object/creditcard", "info": "[CreditCard]" },
        "arguments": [{ "name": "payment_method_id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } }]
      },
      {
        "notices": [],
        "name": "custom_address",
        "description": "Fetch address by name, e.g: address: custom_address(name: \"office_address\")",
        "is_deprecated": true,
        "deprecation_reason": "Use address",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_addresses",
        "description": "Fetch all addresses, optionaly you can filter results by name, e.g: home: custom_addresses(name: \"home\")",
        "is_deprecated": true,
        "deprecation_reason": "Use addresses",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_attachment",
        "description": "Fetch attachment by name, e.g: sales_report: custom_attachment(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachment",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g:\nsales_reports: custom_attachments(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachments",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_image",
        "description": "Fetch image by name, e.g: header: custom_image(name: \"header\")",
        "is_deprecated": true,
        "deprecation_reason": "Use image",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: custom_images(name: \"cat\")",
        "is_deprecated": true,
        "deprecation_reason": "Use images",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "customizations",
        "description": null,
        "type": { "name": "Customization", "path": "object/customization", "info": "[Customization]" },
        "arguments": [
          { "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } },
          {
            "name": "user_id",
            "description": "ID of user that created customization",
            "type": { "name": "ID", "path": "scalar/id", "info": "ID" }
          }
        ]
      },
      {
        "notices": [],
        "name": "email",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "first_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "image",
        "description": "Fetch image by name, e.g: header: image(name: \"header\")",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: images(name: \"cat\")",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "language",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "last_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "merchant_accounts",
        "description": null,
        "type": { "name": "MerchantAccount", "path": "object/merchantaccount", "info": "[MerchantAccount]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "middle_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "profile",
        "description": null,
        "type": { "name": "Profile", "path": "object/profile", "info": "Profile" },
        "arguments": [
          { "name": "profile_type", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }
        ]
      },
      {
        "notices": [],
        "name": "profiles",
        "description": null,
        "type": { "name": "Profile", "path": "object/profile", "info": "[Profile]" },
        "arguments": [
          { "name": "profile_type", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }
        ]
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of all properties assigned to the object.",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Fetch any property by name, e.g: hair_color: property(name: \"hair_color\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_array",
        "description": "Fetch any property of Array type by name, it returns Array in contrast to\n\"property\" which returns String. E.g: todo_list: property_array(name: \"todo_list\")",
        "type": { "name": "String", "path": "scalar/string", "info": "[String]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "social_friends",
        "description": null,
        "type": { "name": "UserCollection", "path": "object/usercollection", "info": "UserCollection" },
        "arguments": [
          { "name": "page", "description": null, "type": { "name": "Int", "path": "scalar/int", "info": "Int" }, "default_value": 1 },
          { "name": "per_page", "description": null, "type": { "name": "Int", "path": "scalar/int", "info": "Int" }, "default_value": 20 }
        ]
      },
      {
        "notices": [],
        "name": "temporary_token",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [
          {
            "name": "valid_for",
            "description": "Number of hours before the token expires",
            "type": { "name": "Int", "path": "scalar/int", "info": "Int" }
          }
        ]
      },
      {
        "notices": [],
        "name": "transactables",
        "description": null,
        "type": { "name": "Transactable", "path": "object/transactable", "info": "[Transactable]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "UserCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "User", "path": "object/user", "info": "[User]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "UserListing",
    "description": null,
    "interfaces": ["ListingCustomAttributeInterface", "ListingsMetadata", "RelationOnDemandInterface", "RemoteModelInterface"],
    "fields": [
      {
        "notices": [],
        "name": "authentications",
        "description": null,
        "type": { "name": "Authentication", "path": "object/authentication", "info": "[Authentication]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "communication",
        "description": null,
        "type": { "name": "ListingsCommunication", "path": "object/listingscommunication", "info": "ListingsCommunication" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "custom_address",
        "description": "Fetch address by name, e.g: address: custom_address(name: \"office_address\")",
        "type": { "name": "ListingAddress", "path": "object/listingaddress", "info": "ListingAddress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_addresses",
        "description": "Fetch all addresses, optionaly you can filter results by name, e.g: home: custom_addresses(name: \"home\")",
        "type": { "name": "ListingAddress", "path": "object/listingaddress", "info": "[ListingAddress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_attachment",
        "description": "Fetch attachment by name, e.g: sales_report: custom_attachment(name: \"sales_report\")",
        "type": { "name": "ListingsPrivateFile", "path": "object/listingsprivatefile", "info": "ListingsPrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_attachments",
        "description": "Fetch all attachments, optionaly you can filter results by name, e.g:\nsales_reports: custom_attachments(name: \"sales_report\")",
        "type": { "name": "ListingsPrivateFile", "path": "object/listingsprivatefile", "info": "[ListingsPrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_image",
        "description": "Fetch image by name, e.g: header: custom_image(name: \"header\")",
        "type": { "name": "ListingImage", "path": "object/listingimage", "info": "ListingImage" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: custom_images(name: \"cat\")",
        "type": { "name": "ListingImage", "path": "object/listingimage", "info": "[ListingImage]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "customizations",
        "description": null,
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "[ListingsCustomization]" },
        "arguments": [
          { "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } },
          {
            "name": "properties",
            "description": null,
            "type": { "name": "QueryCustomAttribute", "path": "input_object/querycustomattribute", "info": "[QueryCustomAttribute]" }
          },
          { "name": "user_id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } }
        ]
      },
      {
        "notices": [],
        "name": "deleted_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "email",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "first_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "language",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "last_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "middle_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "model",
        "description": "Defines belongs-to relation with other model, e.g: parent: model(model_name:\n\"parent\", join_on_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "ListingsCustomization" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "String" }
          }
        ]
      },
      {
        "notices": [],
        "name": "models",
        "description": "Defines has-many relation with other model, e.g: children: models(model_name:\n\"child\", join_on_property: \"parent_id\", foreign_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "[ListingsCustomization]" },
        "arguments": [
          {
            "name": "foreign_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "join_on_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "[String]" }
          }
        ]
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "profile",
        "description": null,
        "type": { "name": "ListingUserProfile", "path": "object/listinguserprofile", "info": "ListingUserProfile" },
        "arguments": [
          { "name": "profile_type", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }
        ]
      },
      {
        "notices": [],
        "name": "profiles",
        "description": null,
        "type": { "name": "ListingUserProfile", "path": "object/listinguserprofile", "info": "[ListingUserProfile]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of all properties assigned to the object.",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Fetch any custom attribute by name, ex: hair_color: property(name: \"hair_color\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_array",
        "description": "Fetch any property of Array type by name, it returns Array in contrast to\n\"property\" which returns String. E.g: todo_list: property_array(name: \"todo_list\")",
        "type": { "name": "String", "path": "scalar/string", "info": "[String]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_json",
        "description": "Fetch any property of JSON type by name, it returns JSON in contrast to\n\"property\" which returns String. E.g: todo_list: property_json(name: \"todo_list\")",
        "type": { "name": "JSONPayload", "path": "scalar/jsonpayload", "info": "JSONPayload" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "remote_model",
        "description": "Defines relation object accessible over HTTP in JSON collection identified by it's ID.",
        "type": { "name": "Customization", "path": "object/customization", "info": "Customization" },
        "arguments": [
          {
            "name": "endpoint",
            "description": "Endpoint that will return resources for given ids in json format",
            "type": { "name": "Endpoint", "path": "input_object/endpoint", "info": "Endpoint!" }
          },
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          }
        ]
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "sort_score",
        "description": "when sorting by distance - field contains distance to target location",
        "is_deprecated": true,
        "deprecation_reason": "not supported everywhere",
        "type": { "name": "Int", "path": "scalar/int", "info": "[Int]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "temporary_token",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [
          {
            "name": "valid_for",
            "description": "Number of hours before the token expires",
            "type": { "name": "Int", "path": "scalar/int", "info": "Int" }
          }
        ]
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user",
        "description": "Defines relation with other user, e.g: invited_by: user(join_on_property: \"invited_by_id\") { id }",
        "type": { "name": "User", "path": "object/user", "info": "User" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": null,
            "type": { "name": "String", "path": "scalar/string", "info": "String" },
            "default_value": "user_id"
          }
        ]
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "UserListingCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "aggregations",
        "description": null,
        "type": { "name": "Aggregations", "path": "object/aggregations", "info": "Aggregations" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "UserListing", "path": "object/userlisting", "info": "[UserListing]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "size",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "UserProfileSchema",
    "description": "Schema for user profile (old name was UserProfileType)",
    "interfaces": ["AdminPropertiesInterface", "AdminSharedAttributesInterface"],
    "fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "fields",
        "description": "Deprecated, use properties instead.",
        "is_deprecated": true,
        "deprecation_reason": "Use properties",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "parameterized_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of properties attributes to be included in the results",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "UserProfileSchemaCollection",
    "description": null,
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "current_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_next_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_previous_page",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "per_page",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "results",
        "description": null,
        "type": { "name": "UserProfileSchema", "path": "object/userprofileschema", "info": "[UserProfileSchema]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_entries",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_pages",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "__Directive",
    "description": "A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "description",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "locations",
        "description": null,
        "type": { "name": "__DirectiveLocation", "path": "enum/__directivelocation", "info": "[__DirectiveLocation!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "args",
        "description": null,
        "type": { "name": "__InputValue", "path": "object/__inputvalue", "info": "[__InputValue!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "onOperation",
        "description": null,
        "is_deprecated": true,
        "deprecation_reason": "Use `locations`.",
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "onFragment",
        "description": null,
        "is_deprecated": true,
        "deprecation_reason": "Use `locations`.",
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "onField",
        "description": null,
        "is_deprecated": true,
        "deprecation_reason": "Use `locations`.",
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "__EnumValue",
    "description": "One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "description",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "isDeprecated",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "deprecationReason",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "__Field",
    "description": "Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "description",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "args",
        "description": null,
        "type": { "name": "__InputValue", "path": "object/__inputvalue", "info": "[__InputValue!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "type",
        "description": null,
        "type": { "name": "__Type", "path": "object/__type", "info": "__Type!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "isDeprecated",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "deprecationReason",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "__InputValue",
    "description": "Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "description",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "type",
        "description": null,
        "type": { "name": "__Type", "path": "object/__type", "info": "__Type!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "defaultValue",
        "description": "A GraphQL-formatted string representing the default value for this input value.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "__Schema",
    "description": "A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "types",
        "description": "A list of all types supported by this server.",
        "type": { "name": "__Type", "path": "object/__type", "info": "[__Type!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "queryType",
        "description": "The type that query operations will be rooted at.",
        "type": { "name": "__Type", "path": "object/__type", "info": "__Type!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "mutationType",
        "description": "If this server supports mutation, the type that mutation operations will be rooted at.",
        "type": { "name": "__Type", "path": "object/__type", "info": "__Type" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "subscriptionType",
        "description": "If this server support subscription, the type that subscription operations will be rooted at.",
        "type": { "name": "__Type", "path": "object/__type", "info": "__Type" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "directives",
        "description": "A list of all directives supported by this server.",
        "type": { "name": "__Directive", "path": "object/__directive", "info": "[__Directive!]!" },
        "arguments": []
      }
    ],
    "connections": []
  },
  {
    "notices": [],
    "name": "__Type",
    "description": "The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",
    "interfaces": [],
    "fields": [
      {
        "notices": [],
        "name": "kind",
        "description": null,
        "type": { "name": "__TypeKind", "path": "enum/__typekind", "info": "__TypeKind!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "description",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "fields",
        "description": null,
        "type": { "name": "__Field", "path": "object/__field", "info": "[__Field!]" },
        "arguments": [
          {
            "name": "includeDeprecated",
            "description": null,
            "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
            "default_value": false
          }
        ]
      },
      {
        "notices": [],
        "name": "interfaces",
        "description": null,
        "type": { "name": "__Type", "path": "object/__type", "info": "[__Type!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "possibleTypes",
        "description": null,
        "type": { "name": "__Type", "path": "object/__type", "info": "[__Type!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "enumValues",
        "description": null,
        "type": { "name": "__EnumValue", "path": "object/__enumvalue", "info": "[__EnumValue!]" },
        "arguments": [
          {
            "name": "includeDeprecated",
            "description": null,
            "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
            "default_value": false
          }
        ]
      },
      {
        "notices": [],
        "name": "inputFields",
        "description": null,
        "type": { "name": "__InputValue", "path": "object/__inputvalue", "info": "[__InputValue!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "ofType",
        "description": null,
        "type": { "name": "__Type", "path": "object/__type", "info": "__Type" },
        "arguments": []
      }
    ],
    "connections": []
  }
]
{% endraw %}
{% endparse_json %}

{% export graphql_objects, namespace: 'api_reference' %}
