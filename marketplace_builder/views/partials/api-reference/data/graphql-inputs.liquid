{% parse_json graphql_inputs %}
{% raw %}
[
  {
    "notices": [],
    "name": "ActiveRecordReference",
    "description": null,
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" }, "arguments": [] },
      { "notices": [], "name": "ids", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" }, "arguments": [] },
      {
        "notices": [],
        "name": "type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "AddressImport",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "address",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "address2",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "apartment",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "city",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "country",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "iso_country_code",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "lat",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "lng",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "name of the defined property",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "postcode",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "service_radius",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "state",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "street",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "street_number",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "suburb",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "AggregationField",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "aggregations",
        "description": null,
        "type": { "name": "AggregationField", "path": "input_object/aggregationfield", "info": "[AggregationField]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customization_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customization_property_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "field_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "profile_property_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "profile_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "size",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "sort",
        "description": "sort buckets; default is by doc-count descending",
        "type": { "name": "AggregationSort", "path": "input_object/aggregationsort", "info": "AggregationSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "type",
        "description": null,
        "type": { "name": "AggregationTypeEnum", "path": "enum/aggregationtypeenum", "info": "AggregationTypeEnum" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "AggregationSort",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "AggregationSortFieldEnum", "path": "enum/aggregationsortfieldenum", "info": "AggregationSortFieldEnum" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "order",
        "description": null,
        "type": { "name": "AggregationSortOrderEnum", "path": "enum/aggregationsortorderenum", "info": "AggregationSortOrderEnum" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "ApiCallNotificationInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "callback",
        "description": "liquid code which can be used to process the response from the endpoint. You have access to \"response\" variable.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "content",
        "description": "liquid code to evaluate to whatever you want to send, for example a JSON.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "delay_by",
        "description": "liquid code which should evaluate to integer. Delays invoking the job by\nspecified number of minutes. Useful to invoke code at certain point in time,\nfor example 1 hour before something etc. To calculate proper number you can\nuse number_of_minutes_until filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configuration_ids",
        "description": "ids of form configurations which should trigger the api call",
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "headers",
        "description": "Request headers",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "name of the api call, which is used in form_configurations or mutation to trigger it",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/notifications/api_call_notifications/my_api_call_notification",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "request_type",
        "description": "Liquid code which should evaluate to valid request type: Get, Post, Put,\nPatch, Delete or if you want to send binary files: Post_Multipart,\nPut_Multipart, Patch_Multipart",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "to",
        "description": "liquid code to evaluate to valid endpoint for the request.",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "trigger_condition",
        "description": "liquid code which should evaluate to true if the api call should be sent",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "ApiCallNotificationsFilterInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "callback",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "content",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "delay",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "headers",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "UniqIdFilter", "path": "input_object/uniqidfilter", "info": "UniqIdFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": "Filter by metadata properties",
        "type": { "name": "JsonbFilter", "path": "input_object/jsonbfilter", "info": "JsonbFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "to",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "trigger_condition",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "ApiCallNotificationsSortInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "JsonbSort", "path": "input_object/jsonbsort", "info": "[JsonbSort!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "AssetsFilterInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "UniqIdFilter", "path": "input_object/uniqidfilter", "info": "UniqIdFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": "Filter by metadata properties",
        "type": { "name": "JsonbFilter", "path": "input_object/jsonbfilter", "info": "JsonbFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "AssetsSortInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "JsonbSort", "path": "input_object/jsonbsort", "info": "[JsonbSort!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "AttachmentsImport",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "id",
        "description": "ID will ignored.",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "name of the defined property",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "url",
        "description": "URL to presigned slot on S3",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "AuthorizationPoliciesFilterInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "content",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "flash_alert",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "UniqIdFilter", "path": "input_object/uniqidfilter", "info": "UniqIdFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": "Filter by metadata properties",
        "type": { "name": "JsonbFilter", "path": "input_object/jsonbfilter", "info": "JsonbFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_to",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "AuthorizationPoliciesSortInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "JsonbSort", "path": "input_object/jsonbsort", "info": "[JsonbSort!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "AuthorizationPolicyInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "content",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "flash_alert",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/authorization_policies/my_policy",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_to",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "BankAccountInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "payment_method_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "public_token",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "CreditCardInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "credit_card_token",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_method_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "CustomAttachmentInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "custom_attribute_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "generate_file",
        "description": null,
        "type": { "name": "ProcessStrategyInputType", "path": "input_object/processstrategyinputtype", "info": "ProcessStrategyInputType" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "owner_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "owner_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "page_slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "raw_remote_file_url",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "uploader_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "CustomAttributeInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "array_append",
        "description": "Adds provided value at the end of an array property. It's secure atomic operation executed in separate transaction",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "array_remove",
        "description": "Removes provided value from an array property. It's secure atomic operation executed in separate transaction",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "decrement",
        "description": "Decrements property value by provided value. It's secure atomic operation executed in separate transaction",
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "increment",
        "description": "Increments property value by provided value. It's secure atomic operation executed in separate transaction",
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "value",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "value_array",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "[String]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "value_json",
        "description": null,
        "type": { "name": "JSONPayload", "path": "scalar/jsonpayload", "info": "JSONPayload" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "CustomImageInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "custom_attribute_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "owner_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "owner_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "page_slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "uploader_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "CustomizationImport",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "addresses",
        "description": null,
        "type": { "name": "AddressImport", "path": "input_object/addressimport", "info": "[AddressImport!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "attachments",
        "description": null,
        "type": { "name": "AttachmentsImport", "path": "input_object/attachmentsimport", "info": "[AttachmentsImport!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "ISO8601DateTime", "path": "scalar/iso8601datetime", "info": "ISO8601DateTime" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizable_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizable_type",
        "description": null,
        "type": { "name": "CustomizableTypeEnum", "path": "enum/customizabletypeenum", "info": "CustomizableTypeEnum" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": "ID will be stored as external_id, relations will be preseved. We generate it when empty.",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "images",
        "description": null,
        "type": { "name": "ImagesImport", "path": "input_object/imagesimport", "info": "[ImagesImport!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "ex. {\"color\": \"red\"}",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "type_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "ISO8601DateTime", "path": "scalar/iso8601datetime", "info": "ISO8601DateTime" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "CustomizationInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "custom_model_type_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "custom_model_type_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizable_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizable_type",
        "description": null,
        "type": { "name": "CustomizableTypeEnum", "path": "enum/customizabletypeenum", "info": "CustomizableTypeEnum" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizations",
        "description": null,
        "type": { "name": "CustomizationsInputType", "path": "input_object/customizationsinputtype", "info": "[CustomizationsInputType]" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" }, "arguments": [] },
      {
        "notices": [],
        "name": "properties",
        "description": null,
        "type": {
          "name": "CustomAttributeInputType",
          "path": "input_object/customattributeinputtype",
          "info": "[CustomAttributeInputType]"
        },
        "arguments": []
      },
      {
        "notices": [],
        "name": "title",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "CustomizationSortOrder",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "field",
        "description": "Sort by given field value",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "order",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Sort by given property value",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "CustomizationsInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "values",
        "description": null,
        "type": { "name": "CustomizationInputType", "path": "input_object/customizationinputtype", "info": "CustomizationInputType" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "CustomizationsSortOrder",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "name",
        "description": "Sort by field name",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "order",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property_name",
        "description": "Sort by property field",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "DateFilter",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "exists",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "gt",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "gte",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "lt",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "lte",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "not_value",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "not_value_in",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "[String!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "value",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "value_in",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "[String!]" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "DateRange",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "gt",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "gte",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "lt",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "lte",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "DefaultProfileInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "properties",
        "description": null,
        "type": {
          "name": "CustomAttributeInputType",
          "path": "input_object/customattributeinputtype",
          "info": "[CustomAttributeInputType]"
        },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "EmailNotificationInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "attachments",
        "description": "json of the form { \"file_name.jpg\": { \"url\": \"http://example.com/file.jpg\" } }\nwhich defines email attachments. Liquid will be processed.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "bcc",
        "description": "liquid code to evaluate to valid, comma separated blind carbon copy list, for example \"john@example.com, jane@example.com\"",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "cc",
        "description": "liquid code to evaluate to valid, comma separated carbon copy list, for example \"john@example.com, jane@example.com\"",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "content",
        "description": "liquid code to evaluate to valid form html. If email is triggered via form\nconfiguration, You have access to \"form\" variable, with data specified in configuration.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "delay_by",
        "description": "liquid code which should evaluate to integer. Delays invoking the job by\nspecified number of minutes. Useful to invoke code at certain point in time,\nfor example 1 hour before something etc. To calculate proper number you can\nuse number_of_minutes_until filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configuration_ids",
        "description": "ids of form configurations which should trigger the email",
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "from",
        "description": "email address from which you would like to send the email, for example notifications@mydomain.com",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "layout_path",
        "description": "name of the liquid layout to which the content should be injected",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "name of the email, which is used in form_configurations or mutation to trigger it",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/notifications/email_notifications/my_email_notification",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "reply_to",
        "description": "email address to which users should reply, for example support@mydomain.com",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "subject",
        "description": "liquid code to evaluate to text",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "to",
        "description": "liquid code to evaluate to valid, comma separated recipient list, for example \"john@example.com, jane@example.com\"",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "trigger_condition",
        "description": "liquid code which should evaluate to true if the email should be sent",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "EmailNotificationsFilterInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "attachments",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "bcc",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "cc",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "content",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "delay",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "UniqIdFilter", "path": "input_object/uniqidfilter", "info": "UniqIdFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "layout_path",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": "Filter by metadata properties",
        "type": { "name": "JsonbFilter", "path": "input_object/jsonbfilter", "info": "JsonbFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "subject",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "to",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "trigger_condition",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "EmailNotificationsSortInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "JsonbSort", "path": "input_object/jsonbsort", "info": "[JsonbSort!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "EncryptedConstantFilterInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "UniqIdFilter", "path": "input_object/uniqidfilter", "info": "UniqIdFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "EncryptedConstantsFilterInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "UniqIdFilter", "path": "input_object/uniqidfilter", "info": "UniqIdFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "EncryptedConstantsSortInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "Endpoint",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "token",
        "description": "authentication token",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "url",
        "description": "endpoint url",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "FormConfigurationInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "async_callback_actions",
        "description": "Same as callback, but invoked asynchronously. Recommended for performance reason.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "async_callback_delay",
        "description": "liquid code which should evaluate to float. Delays invoking the job by\nspecified number of minutes. Useful to invoke code at certain point in time,\nfor example 1 hour before something etc. To calculate proper number you can\nuse number_of_minutes_until filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "async_callback_max_attempts",
        "description": "Defines max number of retrying attempts in case of an error. Usually you do not want to change it.",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "async_callback_priority",
        "description": "defines the invocaction priority, the higher the quicker timeout",
        "type": { "name": "AsyncCallbackPriority", "path": "enum/asynccallbackpriority", "info": "AsyncCallbackPriority" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "authorization_policy_ids",
        "description": "ids of authorization policies which should be checked",
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "callback_actions",
        "description": "liquid code to be invoked after persisting input to DB. If possible, use async callback actions instead",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "configuration",
        "description": "whitelist of attributes which can be persisted in the DB. On server side\n(callbacks, emails etc) you have access to submited values via form variable\n(for exapmple configuration: properties: my_var is accessible via\nform.properties.my_var )",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "default_payload",
        "description": "liquid code which has to evaluate to JSON. This extends/overwrites user\nsubmitted input via form, before validation. Most useful to store in DB\nsensitive data which you do not want user to modify, for example\ncontext.current_user.id",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "flash_alert",
        "description": "liquid code which should evaluate to message which you want to display to user\nupon validation errors. Output is available via context.flash_alert",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "flash_notice",
        "description": "liquid code which should evaluate to message which you want to display to user\nafter successful form submission. Output is available via context.flash_notice",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "liquid_body",
        "description": "liquid code to evaluate to valid form html. You have access to form_builder variable and form tag.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/form_configurations/my_form_configuration",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_to",
        "description": "liquid code which should evaluate to valid path or url to which user should be\nredirected after successful form submission.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "resource",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "resource_owner",
        "description": "defines who can submit the form. If set to anyone, please make sure to provide authorization_policies",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "spam_protection",
        "description": "strategy to protect against spam attacks.",
        "type": { "name": "SpamProtectionInputType", "path": "input_object/spamprotectioninputtype", "info": "SpamProtectionInputType" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "FormConfigurationsFilterInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "async_callback_actions",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "callback_actions",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "default_payload",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "flash_notice",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "UniqIdFilter", "path": "input_object/uniqidfilter", "info": "UniqIdFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "liquid_body",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": "Filter by metadata properties",
        "type": { "name": "JsonbFilter", "path": "input_object/jsonbfilter", "info": "JsonbFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_to",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "resource",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "resource_owner",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "FormConfigurationsSortInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "JsonbSort", "path": "input_object/jsonbsort", "info": "[JsonbSort!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "FullTextQueryField",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "priority",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "profile_field",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "GeoBox",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "bottom",
        "description": null,
        "type": { "name": "LatDegree", "path": "scalar/latdegree", "info": "LatDegree!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "left",
        "description": null,
        "type": { "name": "LngDegree", "path": "scalar/lngdegree", "info": "LngDegree!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "right",
        "description": null,
        "type": { "name": "LngDegree", "path": "scalar/lngdegree", "info": "LngDegree!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "top",
        "description": null,
        "type": { "name": "LatDegree", "path": "scalar/latdegree", "info": "LatDegree!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "GeoBoxTopLeftBottomRight",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "bottom_right",
        "description": null,
        "type": { "name": "GeoPoint", "path": "input_object/geopoint", "info": "GeoPoint" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "top_left",
        "description": null,
        "type": { "name": "GeoPoint", "path": "input_object/geopoint", "info": "GeoPoint" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "GeoBoxTopRightBottomLeft",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "bottom_left",
        "description": null,
        "type": { "name": "GeoPoint", "path": "input_object/geopoint", "info": "GeoPoint" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "top_right",
        "description": null,
        "type": { "name": "GeoPoint", "path": "input_object/geopoint", "info": "GeoPoint" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "GeoPoint",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "lat",
        "description": null,
        "type": { "name": "LatDegree", "path": "scalar/latdegree", "info": "LatDegree!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "lng",
        "description": null,
        "type": { "name": "LngDegree", "path": "scalar/lngdegree", "info": "LngDegree!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "GeoPointInShape",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "point",
        "description": null,
        "type": { "name": "GeoPoint", "path": "input_object/geopoint", "info": "GeoPoint" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "GeoPolygon",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "points",
        "description": "Remember to keep right order, follow GeoJSON spec",
        "type": { "name": "GeoPoint", "path": "input_object/geopoint", "info": "[GeoPoint]" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "GeoPropertyFilterInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "center",
        "description": "GeoJSON Object: of type Point, MultiPoint, LineString, Polygon. example: `{\ntype: \"Point\", coordinates: [-84.3, 39.8] }`. Read documentation for more",
        "type": { "name": "GeometryJSON", "path": "scalar/geometryjson", "info": "GeometryJSON" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "distance_in_km",
        "description": "distance in km",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "GeoQuery",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "box",
        "description": null,
        "type": { "name": "GeoBox", "path": "input_object/geobox", "info": "GeoBox" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "box_top_left_bottom_right",
        "description": null,
        "type": { "name": "GeoBoxTopLeftBottomRight", "path": "input_object/geoboxtopleftbottomright", "info": "GeoBoxTopLeftBottomRight" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "box_top_right_bottom_left",
        "description": null,
        "type": { "name": "GeoBoxTopRightBottomLeft", "path": "input_object/geoboxtoprightbottomleft", "info": "GeoBoxTopRightBottomLeft" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "point_in_shape",
        "description": null,
        "type": { "name": "GeoPointInShape", "path": "input_object/geopointinshape", "info": "GeoPointInShape" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "polygon",
        "description": null,
        "type": { "name": "GeoPolygon", "path": "input_object/geopolygon", "info": "GeoPolygon" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "radius",
        "description": null,
        "type": { "name": "GeoRadius", "path": "input_object/georadius", "info": "GeoRadius" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "GeoRadius",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "center",
        "description": null,
        "type": { "name": "GeoPoint", "path": "input_object/geopoint", "info": "GeoPoint" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "distance",
        "description": "ex. 1km, 100mi, 50yards, 2meters",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "ImagesImport",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "id",
        "description": "ID will ignored.",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "name of the defined property",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "url",
        "description": "URL to presigned slot on S3",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "JoinModelCollection",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "foreign_property",
        "description": null,
        "type": { "name": "PropertyName", "path": "scalar/propertyname", "info": "PropertyName!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "join_on_property",
        "description": null,
        "type": { "name": "PropertyName", "path": "scalar/propertyname", "info": "PropertyName" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "JsonbAttributeFilter",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "key",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "value",
        "description": null,
        "type": { "name": "Any", "path": "scalar/any", "info": "Any!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "JsonbFilter",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "attribute",
        "description": "Filter by attribute key and value. Works for one level attributes",
        "type": { "name": "JsonbAttributeFilter", "path": "input_object/jsonbattributefilter", "info": "JsonbAttributeFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "contains",
        "description": "Filter metadata that contains part of the text",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "exclude",
        "description": "Exclude matched resources from results",
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_key",
        "description": "Filter resources that have certain key in metadata",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "JsonbSort",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "name",
        "description": "name of the first level metadata attribute",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "order",
        "description": null,
        "type": { "name": "SortOrderEnum", "path": "enum/sortorderenum", "info": "SortOrderEnum!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "LiquidLayoutInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "body",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "format",
        "description": null,
        "type": { "name": "PageFormat", "path": "enum/pageformat", "info": "PageFormat" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "path",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/views/layouts/my_layout",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "LiquidLayoutsFilterInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "body",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "UniqIdFilter", "path": "input_object/uniqidfilter", "info": "UniqIdFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": "Filter by metadata properties",
        "type": { "name": "JsonbFilter", "path": "input_object/jsonbfilter", "info": "JsonbFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "path",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "LiquidLayoutsSortInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "JsonbSort", "path": "input_object/jsonbsort", "info": "[JsonbSort!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "path",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "LiquidPartialInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "body",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "format",
        "description": null,
        "type": { "name": "PageFormat", "path": "enum/pageformat", "info": "PageFormat" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "path",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/views/partials/my_partial",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "LiquidPartialsFilterInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "body",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "UniqIdFilter", "path": "input_object/uniqidfilter", "info": "UniqIdFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": "Filter by metadata properties",
        "type": { "name": "JsonbFilter", "path": "input_object/jsonbfilter", "info": "JsonbFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "path",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "LiquidPartialsSortInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "JsonbSort", "path": "input_object/jsonbsort", "info": "[JsonbSort!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "path",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "ListingAggregation",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "fields",
        "description": null,
        "type": { "name": "AggregationField", "path": "input_object/aggregationfield", "info": "[AggregationField]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "filter",
        "description": null,
        "type": { "name": "QueryListing", "path": "input_object/querylisting", "info": "QueryListing" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "global",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "Name of the result",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "ModelSchemaInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "fields",
        "description": "deprecated, use properties",
        "type": { "name": "NestedPropertyInputType", "path": "input_object/nestedpropertyinputtype", "info": "[NestedPropertyInputType]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/custom_model_types/my_model",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": null,
        "type": { "name": "NestedPropertyInputType", "path": "input_object/nestedpropertyinputtype", "info": "[NestedPropertyInputType]" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "ModelSchemasFilterInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "UniqIdFilter", "path": "input_object/uniqidfilter", "info": "UniqIdFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": "Filter by metadata properties",
        "type": { "name": "JsonbFilter", "path": "input_object/jsonbfilter", "info": "JsonbFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "parameterized_name",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "ModelSchemasSortInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "JsonbSort", "path": "input_object/jsonbsort", "info": "[JsonbSort!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "parameterized_name",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "ModelUpdate",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "addresses",
        "description": null,
        "type": { "name": "AddressImport", "path": "input_object/addressimport", "info": "[AddressImport!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "attachments",
        "description": null,
        "type": { "name": "AttachmentsImport", "path": "input_object/attachmentsimport", "info": "[AttachmentsImport!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "ISO8601DateTime", "path": "scalar/iso8601datetime", "info": "ISO8601DateTime" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizable_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizable_type",
        "description": null,
        "type": { "name": "CustomizableTypeEnum", "path": "enum/customizabletypeenum", "info": "CustomizableTypeEnum" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": "ID must match existing object id",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "images",
        "description": null,
        "type": { "name": "ImagesImport", "path": "input_object/imagesimport", "info": "[ImagesImport!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "ex. {\"color\": \"red\"}",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "type_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "ISO8601DateTime", "path": "scalar/iso8601datetime", "info": "ISO8601DateTime" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "ModelsFilterInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "deleted_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "UniqIdFilter", "path": "input_object/uniqidfilter", "info": "UniqIdFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "models",
        "description": null,
        "type": {
          "name": "RelatedModelsFilterInput",
          "path": "input_object/relatedmodelsfilterinput",
          "info": "[RelatedModelsFilterInput!]"
        },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": null,
        "type": { "name": "PropertyFilterInput", "path": "input_object/propertyfilterinput", "info": "[PropertyFilterInput!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "ModelsSortInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "deleted_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": null,
        "type": { "name": "PropertySort", "path": "input_object/propertysort", "info": "[PropertySort!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "NestedCustomizationFilters",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "DateRange", "path": "input_object/daterange", "info": "DateRange" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" }, "arguments": [] },
      { "notices": [], "name": "ids", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" }, "arguments": [] },
      {
        "notices": [],
        "name": "ignore_deleted",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "is_deleted",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "Name of the custom model type",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": null,
        "type": { "name": "QueryCustomAttribute", "path": "input_object/querycustomattribute", "info": "[QueryCustomAttribute]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user_ids",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "NestedPropertyInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "_destroy",
        "description": "1 if property is meant to be removed, 0 otherwise",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "attribute_type",
        "description": "Type of the property",
        "type": { "name": "PropertyTypeEnum", "path": "enum/propertytypeenum", "info": "PropertyTypeEnum" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "default_value",
        "description": "Default value for new objects",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": "id of the property to update",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "Name of the property",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "NewCustomImageInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "custom_attribute_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "owner_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "owner_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "page_slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "raw_remote_image_url",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "uploader_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "NotificationTemplateInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "name",
        "description": "Name of the template",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "PageFilterInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "content",
        "description": "Search for text in rendered page content. Page must be marked as searchable",
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "format",
        "description": "Filter by format, ex. format: { value: HTML }",
        "type": { "name": "PageFormatFilter", "path": "input_object/pageformatfilter", "info": "PageFormatFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "UniqIdFilter", "path": "input_object/uniqidfilter", "info": "UniqIdFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "layout_name",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": "Filter by metadata properties",
        "type": { "name": "JsonbFilter", "path": "input_object/jsonbfilter", "info": "JsonbFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "slug",
        "description": "Filter by slug. Enter slug without leading /, ex. slug: { exact: \"client/orders\" }",
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "PageFormatFilter",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "not_value",
        "description": null,
        "type": { "name": "PageFormat", "path": "enum/pageformat", "info": "PageFormat" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "not_value_in",
        "description": null,
        "type": { "name": "PageFormat", "path": "enum/pageformat", "info": "[PageFormat!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "value",
        "description": null,
        "type": { "name": "PageFormat", "path": "enum/pageformat", "info": "PageFormat" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "value_in",
        "description": null,
        "type": { "name": "PageFormat", "path": "enum/pageformat", "info": "[PageFormat!]" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "PageInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "authorization_policy_ids",
        "description": "ids of authorization policies which should be checked",
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "content",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "dynamic_cache_expire",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "dynamic_cache_key",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "dynamic_cache_layout",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "format",
        "description": null,
        "type": { "name": "PageFormat", "path": "enum/pageformat", "info": "PageFormat" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "handler",
        "description": null,
        "type": { "name": "PageHandler", "path": "enum/pagehandler", "info": "PageHandler" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "layout_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "max_deep_level",
        "description": "max nesting of the url to be resolved by this slug. For example slug \"abc\"\nwith max_deep_level 2 will resolve /abc, abc/1, abc/2, but will NOT resolve\nabc/2/something.",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/views/pages/my-page",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_code",
        "description": null,
        "type": { "name": "PageRedifectCode", "path": "enum/pageredifectcode", "info": "PageRedifectCode" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_to",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "request_method",
        "description": null,
        "type": { "name": "PageRequestMethod", "path": "enum/pagerequestmethod", "info": "PageRequestMethod" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "response_headers",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "searchable",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "static_cache_expire",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "PagesSortInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "JsonbSort", "path": "input_object/jsonbsort", "info": "[JsonbSort!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "PaymentAmountInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "currency",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "service_fee_payer",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "service_fee_receiver",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "subtotal_amount",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_amount",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "PaymentInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "amount",
        "description": null,
        "type": { "name": "PaymentAmountInputType", "path": "input_object/paymentamountinputtype", "info": "PaymentAmountInputType!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "bank_account_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "credit_card_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "credit_card_token",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "direct_charge",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "paid_at",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payable_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payable_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payer_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_method_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "receiver_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "PaymentTransferAmountInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "currency",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "transfer_amount",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "PaymentTransferFilters",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "DateRange", "path": "input_object/daterange", "info": "DateRange" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" }, "arguments": [] },
      {
        "notices": [],
        "name": "payment_gateway_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "receiver_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "transferred_at",
        "description": null,
        "type": { "name": "DateRange", "path": "input_object/daterange", "info": "DateRange" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "PaymentTransferInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "amount",
        "description": null,
        "type": {
          "name": "PaymentTransferAmountInputType",
          "path": "input_object/paymenttransferamountinputtype",
          "info": "PaymentTransferAmountInputType"
        },
        "arguments": []
      },
      {
        "notices": [],
        "name": "failed_at",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_ids",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "transferred_at",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "PaymentTransferSort",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "field",
        "description": "Sort by given field value",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "order",
        "description": null,
        "type": { "name": "OrderDirection", "path": "enum/orderdirection", "info": "OrderDirection" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "ProcessPageInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "params",
        "description": "Parameters you would like to pass to the page to render it dynamically. They will beavailable via context.params. ",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "slug",
        "description": "Slug of the page which you would like to use as a template",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "ProcessStrategyInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "body",
        "description": "Expected content depends on strategy, however usually it is html. Alternativey you can process page via page argument.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "file_name",
        "description": "Name of the output file",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "page",
        "description": "Provided page will be rendered and its output will be used as a body.\nAlternatively you can pass body directly via body argument",
        "type": { "name": "ProcessPageInputType", "path": "input_object/processpageinputtype", "info": "ProcessPageInputType" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "strategy",
        "description": null,
        "type": { "name": "ProcessStrategy", "path": "enum/processstrategy", "info": "ProcessStrategy!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "synchronous",
        "description": "if you set to true, the mutation will wait until the pdf is actually generated\nso you can for example attach it to an email",
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "ProfileFilterInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "name",
        "description": "Name of the user profile type",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": null,
        "type": { "name": "PropertyFilterInput", "path": "input_object/propertyfilterinput", "info": "[PropertyFilterInput!]" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "PropertyFilterInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "distance_sphere",
        "description": "select items for which a distance between its point from <:property> and <:center> point is less than <:distance>.",
        "type": { "name": "GeoPropertyFilterInput", "path": "input_object/geopropertyfilterinput", "info": "GeoPropertyFilterInput" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "exists",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "range",
        "description": null,
        "type": { "name": "RangeFilter", "path": "input_object/rangefilter", "info": "RangeFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "value",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "value_in",
        "description": "Property should match one of the provided arguments",
        "type": { "name": "String", "path": "scalar/string", "info": "[String!]" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "PropertySort",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "order",
        "description": null,
        "type": { "name": "SortOrderEnum", "path": "enum/sortorderenum", "info": "SortOrderEnum!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "Query",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "fields",
        "description": null,
        "type": { "name": "FullTextQueryField", "path": "input_object/fulltextqueryfield", "info": "[FullTextQueryField]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "keyword",
        "description": "Accept wildcards, ? for single character, * for more",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "match_type",
        "description": null,
        "type": { "name": "QueryMatchTypeEnum", "path": "enum/querymatchtypeenum", "info": "QueryMatchTypeEnum" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "operator",
        "description": null,
        "type": { "name": "OperatorEnum", "path": "enum/operatorenum", "info": "OperatorEnum" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "QueryCustomAttribute",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "exclude",
        "description": "Set it when you want to exclude value/values/range from results",
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "exists",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "range",
        "description": null,
        "type": { "name": "Range", "path": "input_object/range", "info": "Range" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "value",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "values",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "[String]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "values_operator",
        "description": null,
        "type": { "name": "OperatorEnum", "path": "enum/operatorenum", "info": "OperatorEnum" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "QueryCustomModelType",
    "description": null,
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "Int", "path": "scalar/int", "info": "Int" }, "arguments": [] },
      {
        "notices": [],
        "name": "ids",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "[Int]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "names",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "[String]" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "QueryCustomization",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "addresses",
        "description": null,
        "type": { "name": "QueryListingLocation", "path": "input_object/querylistinglocation", "info": "[QueryListingLocation]" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" }, "arguments": [] },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "parameterized_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "Need to narrow profiles by profile_type",
        "type": { "name": "QueryCustomAttribute", "path": "input_object/querycustomattribute", "info": "[QueryCustomAttribute]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "QueryListing",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "addresses",
        "description": null,
        "type": { "name": "QueryListingLocation", "path": "input_object/querylistinglocation", "info": "[QueryListingLocation]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "DateRange", "path": "input_object/daterange", "info": "DateRange" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "creator",
        "description": null,
        "type": { "name": "QueryUser", "path": "input_object/queryuser", "info": "QueryUser" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "creator_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "creator_ids",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "custom_attributes",
        "description": null,
        "type": { "name": "QueryCustomAttribute", "path": "input_object/querycustomattribute", "info": "[QueryCustomAttribute]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizations",
        "description": null,
        "type": { "name": "QueryCustomization", "path": "input_object/querycustomization", "info": "[QueryCustomization]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_ids",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "has_creator",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" }, "arguments": [] },
      { "notices": [], "name": "ids", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" }, "arguments": [] },
      {
        "notices": [],
        "name": "is_deleted",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": null,
        "type": { "name": "QueryCustomAttribute", "path": "input_object/querycustomattribute", "info": "[QueryCustomAttribute]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "transactable_type",
        "description": null,
        "type": { "name": "QueryTransactableType", "path": "input_object/querytransactabletype", "info": "QueryTransactableType" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "without_ids",
        "description": "do not use this please",
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "QueryListingLocation",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "cities",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "[String]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "city",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "country",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "exists",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "geo_query",
        "description": "Geo search",
        "type": { "name": "GeoQuery", "path": "input_object/geoquery", "info": "GeoQuery" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "postcode",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "state",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "street",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "suburb",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "QueryTransactableType",
    "description": null,
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "Int", "path": "scalar/int", "info": "Int" }, "arguments": [] },
      {
        "notices": [],
        "name": "ids",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "[Int]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "names",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "[String]" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "QueryUser",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "DateRange", "path": "input_object/daterange", "info": "DateRange" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizations",
        "description": null,
        "type": { "name": "QueryCustomization", "path": "input_object/querycustomization", "info": "[QueryCustomization]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "email",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "emails",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "[String]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "externals_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "first_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" }, "arguments": [] },
      { "notices": [], "name": "ids", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" }, "arguments": [] },
      {
        "notices": [],
        "name": "is_deleted",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "last_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "middle_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "profiles",
        "description": null,
        "type": { "name": "QueryUserProfile", "path": "input_object/queryuserprofile", "info": "[QueryUserProfile]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "without_ids",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "QueryUserProfile",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "addresses",
        "description": null,
        "type": { "name": "QueryListingLocation", "path": "input_object/querylistinglocation", "info": "[QueryListingLocation]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "custom_attributes",
        "description": null,
        "type": { "name": "QueryCustomAttribute", "path": "input_object/querycustomattribute", "info": "[QueryCustomAttribute]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizations",
        "description": null,
        "type": { "name": "QueryCustomization", "path": "input_object/querycustomization", "info": "[QueryCustomization]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "geo_query",
        "description": "Geo search based on searchable custom_addresses",
        "type": { "name": "GeoQuery", "path": "input_object/geoquery", "info": "GeoQuery" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "is_deleted",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "Name of the user profile type",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "profile_type",
        "description": "Alias for name argument",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "Need to narrow profiles by profile_type",
        "type": { "name": "QueryCustomAttribute", "path": "input_object/querycustomattribute", "info": "[QueryCustomAttribute]" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "Range",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "gt",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "gte",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "lt",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "lte",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "RangeFilter",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "gt",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "gte",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "lt",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "lte",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "RefundPaymentInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "amount_cents",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "RelatedModelsFilterInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "filter",
        "description": null,
        "type": { "name": "ModelsFilterInput", "path": "input_object/modelsfilterinput", "info": "ModelsFilterInput" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "join",
        "description": null,
        "type": { "name": "JoinModelCollection", "path": "input_object/joinmodelcollection", "info": "JoinModelCollection" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "RelationshipInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "creator_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": null,
        "type": {
          "name": "CustomAttributeInputType",
          "path": "input_object/customattributeinputtype",
          "info": "[CustomAttributeInputType]"
        },
        "arguments": []
      },
      {
        "notices": [],
        "name": "relationship_type_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "RelationshipUserInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "properties",
        "description": null,
        "type": {
          "name": "CustomAttributeInputType",
          "path": "input_object/customattributeinputtype",
          "info": "[CustomAttributeInputType]"
        },
        "arguments": []
      },
      {
        "notices": [],
        "name": "relationship_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "relationship_user_type_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "RelationshipUsersSort",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "field",
        "description": "Sort by given field value",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "order",
        "description": null,
        "type": { "name": "OrderDirection", "path": "enum/orderdirection", "info": "OrderDirection" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Sort by given property value",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "RelationshipsSort",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "field",
        "description": "Sort by given field value",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "order",
        "description": null,
        "type": { "name": "OrderDirection", "path": "enum/orderdirection", "info": "OrderDirection" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Sort by given property value",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "SmsNotificationInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "content",
        "description": "liquid code to evaluate to valid form html. If sms is triggered via form\nconfiguration, You have access to \"form\" variable, with data specified in configuration.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "delay_by",
        "description": "liquid code which should evaluate to integer. Delays invoking the job by\nspecified number of minutes. Useful to invoke code at certain point in time,\nfor example 1 hour before something etc. To calculate proper number you can\nuse number_of_minutes_until filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configuration_ids",
        "description": "ids of form configurations which should trigger the sms",
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "name of the sms, which is used in form_configurations or mutation to trigger it",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/notifications/sms_notifications/my_sms_notification",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "to",
        "description": "liquid code to evaluate to valid mobile number with country code, for example\n+1 541 754 3010.     Useful filter to build valid mobile number is\n\"$to_mobile_number\".",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "trigger_condition",
        "description": "liquid code which should evaluate to true if the sms should be sent",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "SmsNotificationsFilterInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "callback",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "content",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "delay",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "UniqIdFilter", "path": "input_object/uniqidfilter", "info": "UniqIdFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": "Filter by metadata properties",
        "type": { "name": "JsonbFilter", "path": "input_object/jsonbfilter", "info": "JsonbFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "to",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "trigger_condition",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "SmsNotificationsSortInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "JsonbSort", "path": "input_object/jsonbsort", "info": "[JsonbSort!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "SortByChildField",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "child_type",
        "description": "Child type, for ex. transactable",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "field_name",
        "description": "Sort by this field, example: \"id\".",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "SortByDistance",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "field_name",
        "description": "Sort by this field, example: \"geo_location\"",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "reference_point",
        "description": "Reference point, usually current location",
        "type": { "name": "GeoPoint", "path": "input_object/geopoint", "info": "GeoPoint!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "unit",
        "description": null,
        "type": { "name": "DistanceUnit", "path": "enum/distanceunit", "info": "DistanceUnit" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "SortByFieldOrder",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "field_name",
        "description": "Sort by this field, example: \"id\".",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "values",
        "description": "Sort by provided values, example: [109, 903].\nFull example: If { field_name: \"id\", values: [109, 903] }, Object#109 will be\n1st, Object#903 will be 2nd, and then the rest.",
        "type": { "name": "String", "path": "scalar/string", "info": "[String]!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "SortOrder",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "child_field",
        "description": null,
        "type": { "name": "SortByChildField", "path": "input_object/sortbychildfield", "info": "SortByChildField" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "distance",
        "description": "Sort by distance to geo point",
        "type": { "name": "SortByDistance", "path": "input_object/sortbydistance", "info": "SortByDistance" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "field",
        "description": "Sort by given field by provided values",
        "type": { "name": "SortByFieldOrder", "path": "input_object/sortbyfieldorder", "info": "SortByFieldOrder" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "Sort by field",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "order",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "profile_distance",
        "description": "Sort by distance to geo point based on custom_addresses",
        "type": { "name": "SortByDistance", "path": "input_object/sortbydistance", "info": "SortByDistance" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "profile_field",
        "description": "To sort by profile property use `properties.` prefix, ex. `profile_field: \"properties.color\"`",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "profile_property",
        "description": "Sort by profile property`",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "profile_type",
        "description": "Name of the user profile type",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property_name",
        "description": "Sort by property field",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "SpamProtectionInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "recaptcha_v2",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "recaptcha_v3",
        "description": null,
        "type": {
          "name": "SpamProtectionRecaptchaV3InputType",
          "path": "input_object/spamprotectionrecaptchav3inputtype",
          "info": "SpamProtectionRecaptchaV3InputType"
        },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "SpamProtectionRecaptchaV3InputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "action",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "minimum_score",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "StandalonePropertyInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "attribute_type",
        "description": "Type of the property",
        "type": { "name": "PropertyTypeEnum", "path": "enum/propertytypeenum", "info": "PropertyTypeEnum" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "default_value",
        "description": "Default value for new objects",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "Name of the property",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "target_id",
        "description": "Id of the schema to which this property definition belongs",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "target_type",
        "description": "Type of the schema to which this property definition belongs",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "StandardSort",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "order",
        "description": null,
        "type": { "name": "SortOrderEnum", "path": "enum/sortorderenum", "info": "SortOrderEnum!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "order_by_values",
        "description": "Order by specific values",
        "type": { "name": "String", "path": "scalar/string", "info": "[String!]" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "StringFilter",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "contains",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "ends_with",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "exact",
        "description": "deprecated, use \"value\" instead",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "not_contains",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "not_ends_with",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "not_starts_with",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "not_value",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "not_value_in",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "[String!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "starts_with",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "value",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "value_in",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "[String!]" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "TransactableImport",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "addresses",
        "description": null,
        "type": { "name": "AddressImport", "path": "input_object/addressimport", "info": "[AddressImport!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "attachments",
        "description": null,
        "type": { "name": "AttachmentsImport", "path": "input_object/attachmentsimport", "info": "[AttachmentsImport!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "ISO8601DateTime", "path": "scalar/iso8601datetime", "info": "ISO8601DateTime" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "creator_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": "ID will be changed after import, relations will be preseved",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "images",
        "description": null,
        "type": { "name": "ImagesImport", "path": "input_object/imagesimport", "info": "[ImagesImport!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "ex. {\"color\": \"red\"}",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "type_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "ISO8601DateTime", "path": "scalar/iso8601datetime", "info": "ISO8601DateTime" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "TransactableInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "creator_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "currency",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "description",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": null,
        "type": {
          "name": "CustomAttributeInputType",
          "path": "input_object/customattributeinputtype",
          "info": "[CustomAttributeInputType]"
        },
        "arguments": []
      },
      {
        "notices": [],
        "name": "quantity",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "state_event",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "transactable_type_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "TransactableSchemaInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "fields",
        "description": "deprecated, use properties",
        "type": { "name": "NestedPropertyInputType", "path": "input_object/nestedpropertyinputtype", "info": "[NestedPropertyInputType]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/transactable_types/my_transactable",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": null,
        "type": { "name": "NestedPropertyInputType", "path": "input_object/nestedpropertyinputtype", "info": "[NestedPropertyInputType]" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "TransactableSchemasFilterInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "UniqIdFilter", "path": "input_object/uniqidfilter", "info": "UniqIdFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "parameterized_name",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "TransactableSchemasSortInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "parameterized_name",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UniqIdFilter",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "not_value_in",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID!]" },
        "arguments": []
      },
      { "notices": [], "name": "value", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" }, "arguments": [] },
      {
        "notices": [],
        "name": "value_in",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID!]" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UpdateApiCallNotificationInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "callback",
        "description": "liquid code which can be used to process the response from the endpoint. You have access to \"response\" variable.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "content",
        "description": "liquid code to evaluate to whatever you want to send, for example a JSON.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "delay_by",
        "description": "liquid code which should evaluate to integer. Delays invoking the job by\nspecified number of minutes. Useful to invoke code at certain point in time,\nfor example 1 hour before something etc. To calculate proper number you can\nuse number_of_minutes_until filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configuration_ids",
        "description": "ids of form configurations which should trigger the api call",
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "headers",
        "description": "Request headers",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "name of the api call, which is used in form_configurations or mutation to trigger it",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/notifications/api_call_notifications/my_api_call_notification",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "request_type",
        "description": "Liquid code which should evaluate to valid request type: Get, Post, Put,\nPatch, Delete or if you want to send binary files: Post_Multipart,\nPut_Multipart, Patch_Multipart",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "to",
        "description": "liquid code to evaluate to valid endpoint for the request.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "trigger_condition",
        "description": "liquid code which should evaluate to true if the api call should be sent",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UpdateAuthorizationPolicyInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "content",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "flash_alert",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/authorization_policies/my_policy",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_to",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UpdateCustomAttachmentInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "custom_attribute_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "owner_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "owner_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "page_slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "uploader_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UpdateEmailNotificationInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "attachments",
        "description": "json of the form { \"file_name.jpg\": { \"url\": \"http://example.com/file.jpg\" } }\nwhich defines email attachments. Liquid will be processed.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "bcc",
        "description": "liquid code to evaluate to valid, comma separated blind carbon copy list, for example \"john@example.com, jane@example.com\"",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "cc",
        "description": "liquid code to evaluate to valid, comma separated carbon copy list, for example \"john@example.com, jane@example.com\"",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "content",
        "description": "liquid code to evaluate to valid form html. If email is triggered via form\nconfiguration, You have access to \"form\" variable, with data specified in configuration.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "delay_by",
        "description": "liquid code which should evaluate to integer. Delays invoking the job by\nspecified number of minutes. Useful to invoke code at certain point in time,\nfor example 1 hour before something etc. To calculate proper number you can\nuse number_of_minutes_until filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configuration_ids",
        "description": "ids of form configurations which should trigger the email",
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "from",
        "description": "email address from which you would like to send the email, for example notifications@mydomain.com",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "layout_path",
        "description": "name of the liquid layout to which the content should be injected",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "name of the email, which is used in form_configurations or mutation to trigger it",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/notifications/email_notifications/my_email_notification",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "reply_to",
        "description": "email address to which users should reply, for example support@mydomain.com",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "subject",
        "description": "liquid code to evaluate to text",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "to",
        "description": "liquid code to evaluate to valid, comma separated recipient list, for example \"john@example.com, jane@example.com\"",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "trigger_condition",
        "description": "liquid code which should evaluate to true if the email should be sent",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UpdateFormConfigurationInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "async_callback_actions",
        "description": "Same as callback, but invoked asynchronously. Recommended for performance reason.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "async_callback_delay",
        "description": "liquid code which should evaluate to float. Delays invoking the job by\nspecified number of minutes. Useful to invoke code at certain point in time,\nfor example 1 hour before something etc. To calculate proper number you can\nuse number_of_minutes_until filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "async_callback_max_attempts",
        "description": "Defines max number of retrying attempts in case of an error. Usually you do not want to change it.",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "async_callback_priority",
        "description": "defines the invocaction priority, the higher the quicker timeout",
        "type": { "name": "AsyncCallbackPriority", "path": "enum/asynccallbackpriority", "info": "AsyncCallbackPriority" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "authorization_policy_ids",
        "description": "ids of authorization policies which should be checked",
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "callback_actions",
        "description": "liquid code to be invoked after persisting input to DB. If possible, use async callback actions instead",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "configuration",
        "description": "whitelist of attributes which can be persisted in the DB. On server side\n(callbacks, emails etc) you have access to submited values via form variable\n(for exapmple configuration: properties: my_var is accessible via\nform.properties.my_var )",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "default_payload",
        "description": "liquid code which has to evaluate to JSON. This extends/overwrites user\nsubmitted input via form, before validation. Most useful to store in DB\nsensitive data which you do not want user to modify, for example\ncontext.current_user.id",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "flash_alert",
        "description": "liquid code which should evaluate to message which you want to display to user\nupon validation errors. Output is available via context.flash_alert",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "flash_notice",
        "description": "liquid code which should evaluate to message which you want to display to user\nafter successful form submission. Output is available via context.flash_notice",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "liquid_body",
        "description": "liquid code to evaluate to valid form html. You have access to form_builder variable and form tag.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/form_configurations/my_form_configuration",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_to",
        "description": "liquid code which should evaluate to valid path or url to which user should be\nredirected after successful form submission.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "resource",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "resource_owner",
        "description": "defines who can submit the form. If set to anyone, please make sure to provide authorization_policies",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "spam_protection",
        "description": "strategy to protect against spam attacks.",
        "type": { "name": "SpamProtectionInputType", "path": "input_object/spamprotectioninputtype", "info": "SpamProtectionInputType" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UpdateLiquidLayoutInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "body",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "format",
        "description": null,
        "type": { "name": "PageFormat", "path": "enum/pageformat", "info": "PageFormat" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "path",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/views/layouts/my_layout",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UpdateLiquidPartialInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "body",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "format",
        "description": null,
        "type": { "name": "PageFormat", "path": "enum/pageformat", "info": "PageFormat" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "path",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/views/partials/my_partial",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UpdateModelSchemaInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "fields",
        "description": "deprecated, use properties",
        "type": { "name": "NestedPropertyInputType", "path": "input_object/nestedpropertyinputtype", "info": "[NestedPropertyInputType]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/custom_model_types/my_model",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": null,
        "type": { "name": "NestedPropertyInputType", "path": "input_object/nestedpropertyinputtype", "info": "[NestedPropertyInputType]" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UpdatePageInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "authorization_policy_ids",
        "description": "ids of authorization policies which should be checked",
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "content",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "dynamic_cache_expire",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "dynamic_cache_key",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "dynamic_cache_layout",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "format",
        "description": null,
        "type": { "name": "PageFormat", "path": "enum/pageformat", "info": "PageFormat" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "handler",
        "description": null,
        "type": { "name": "PageHandler", "path": "enum/pagehandler", "info": "PageHandler" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "layout_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "max_deep_level",
        "description": "max nesting of the url to be resolved by this slug. For example slug \"abc\"\nwith max_deep_level 2 will resolve /abc, abc/1, abc/2, but will NOT resolve\nabc/2/something.",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/views/pages/my-page",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_code",
        "description": null,
        "type": { "name": "PageRedifectCode", "path": "enum/pageredifectcode", "info": "PageRedifectCode" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_to",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "request_method",
        "description": null,
        "type": { "name": "PageRequestMethod", "path": "enum/pagerequestmethod", "info": "PageRequestMethod" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "response_headers",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "searchable",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "static_cache_expire",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UpdatePaymentInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "amount",
        "description": null,
        "type": { "name": "PaymentAmountInputType", "path": "input_object/paymentamountinputtype", "info": "PaymentAmountInputType" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "bank_account_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "credit_card_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "credit_card_token",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "direct_charge",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "paid_at",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payable_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payable_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payer_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_method_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "receiver_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UpdateSmsNotificationInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "content",
        "description": "liquid code to evaluate to valid form html. If sms is triggered via form\nconfiguration, You have access to \"form\" variable, with data specified in configuration.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "delay_by",
        "description": "liquid code which should evaluate to integer. Delays invoking the job by\nspecified number of minutes. Useful to invoke code at certain point in time,\nfor example 1 hour before something etc. To calculate proper number you can\nuse number_of_minutes_until filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configuration_ids",
        "description": "ids of form configurations which should trigger the sms",
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "name of the sms, which is used in form_configurations or mutation to trigger it",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/notifications/sms_notifications/my_sms_notification",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "to",
        "description": "liquid code to evaluate to valid mobile number with country code, for example\n+1 541 754 3010.     Useful filter to build valid mobile number is\n\"$to_mobile_number\".",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "trigger_condition",
        "description": "liquid code which should evaluate to true if the sms should be sent",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UpdateStandalonePropertyInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "attribute_type",
        "description": "Type of the property",
        "type": { "name": "PropertyTypeEnum", "path": "enum/propertytypeenum", "info": "PropertyTypeEnum" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "default_value",
        "description": "Default value for new objects",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "Name of the property",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "target_id",
        "description": "Id of the schema to which this property definition belongs",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "target_type",
        "description": "Type of the schema to which this property definition belongs",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UpdateTransactableSchemaInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "fields",
        "description": "deprecated, use properties",
        "type": { "name": "NestedPropertyInputType", "path": "input_object/nestedpropertyinputtype", "info": "[NestedPropertyInputType]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/transactable_types/my_transactable",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": null,
        "type": { "name": "NestedPropertyInputType", "path": "input_object/nestedpropertyinputtype", "info": "[NestedPropertyInputType]" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UpdateUserProfileSchemaInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "fields",
        "description": "deprecated, use properties",
        "type": { "name": "NestedPropertyInputType", "path": "input_object/nestedpropertyinputtype", "info": "[NestedPropertyInputType]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/user_profile_types/my_user_profile",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": null,
        "type": { "name": "NestedPropertyInputType", "path": "input_object/nestedpropertyinputtype", "info": "[NestedPropertyInputType]" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UserImport",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "email",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "first_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": "ID will be stored as external_id, relations will be preseved. We generate it when empty.",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "last_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "middle_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "password",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "profiles",
        "description": null,
        "type": { "name": "UserProfileImportType", "path": "input_object/userprofileimporttype", "info": "[UserProfileImportType!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UserInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "deleted_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "email",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "first_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "last_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "password",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "profiles",
        "description": null,
        "type": { "name": "UserProfileInputType", "path": "input_object/userprofileinputtype", "info": "[UserProfileInputType]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": null,
        "type": {
          "name": "CustomAttributeInputType",
          "path": "input_object/customattributeinputtype",
          "info": "[CustomAttributeInputType]"
        },
        "arguments": []
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UserProfileImportType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "addresses",
        "description": null,
        "type": { "name": "AddressImport", "path": "input_object/addressimport", "info": "[AddressImport!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "attachments",
        "description": null,
        "type": { "name": "AttachmentsImport", "path": "input_object/attachmentsimport", "info": "[AttachmentsImport!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": "ID will be stored as external_id, relations will be preseved. We generate it when empty.",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "images",
        "description": null,
        "type": { "name": "ImagesImport", "path": "input_object/imagesimport", "info": "[ImagesImport!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "ex. {\"color\": \"red\"}",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "type_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UserProfileInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "values",
        "description": null,
        "type": { "name": "DefaultProfileInputType", "path": "input_object/defaultprofileinputtype", "info": "DefaultProfileInputType" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UserProfileSchemaInputType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "fields",
        "description": "deprecated, use properties",
        "type": { "name": "NestedPropertyInputType", "path": "input_object/nestedpropertyinputtype", "info": "[NestedPropertyInputType]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/user_profile_types/my_user_profile",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": null,
        "type": { "name": "NestedPropertyInputType", "path": "input_object/nestedpropertyinputtype", "info": "[NestedPropertyInputType]" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UserProfileSchemasFilterInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "UniqIdFilter", "path": "input_object/uniqidfilter", "info": "UniqIdFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": "Filter by metadata properties",
        "type": { "name": "JsonbFilter", "path": "input_object/jsonbfilter", "info": "JsonbFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "parameterized_name",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UserProfileSchemasSortInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "JsonbSort", "path": "input_object/jsonbsort", "info": "[JsonbSort!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "parameterized_name",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UserProfileUpdateType",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "addresses",
        "description": null,
        "type": { "name": "AddressImport", "path": "input_object/addressimport", "info": "[AddressImport!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "attachments",
        "description": null,
        "type": { "name": "AttachmentsImport", "path": "input_object/attachmentsimport", "info": "[AttachmentsImport!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": "ID must match existing object id",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "images",
        "description": null,
        "type": { "name": "ImagesImport", "path": "input_object/imagesimport", "info": "[ImagesImport!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "ex. {\"color\": \"red\"}",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "type_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UserUpdate",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "email",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "first_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": "ID must match existing object id",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "last_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "middle_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "profiles",
        "description": null,
        "type": { "name": "UserProfileUpdateType", "path": "input_object/userprofileupdatetype", "info": "[UserProfileUpdateType!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UsersFilterInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "deleted_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "email",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "UniqIdFilter", "path": "input_object/uniqidfilter", "info": "UniqIdFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "UniqIdFilter", "path": "input_object/uniqidfilter", "info": "UniqIdFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "profiles",
        "description": null,
        "type": { "name": "ProfileFilterInput", "path": "input_object/profilefilterinput", "info": "[ProfileFilterInput!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": null,
        "type": { "name": "PropertyFilterInput", "path": "input_object/propertyfilterinput", "info": "[PropertyFilterInput!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "StringFilter", "path": "input_object/stringfilter", "info": "StringFilter" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "DateFilter", "path": "input_object/datefilter", "info": "DateFilter" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "UsersSortInput",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "deleted_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "email",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "profile_properties",
        "description": null,
        "type": { "name": "PropertySort", "path": "input_object/propertysort", "info": "[PropertySort!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "StandardSort", "path": "input_object/standardsort", "info": "StandardSort" },
        "arguments": []
      }
    ]
  }
]
{% endraw %}
{% endparse_json %}

{% export graphql_inputs, namespace: 'api_reference' %}
