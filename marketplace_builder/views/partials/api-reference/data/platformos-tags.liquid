{% parse_json platformos_tags %}
{% raw %}
{
  "tags": [
    {
      "name": "background",
      "description": "Invokes code within the tag asynchronously, in the background.\nYou will only have access to variables you explicitly pass to the background tag. The context object is available by default, but with limitations - you need\nto explicitly pass page/layout metadata if you want to use it, as well as device and constants.",
      "params": [
        {
          "name": "options",
          "types": ["Hash"],
          "description": "Any variable provided to the background tag will become accessible in the code. There is one special key, \"delay\" [Integer], which defines\nthe number of minutes to delay running code (defaults to 0, which means run code as soon as possible)"
        }
      ],
      "examples": [
        "The following code will run all the log queries in the background, not earlier than 5 minutes since the execution. You will only have access to variables\nexplicitly provided to the background tag: \"data\" and \"hey\". Note that you will not have access to the \"my_data\" variable. Also note\nthat the result of this background tag will not be rendered, and you will not have access to any variable inside the background tag.\n{% parse_json my_data %}{ \"hello\": \"world\" }{% endparse_json %}\n{% assign not_available_in_background = \"You will not see me\" %}\n{% background delay: 5, data: my_data, hey: 'hello' %}\n  {% log not_available_in_background %}{% comment %}Will be null, as this variable was not passed to the background tag {% endcomment %}\n  {% log data %}{% comment %}You will see { \"hello\": \"world\" }, as it was provided to the background tag{% endcomment %}\n  {% log hey %}{% comment %}You will see \"hello\" as it was provided to the background tag{% endcomment %}\n  {% log context %}{% comment %}You will copy the current request context and make it available in the background{% endcomment %}\n  {% assign not_available_outside = \"You will not see me\" %}\n  {{ not_available_outside }} {% comment %}This variable will be rendered in the background, meaning you won't see anything on the page{% endcomment %}\n{% endbackground %}\n{{ not_available_outside }}{% comment %}This will be blank, because the assign will happen in the background - you won't have access to it here{% endcomment %}"
      ]
    },
    {
      "name": "cache",
      "description": "Checks if there's html cached for the given key. If yes, it just returns the value without processing\nanything inside the cache tag, otherwise it executes code, stores the result in the cache.\nWhen you hit the page with such code for the first time, the code will be executed and hence it will iterate through the loop\nand generate random strings.However, then the result of the block will be cached and all the following requests within 20 seconds\nwould not invoke the code - instead, it would just take the value from the cache. The output will not change. When the cache expires,\nthe code will be evaluated again, producing another set of random string.",
      "params": [
        { "name": "key", "types": ["String"], "description": "the key which should uniquely identify the cached fragment" },
        { "name": "expire", "types": ["Integer"], "description": "optional. number of seconds since populating the cache to expiration" }
      ],
      "examples": [
        "{% cache 'this is my key', expire: 20 %}\n  <ul>\n    {% for i in (1..100) %}\n      <li>{{ 18 | random_string }}</li>\n    {% endfor %}\n  </ul>\n{% endcache %}"
      ]
    },
    {
      "name": "content_for",
      "description": "Stores a block of markup in an identifier for later use.\nRender it later with `yield` tag.",
      "params": [
        { "name": "name", "types": ["String"], "description": "the markups will be stored under this name" },
        {
          "name": "flush",
          "types": ["Boolean"],
          "description": "optional. If the flush parameter is true content_for replaces the blocks it is given instead of appending content to the existing one"
        }
      ],
      "examples": ["{% content_for 'header' %}\n  Hello world\n{% endcontent_for %}"]
    },
    "",
    {
      "name": "export",
      "description": "Makes variables defined inside partial accessible anywhere via context.exports.<namespace>",
      "params": [
        { "name": "variable", "types": ["Any"], "description": "variable to be stored inside the namespace" },
        { "name": "namespace", "types": ["String"], "description": "namespace under which variable will be in context.exports" }
      ],
      "examples": [
        "{% assign a = 'value for a' %}\n{% assign b = 'value for b' %}\n{% export a, b, namespace: 'my_hash' %}\n\n{{ context.exports.my_hash }} => { \"a\": \"value for a\", \"b\": \"value for b\" }\n{% parse_json company %}\n{\n  \"name\": \"platformOS\",\n  \"technologies\": [\"liquid\", \"graphql\"],\n  \"countries\": { \"USA\": 5, \"Poland\": 5, \"Romania\": 2 }\n}\n{% endparse_json %}\n\n{% export company, namespace: 'data' %}\n\n{{ context.exports.data }} =>\n  {\"company\"=>{\"name\"=>\"platformOS\", \"technologies\"=>[\"liquid\", \"graphql\"], \"countries\"=>{\"USA\"=>5, \"Poland\"=>5, \"Romania\"=>2}}}\n{{ context.exports.data.company.technologies }} => liquidgraphql\n{{ context.exports.data.company.name }} => platformOS"
      ]
    },
    {
      "name": "form",
      "description": "Used to generate a html form element for a resource. Use within `form configuration`.\nInside the tag you can use `form_builder` variable.",
      "params": [
        { "name": "html-id", "types": ["String"], "description": "set id attribute in `<form id=\"\">` element" },
        { "name": "html-novalidate", "types": ["String"], "description": "add `novalidate` attribute to `<form novalidate>` element" },
        { "name": "html-class", "types": ["String"], "description": "add css class `<form class=\"\">` element" },
        {
          "name": "html-multipart",
          "types": ["Boolean"],
          "description": "add `enctype=\"multipart/form-data\"` attribute to `<form enctype=\"multipart/form-data\">` element.\nMultipart is enabled by default"
        },
        { "name": "html-data-", "types": ["attr"], "description": "[String] add data attribute to `<form data-[attr]=\"\">` element" }
      ],
      "examples": [
        "{% form %}\n  {{ form_builder }}\n{% endform %}",
        "{% form html-id: 'someid', html-novalidate: true, html-class: 'big-form green-form', html-data-user-id: '12345', html-multipart: false %}\n{% endform %}"
      ]
    },
    {
      "name": "graphql",
      "description": "Used to execute GraphQL query stored in a file or invoke GraphQL query inline. All arguments provided to the tag will be passed to GraphQL.\nIt returns a hash with the data or the errors that occurred (for example, variable type mismatch, required variable not provided,\nsyntax error) etc.",
      "params": [
        {
          "name": "query_name",
          "types": ["String"],
          "description": "name of the GraphQL query. For get_users.graphql file name of the query is get_users"
        },
        { "name": "arguments", "types": ["Object"], "description": "optional. key:value pair(s) which will be passed to GraphQL query" },
        { "name": "args", "types": ["Hash"], "description": "optional.  hash of the arguments which will be passed to GraphQL query" }
      ],
      "examples": [
        "Invoke query \"get_models\" and store the result in variable \"g\":\n{% graphql g = \"get_models\", model_id: context.params.slug2 %}",
        "Chain filters to make it easier to access the data:\n{% graphql g = \"get_models\", model_id: context.params.slug2 | dig: 'get_models'%}",
        "Pass all arguments at once as a hash:\n{% parse_json arguments %}\n  { \"model_id\": \"{{ context.params.slug2 }}\" }\n{% endparse_json %}\n{% graphql g = \"get_models\", args: arguments %}",
        "Pass all arguments at once as a JSON string:\n{% graphql g = \"get_models\", args: '{ \"per_page\": \"20\" }' %}",
        "Invoke inline query and store the result in variable \"g\". Please note - this is NOT recommended for the queries.\n{% graphql g, id: context.params.slug2, title: \"new title\" %}\n  mutation { customization_update(id: $id, customization: { title: $title }){ id } }\n{% endgraphql %}"
      ]
    },
    {
      "name": "include_form",
      "description": "This tag should be used to render forms defined in form_configurations directory",
      "params": [
        { "name": "form_name", "types": ["String"], "description": "name of the form configuration from form_configurations directory" },
        { "name": "id", "types": ["ID"], "description": "id of the resource you want to edit" },
        {
          "name": "parent_resource_id",
          "types": ["String"],
          "description": "name of the resource type, f.e. name of custom_model_type, transactable_type, user_profile_type"
        }
      ],
      "examples": [
        "{% include_form 'signup_form' %}",
        "{% include_form 'edit_user', id: user.id %}",
        "{% include_form 'manager_invite_to_interview', parent_resource_id: 'invitation', user: g.user %}"
      ]
    },
    {
      "name": "log",
      "description": "Print any information to marketplace logs",
      "params": [
        { "name": "message", "types": ["Any"], "description": "Any object that can be printed" },
        {
          "name": "type",
          "types": ["String"],
          "description": "type of log entry. Use it to tag your logs to make it easier to differentiate logs. If you set it to 'error' marketplace-kit will also notify your OS about it."
        }
      ],
      "examples": [
        "{% log 'hello world' %}",
        "{% log params, type: 'request-params' %}",
        "{% log user.id, type: 'debug' %}",
        "{% log context.current_user, type: 'error' %}"
      ]
    },
    {
      "name": "parse_json",
      "description": "Captures and parses the JSON string inside of the opening and closing tags and assigns it to a variable.",
      "params": [
        {
          "name": "variable_name",
          "types": ["String"],
          "description": "variable name that will be used to assign contents after it is parsed"
        },
        { "name": "content", "types": ["String"], "description": "valid JSON string to be assigned" }
      ],
      "examples": [
        "{% parse_json car %}\n  { \"type\": \"SUV\", \"gearbox\": \"AT\" }\n{% endparse_json %}\n\n{{ car }} => {\"type\"=>\"SUV\", \"gearbox\"=>\"AT\"}\n{{ car.type }} => SUV",
        "{% parse_json cars %}\n  [\n    { \"maker\": \"Honda\", \"model\": \"CRX\" },\n    { \"maker\": \"Subaru\", \"model\": \"Forester\"},\n    { \"maker\": \"Lexus\", \"model\": \"LFA\" }\n  ]\n{% endparse_json %}\n\n{{ cars }} => {\"maker\"=>\"Honda\", \"model\"=>\"CRX\"}{\"maker\"=>\"Subaru\", \"model\"=>\"Forester\"}{\"maker\"=>\"Lexus\", \"model\"=>\"LFA\"}"
      ]
    },
    "",
    {
      "name": "session",
      "description": "Stores data during user's session\nSets field of given name to given value in context.session",
      "params": [],
      "examples": [
        "{% session foo = 'bar' %}\n{{ context.session | json }} => { \"foo\": \"bar\" }",
        "{% assign bar = \"42\" }\n{% session foo = bar %}\n{{ context.session | json }} => { \"foo\": \"42\" }",
        "{% session foo = null %}\n{{ context.session | json }} => {}",
        "{% session foo = blank %}\n{{ context.session | json }} => {}"
      ]
    },
    {
      "name": "spam_protection",
      "description": "Generates html for spam protection. Supports Google reCAPTCHA strategies: recaptcha_v2, recaptcha_v3",
      "params": [
        { "name": "strategy", "types": ["String"], "description": "name of protection strategy. Default is recaptcha_v2" },
        {
          "name": "action",
          "types": ["String"],
          "description": "action name for reCAPTCHA V3, action may only contain alphanumeric characters and slashes"
        }
      ],
      "examples": [
        "{% form %}\n  {% spam_protection \"recaptcha_v2\" %}\n{% endform %}",
        "{% form %}\n  {% spam_protection \"recaptcha_v3\", action: \"signup\" %}\n{% endform %}"
      ]
    },
    {
      "name": "yield",
      "description": "Execute code wrapped inside content_for",
      "params": [{ "name": "name", "types": ["String"], "description": "name of content_for block" }],
      "examples": [
        "Use this in a liquid view first. Then you can use yield inside the layout (for example) or another subsequently rendered view, like below:\n{% content_for 'greeting' %}Hello world{% endcontent_for %}\n\n# another_file.liquid\n{% yield 'greeting' %}"
      ]
    }
  ]
}
{% endraw %}
{% endparse_json %}

{% export platformos_tags, namespace: 'api_reference' %}
