{% parse_json graphql_mutations %}
{% raw %}
[
  {
    "notices": [],
    "name": "activity_create",
    "description": "Creates an Activity",
    "input_fields": [
      {
        "notices": [],
        "name": "payload",
        "description": null,
        "type": { "name": "ActivityPayload", "path": "scalar/activitypayload", "info": "ActivityPayload!" },
        "arguments": []
      }
    ],
    "return_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "payload",
        "description": null,
        "type": { "name": "ActivityPayload", "path": "scalar/activitypayload", "info": "ActivityPayload" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "uuid",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "activity_delete_all",
    "description": "Delete all activities and clean up ALL feeds",
    "input_fields": [
      {
        "notices": [],
        "name": "confirm",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "activity_delete_all",
        "description": "Delete all activities and clean up ALL feeds",
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" },
        "arguments": [
          {
            "name": "confirm",
            "description": null,
            "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
            "default_value": false
          }
        ]
      }
    ]
  },
  {
    "notices": [],
    "name": "activity_publish",
    "description": "add activity to feeds",
    "input_fields": [
      {
        "notices": [],
        "name": "feed_type",
        "description": "e.i. User, UserPrivate, AuditLog, Images, Posts",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "ids",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID]!" },
        "arguments": []
      },
      { "notices": [], "name": "uuid", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "activity_publish",
        "description": "add activity to feeds",
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": [
          {
            "name": "feed_type",
            "description": "e.i. User, UserPrivate, AuditLog, Images, Posts",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          { "name": "ids", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "[ID]!" } },
          { "name": "uuid", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" } }
        ]
      }
    ]
  },
  {
    "notices": [],
    "name": "activity_unpublish",
    "description": "Clean up feeds from selected activities",
    "input_fields": [
      {
        "notices": [],
        "name": "related_to_object",
        "description": "search for activities related to the Object and then cleanup all feeds from found activities",
        "type": { "name": "ActiveRecordReference", "path": "input_object/activerecordreference", "info": "ActiveRecordReference" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "uuid",
        "description": "remove from feeds activity with UUID",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "activity_unpublish",
        "description": "Clean up feeds from selected activities",
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" },
        "arguments": [
          {
            "name": "related_to_object",
            "description": "search for activities related to the Object and then cleanup all feeds from found activities",
            "type": { "name": "ActiveRecordReference", "path": "input_object/activerecordreference", "info": "ActiveRecordReference" }
          },
          {
            "name": "uuid",
            "description": "remove from feeds activity with UUID",
            "type": { "name": "ID", "path": "scalar/id", "info": "ID" }
          }
        ]
      }
    ]
  },
  {
    "notices": [],
    "name": "activity_unpublish_all",
    "description": "Clean up ALL feeds",
    "input_fields": [
      {
        "notices": [],
        "name": "confirm",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "activity_unpublish_all",
        "description": "Clean up ALL feeds",
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" },
        "arguments": [
          {
            "name": "confirm",
            "description": null,
            "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
            "default_value": false
          }
        ]
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_api_call_notification_create",
    "description": "Creates api call notification",
    "input_fields": [
      {
        "notices": [],
        "name": "api_call_notification",
        "description": null,
        "type": {
          "name": "ApiCallNotificationInputType",
          "path": "input_object/apicallnotificationinputtype",
          "info": "ApiCallNotificationInputType!"
        },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "callback",
        "description": "liquid code which can be used to process the response from the endpoint. You have access to \"response\" variable.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "content",
        "description": "liquid code to evaluate to whatever you want to send, for example a JSON.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "delay_by",
        "description": "liquid code which should evaluate to integer. Delays invoking the job by\nspecified number of minutes. Useful to invoke code at certain point in time,\nfor example 1 hour before something etc. To calculate proper number you can\nuse time_diff filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configurations",
        "description": "form configurations which trigger the api call",
        "type": { "name": "FormConfiguration", "path": "object/formconfiguration", "info": "[FormConfiguration!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "headers",
        "description": "liquid code to evaluate to valid json of request headers",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "name of the api call, which is used in form_configurations or mutation to trigger it",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "request_type",
        "description": "Liquid code which should evaluate to valid request type: Get, Post, Put,\nPatch, Delete or if you want to send binary files: Post_Multipart,\nPut_Multipart, Patch_Multipart",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "to",
        "description": "liquid code to evaluate to valid endpoint for the request.",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "trigger_condition",
        "description": "liquid code which should evaluate to true if the api call should be sent",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_api_call_notification_delete",
    "description": "Creates api call notification",
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "callback",
        "description": "liquid code which can be used to process the response from the endpoint. You have access to \"response\" variable.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "content",
        "description": "liquid code to evaluate to whatever you want to send, for example a JSON.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "delay_by",
        "description": "liquid code which should evaluate to integer. Delays invoking the job by\nspecified number of minutes. Useful to invoke code at certain point in time,\nfor example 1 hour before something etc. To calculate proper number you can\nuse time_diff filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configurations",
        "description": "form configurations which trigger the api call",
        "type": { "name": "FormConfiguration", "path": "object/formconfiguration", "info": "[FormConfiguration!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "headers",
        "description": "liquid code to evaluate to valid json of request headers",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "name of the api call, which is used in form_configurations or mutation to trigger it",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "request_type",
        "description": "Liquid code which should evaluate to valid request type: Get, Post, Put,\nPatch, Delete or if you want to send binary files: Post_Multipart,\nPut_Multipart, Patch_Multipart",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "to",
        "description": "liquid code to evaluate to valid endpoint for the request.",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "trigger_condition",
        "description": "liquid code which should evaluate to true if the api call should be sent",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_api_call_notification_update",
    "description": "Creates api call notification",
    "input_fields": [
      {
        "notices": [],
        "name": "api_call_notification",
        "description": null,
        "type": {
          "name": "UpdateApiCallNotificationInputType",
          "path": "input_object/updateapicallnotificationinputtype",
          "info": "UpdateApiCallNotificationInputType!"
        },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "callback",
        "description": "liquid code which can be used to process the response from the endpoint. You have access to \"response\" variable.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "content",
        "description": "liquid code to evaluate to whatever you want to send, for example a JSON.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "delay_by",
        "description": "liquid code which should evaluate to integer. Delays invoking the job by\nspecified number of minutes. Useful to invoke code at certain point in time,\nfor example 1 hour before something etc. To calculate proper number you can\nuse time_diff filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configurations",
        "description": "form configurations which trigger the api call",
        "type": { "name": "FormConfiguration", "path": "object/formconfiguration", "info": "[FormConfiguration!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "headers",
        "description": "liquid code to evaluate to valid json of request headers",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "name of the api call, which is used in form_configurations or mutation to trigger it",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "request_type",
        "description": "Liquid code which should evaluate to valid request type: Get, Post, Put,\nPatch, Delete or if you want to send binary files: Post_Multipart,\nPut_Multipart, Patch_Multipart",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "to",
        "description": "liquid code to evaluate to valid endpoint for the request.",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "trigger_condition",
        "description": "liquid code which should evaluate to true if the api call should be sent",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_authorization_policy_create",
    "description": "Creates authorization policy",
    "input_fields": [
      {
        "notices": [],
        "name": "authorization_policy",
        "description": null,
        "type": {
          "name": "AuthorizationPolicyInputType",
          "path": "input_object/authorizationpolicyinputtype",
          "info": "AuthorizationPolicyInputType!"
        },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "content",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "flash_alert",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "http_status",
        "description": "use this status code when authorization fails; usually 404 or 403",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_to",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_authorization_policy_delete",
    "description": "Creates authorization policy",
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "content",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "flash_alert",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "http_status",
        "description": "use this status code when authorization fails; usually 404 or 403",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_to",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_authorization_policy_update",
    "description": "Creates authorization policy",
    "input_fields": [
      {
        "notices": [],
        "name": "authorization_policy",
        "description": null,
        "type": {
          "name": "UpdateAuthorizationPolicyInputType",
          "path": "input_object/updateauthorizationpolicyinputtype",
          "info": "UpdateAuthorizationPolicyInputType!"
        },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "content",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "flash_alert",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "http_status",
        "description": "use this status code when authorization fails; usually 404 or 403",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_to",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_email_notification_create",
    "description": "Creates email_notification schema",
    "input_fields": [
      {
        "notices": [],
        "name": "email_notification",
        "description": null,
        "type": {
          "name": "EmailNotificationInputType",
          "path": "input_object/emailnotificationinputtype",
          "info": "EmailNotificationInputType!"
        },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "attachments",
        "description": "json of the form { \"file_name.jpg\": { \"url\": \"http://example.com/file.jpg\" } }\nwhich defines email attachments. Liquid will be processed.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "bcc",
        "description": "Comma separated blind carbon copy list. Liquid allowed. For example \"john@example.com, jane@example.com\"",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "cc",
        "description": "Comma separated carbon copy list. Liquid allowed. For example \"john@example.com, jane@example.com\"",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "content",
        "description": "liquid code to evaluate to valid form html. If email is triggered via form\nconfiguration, You have access to \"form\" variable, with data specified in the configuration.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "delay_by",
        "description": "liquid code which should evaluate to integer. Delays invoking the job by\nspecified number of minutes. Useful to invoke code at certain point in time,\nfor example 1 hour before something etc. To calculate proper number you can\nuse time_diff filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configurations",
        "description": "form configurations which trigger the email",
        "type": { "name": "FormConfiguration", "path": "object/formconfiguration", "info": "[FormConfiguration!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "from",
        "description": "email address from which you would like to send the email, for example notifications@mydomain.com",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "layout_path",
        "description": "name of the liquid layout to which the content should be injected",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "name of the email, which is used in form_configurations or mutation to trigger it",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "reply_to",
        "description": "email address to which users should reply, for example support@mydomain.com",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "subject",
        "description": "liquid code to evaluate to text",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "to",
        "description": "Comma separated recipient list. Liquid allowed. For example: \"john@example.com, jane@example.com\"",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "trigger_condition",
        "description": "liquid code which should evaluate to true if the email should be sent",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_email_notification_delete",
    "description": "Creates email_notification schema",
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "attachments",
        "description": "json of the form { \"file_name.jpg\": { \"url\": \"http://example.com/file.jpg\" } }\nwhich defines email attachments. Liquid will be processed.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "bcc",
        "description": "Comma separated blind carbon copy list. Liquid allowed. For example \"john@example.com, jane@example.com\"",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "cc",
        "description": "Comma separated carbon copy list. Liquid allowed. For example \"john@example.com, jane@example.com\"",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "content",
        "description": "liquid code to evaluate to valid form html. If email is triggered via form\nconfiguration, You have access to \"form\" variable, with data specified in the configuration.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "delay_by",
        "description": "liquid code which should evaluate to integer. Delays invoking the job by\nspecified number of minutes. Useful to invoke code at certain point in time,\nfor example 1 hour before something etc. To calculate proper number you can\nuse time_diff filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configurations",
        "description": "form configurations which trigger the email",
        "type": { "name": "FormConfiguration", "path": "object/formconfiguration", "info": "[FormConfiguration!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "from",
        "description": "email address from which you would like to send the email, for example notifications@mydomain.com",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "layout_path",
        "description": "name of the liquid layout to which the content should be injected",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "name of the email, which is used in form_configurations or mutation to trigger it",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "reply_to",
        "description": "email address to which users should reply, for example support@mydomain.com",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "subject",
        "description": "liquid code to evaluate to text",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "to",
        "description": "Comma separated recipient list. Liquid allowed. For example: \"john@example.com, jane@example.com\"",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "trigger_condition",
        "description": "liquid code which should evaluate to true if the email should be sent",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_email_notification_update",
    "description": "Creates email_notification schema",
    "input_fields": [
      {
        "notices": [],
        "name": "email_notification",
        "description": null,
        "type": {
          "name": "UpdateEmailNotificationInputType",
          "path": "input_object/updateemailnotificationinputtype",
          "info": "UpdateEmailNotificationInputType!"
        },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "attachments",
        "description": "json of the form { \"file_name.jpg\": { \"url\": \"http://example.com/file.jpg\" } }\nwhich defines email attachments. Liquid will be processed.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "bcc",
        "description": "Comma separated blind carbon copy list. Liquid allowed. For example \"john@example.com, jane@example.com\"",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "cc",
        "description": "Comma separated carbon copy list. Liquid allowed. For example \"john@example.com, jane@example.com\"",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "content",
        "description": "liquid code to evaluate to valid form html. If email is triggered via form\nconfiguration, You have access to \"form\" variable, with data specified in the configuration.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "delay_by",
        "description": "liquid code which should evaluate to integer. Delays invoking the job by\nspecified number of minutes. Useful to invoke code at certain point in time,\nfor example 1 hour before something etc. To calculate proper number you can\nuse time_diff filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configurations",
        "description": "form configurations which trigger the email",
        "type": { "name": "FormConfiguration", "path": "object/formconfiguration", "info": "[FormConfiguration!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "from",
        "description": "email address from which you would like to send the email, for example notifications@mydomain.com",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "layout_path",
        "description": "name of the liquid layout to which the content should be injected",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "name of the email, which is used in form_configurations or mutation to trigger it",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "reply_to",
        "description": "email address to which users should reply, for example support@mydomain.com",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "subject",
        "description": "liquid code to evaluate to text",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "to",
        "description": "Comma separated recipient list. Liquid allowed. For example: \"john@example.com, jane@example.com\"",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "trigger_condition",
        "description": "liquid code which should evaluate to true if the email should be sent",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_field_create",
    "description": "Creates field",
    "input_fields": [
      {
        "notices": [],
        "name": "field",
        "description": null,
        "type": {
          "name": "StandalonePropertyInputType",
          "path": "input_object/standalonepropertyinputtype",
          "info": "StandalonePropertyInputType!"
        },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "attribute_type",
        "description": "Type of the property",
        "type": { "name": "PropertyTypeEnum", "path": "enum/propertytypeenum", "info": "PropertyTypeEnum" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "default_value",
        "description": "Default value for new objects",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "Name of the property",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "target_id",
        "description": "Id of the schema to which this property definition belongs",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "target_type",
        "description": "Type of the schema to which this property definition belongs",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_field_delete",
    "description": "Creates field",
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "attribute_type",
        "description": "Type of the property",
        "type": { "name": "PropertyTypeEnum", "path": "enum/propertytypeenum", "info": "PropertyTypeEnum" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "default_value",
        "description": "Default value for new objects",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "Name of the property",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "target_id",
        "description": "Id of the schema to which this property definition belongs",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "target_type",
        "description": "Type of the schema to which this property definition belongs",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_field_update",
    "description": "Creates field",
    "input_fields": [
      {
        "notices": [],
        "name": "field",
        "description": null,
        "type": {
          "name": "UpdateStandalonePropertyInputType",
          "path": "input_object/updatestandalonepropertyinputtype",
          "info": "UpdateStandalonePropertyInputType!"
        },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "attribute_type",
        "description": "Type of the property",
        "type": { "name": "PropertyTypeEnum", "path": "enum/propertytypeenum", "info": "PropertyTypeEnum" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "default_value",
        "description": "Default value for new objects",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "Name of the property",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "target_id",
        "description": "Id of the schema to which this property definition belongs",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "target_type",
        "description": "Type of the schema to which this property definition belongs",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_form_configuration_create",
    "description": "Creates form_configuration schema",
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration",
        "description": null,
        "type": {
          "name": "FormConfigurationInputType",
          "path": "input_object/formconfigurationinputtype",
          "info": "FormConfigurationInputType!"
        },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "api_call_notifications",
        "description": "associated api call notifications",
        "type": { "name": "ApiCallNotification", "path": "object/apicallnotification", "info": "[ApiCallNotification!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "async_callback_actions",
        "description": "Same as callback, but invoked asynchronously. Recommended for performance reason.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "async_callback_delay",
        "description": "Delays invoking the job by specified number of minutes. Liquid allowed -\nuseful to invoke code at certain point in time, for example 1 hour before\nsomething etc. To calculate proper number you can use time_diff filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "async_callback_max_attempts",
        "description": "Defines max number of retrying attempts in case of an error. Usually you do not want to change it.",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "async_callback_priority",
        "description": "defines the invocaction priority, the higher the quicker timeout",
        "type": { "name": "AsyncCallbackPriority", "path": "enum/asynccallbackpriority", "info": "AsyncCallbackPriority" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "authorization_policies",
        "description": "associated authorization policies",
        "type": { "name": "AuthorizationPolicy", "path": "object/authorizationpolicy", "info": "[AuthorizationPolicy!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "callback_actions",
        "description": "liquid code to be invoked after persisting input to DB. If possible, use async callback actions instead",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "configuration",
        "description": "whitelist of attributes which can be persisted in the DB. On server side\n(callbacks, emails etc) you have access to submited values via form variable\n(for exapmple configuration: properties: my_var is accessible via\nform.properties.my_var )",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "default_payload",
        "description": "liquid code which has to evaluate to JSON. This extends/overwrites user\nsubmitted input via form, before validation. Most useful to store in DB\nsensitive data which you do not want user to modify, for example\ncontext.current_user.id",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "email_notifications",
        "description": "associated email notifications",
        "type": { "name": "EmailNotification", "path": "object/emailnotification", "info": "[EmailNotification!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "flash_alert",
        "description": "Message which you want to display to user upon validation errors.Output is\navailable via context.flash_alert. Liquid allowed.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "flash_notice",
        "description": "Message which you want to display to user after successful form submission.\nOutput is available via context.flash_notice. Liquid allowed.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "liquid_body",
        "description": "liquid code to evaluate to valid form html. You have access to form_builder variable and form tag.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_to",
        "description": "Path or URL to which user should be redirected after successful form submission. Liquid allowed.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "resource",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "resource_owner",
        "description": "defines who can submit the form. If set to anyone, please make sure to provide authorization_policies",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "sms_notifications",
        "description": "associated sms notifications",
        "type": { "name": "SmsNotification", "path": "object/smsnotification", "info": "[SmsNotification!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "spam_protection",
        "description": "name of the strategy and configuration for them",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_form_configuration_delete",
    "description": "Creates form_configuration schema",
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "api_call_notifications",
        "description": "associated api call notifications",
        "type": { "name": "ApiCallNotification", "path": "object/apicallnotification", "info": "[ApiCallNotification!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "async_callback_actions",
        "description": "Same as callback, but invoked asynchronously. Recommended for performance reason.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "async_callback_delay",
        "description": "Delays invoking the job by specified number of minutes. Liquid allowed -\nuseful to invoke code at certain point in time, for example 1 hour before\nsomething etc. To calculate proper number you can use time_diff filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "async_callback_max_attempts",
        "description": "Defines max number of retrying attempts in case of an error. Usually you do not want to change it.",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "async_callback_priority",
        "description": "defines the invocaction priority, the higher the quicker timeout",
        "type": { "name": "AsyncCallbackPriority", "path": "enum/asynccallbackpriority", "info": "AsyncCallbackPriority" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "authorization_policies",
        "description": "associated authorization policies",
        "type": { "name": "AuthorizationPolicy", "path": "object/authorizationpolicy", "info": "[AuthorizationPolicy!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "callback_actions",
        "description": "liquid code to be invoked after persisting input to DB. If possible, use async callback actions instead",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "configuration",
        "description": "whitelist of attributes which can be persisted in the DB. On server side\n(callbacks, emails etc) you have access to submited values via form variable\n(for exapmple configuration: properties: my_var is accessible via\nform.properties.my_var )",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "default_payload",
        "description": "liquid code which has to evaluate to JSON. This extends/overwrites user\nsubmitted input via form, before validation. Most useful to store in DB\nsensitive data which you do not want user to modify, for example\ncontext.current_user.id",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "email_notifications",
        "description": "associated email notifications",
        "type": { "name": "EmailNotification", "path": "object/emailnotification", "info": "[EmailNotification!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "flash_alert",
        "description": "Message which you want to display to user upon validation errors.Output is\navailable via context.flash_alert. Liquid allowed.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "flash_notice",
        "description": "Message which you want to display to user after successful form submission.\nOutput is available via context.flash_notice. Liquid allowed.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "liquid_body",
        "description": "liquid code to evaluate to valid form html. You have access to form_builder variable and form tag.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_to",
        "description": "Path or URL to which user should be redirected after successful form submission. Liquid allowed.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "resource",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "resource_owner",
        "description": "defines who can submit the form. If set to anyone, please make sure to provide authorization_policies",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "sms_notifications",
        "description": "associated sms notifications",
        "type": { "name": "SmsNotification", "path": "object/smsnotification", "info": "[SmsNotification!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "spam_protection",
        "description": "name of the strategy and configuration for them",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_form_configuration_update",
    "description": "Creates form_configuration schema",
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration",
        "description": null,
        "type": {
          "name": "UpdateFormConfigurationInputType",
          "path": "input_object/updateformconfigurationinputtype",
          "info": "UpdateFormConfigurationInputType!"
        },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "api_call_notifications",
        "description": "associated api call notifications",
        "type": { "name": "ApiCallNotification", "path": "object/apicallnotification", "info": "[ApiCallNotification!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "async_callback_actions",
        "description": "Same as callback, but invoked asynchronously. Recommended for performance reason.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "async_callback_delay",
        "description": "Delays invoking the job by specified number of minutes. Liquid allowed -\nuseful to invoke code at certain point in time, for example 1 hour before\nsomething etc. To calculate proper number you can use time_diff filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "async_callback_max_attempts",
        "description": "Defines max number of retrying attempts in case of an error. Usually you do not want to change it.",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "async_callback_priority",
        "description": "defines the invocaction priority, the higher the quicker timeout",
        "type": { "name": "AsyncCallbackPriority", "path": "enum/asynccallbackpriority", "info": "AsyncCallbackPriority" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "authorization_policies",
        "description": "associated authorization policies",
        "type": { "name": "AuthorizationPolicy", "path": "object/authorizationpolicy", "info": "[AuthorizationPolicy!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "callback_actions",
        "description": "liquid code to be invoked after persisting input to DB. If possible, use async callback actions instead",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "configuration",
        "description": "whitelist of attributes which can be persisted in the DB. On server side\n(callbacks, emails etc) you have access to submited values via form variable\n(for exapmple configuration: properties: my_var is accessible via\nform.properties.my_var )",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "default_payload",
        "description": "liquid code which has to evaluate to JSON. This extends/overwrites user\nsubmitted input via form, before validation. Most useful to store in DB\nsensitive data which you do not want user to modify, for example\ncontext.current_user.id",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "email_notifications",
        "description": "associated email notifications",
        "type": { "name": "EmailNotification", "path": "object/emailnotification", "info": "[EmailNotification!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "flash_alert",
        "description": "Message which you want to display to user upon validation errors.Output is\navailable via context.flash_alert. Liquid allowed.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "flash_notice",
        "description": "Message which you want to display to user after successful form submission.\nOutput is available via context.flash_notice. Liquid allowed.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "liquid_body",
        "description": "liquid code to evaluate to valid form html. You have access to form_builder variable and form tag.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_to",
        "description": "Path or URL to which user should be redirected after successful form submission. Liquid allowed.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "resource",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "resource_owner",
        "description": "defines who can submit the form. If set to anyone, please make sure to provide authorization_policies",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "sms_notifications",
        "description": "associated sms notifications",
        "type": { "name": "SmsNotification", "path": "object/smsnotification", "info": "[SmsNotification!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "spam_protection",
        "description": "name of the strategy and configuration for them",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_liquid_layout_create",
    "description": "Creates liquid layout",
    "input_fields": [
      {
        "notices": [],
        "name": "liquid_layout",
        "description": null,
        "type": { "name": "LiquidLayoutInputType", "path": "input_object/liquidlayoutinputtype", "info": "LiquidLayoutInputType!" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "body",
        "description": "liquid code to evaluate to valid html. To inject content of the resources using the layout use {{ content_for_layout }}",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "format",
        "description": null,
        "type": { "name": "PageFormat", "path": "enum/pageformat", "info": "PageFormat" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "path",
        "description": "defines the the path for layout, must starts with layouts/, for example layouts/my_layout",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_liquid_layout_delete",
    "description": "Creates liquid layout",
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "body",
        "description": "liquid code to evaluate to valid html. To inject content of the resources using the layout use {{ content_for_layout }}",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "format",
        "description": null,
        "type": { "name": "PageFormat", "path": "enum/pageformat", "info": "PageFormat" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "path",
        "description": "defines the the path for layout, must starts with layouts/, for example layouts/my_layout",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_liquid_layout_update",
    "description": "Creates liquid layout",
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "liquid_layout",
        "description": null,
        "type": {
          "name": "UpdateLiquidLayoutInputType",
          "path": "input_object/updateliquidlayoutinputtype",
          "info": "UpdateLiquidLayoutInputType!"
        },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "body",
        "description": "liquid code to evaluate to valid html. To inject content of the resources using the layout use {{ content_for_layout }}",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "format",
        "description": null,
        "type": { "name": "PageFormat", "path": "enum/pageformat", "info": "PageFormat" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "path",
        "description": "defines the the path for layout, must starts with layouts/, for example layouts/my_layout",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_liquid_partial_create",
    "description": "Creates liquid partial",
    "input_fields": [
      {
        "notices": [],
        "name": "liquid_partial",
        "description": null,
        "type": { "name": "LiquidPartialInputType", "path": "input_object/liquidpartialinputtype", "info": "LiquidPartialInputType!" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "body",
        "description": "liquid code to evaluate to valid html",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "format",
        "description": null,
        "type": { "name": "PageFormat", "path": "enum/pageformat", "info": "PageFormat" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "path",
        "description": "defines the name of the partial to be used with include tag",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_liquid_partial_delete",
    "description": "Creates liquid partial",
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "body",
        "description": "liquid code to evaluate to valid html",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "format",
        "description": null,
        "type": { "name": "PageFormat", "path": "enum/pageformat", "info": "PageFormat" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "path",
        "description": "defines the name of the partial to be used with include tag",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_liquid_partial_update",
    "description": "Creates liquid partial",
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "liquid_partial",
        "description": null,
        "type": {
          "name": "UpdateLiquidPartialInputType",
          "path": "input_object/updateliquidpartialinputtype",
          "info": "UpdateLiquidPartialInputType!"
        },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "body",
        "description": "liquid code to evaluate to valid html",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "format",
        "description": null,
        "type": { "name": "PageFormat", "path": "enum/pageformat", "info": "PageFormat" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "path",
        "description": "defines the name of the partial to be used with include tag",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_model_schema_create",
    "description": "Creates model schema",
    "input_fields": [
      {
        "notices": [],
        "name": "model_schema",
        "description": null,
        "type": { "name": "ModelSchemaInputType", "path": "input_object/modelschemainputtype", "info": "ModelSchemaInputType!" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "fields",
        "description": "Deprecated, use properties instead.",
        "is_deprecated": true,
        "deprecation_reason": "Use properties",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "parameterized_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of properties attributes to be included in the results",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_model_schema_delete",
    "description": "Creates model schema",
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "fields",
        "description": "Deprecated, use properties instead.",
        "is_deprecated": true,
        "deprecation_reason": "Use properties",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "parameterized_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of properties attributes to be included in the results",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_model_schema_update",
    "description": "Creates model schema",
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "model_schema",
        "description": null,
        "type": {
          "name": "UpdateModelSchemaInputType",
          "path": "input_object/updatemodelschemainputtype",
          "info": "UpdateModelSchemaInputType!"
        },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "fields",
        "description": "Deprecated, use properties instead.",
        "is_deprecated": true,
        "deprecation_reason": "Use properties",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "parameterized_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of properties attributes to be included in the results",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_page_create",
    "description": "Creates page",
    "input_fields": [
      {
        "notices": [],
        "name": "page",
        "description": null,
        "type": { "name": "PageInputType", "path": "input_object/pageinputtype", "info": "PageInputType!" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "authorization_policies",
        "description": "associated authorization policies",
        "type": { "name": "AuthorizationPolicy", "path": "object/authorizationpolicy", "info": "[AuthorizationPolicy!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "content",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "dynamic_cache_expire",
        "description": "the number of seconds for which this page will be cached; set\ndynamic_cache_layout accordingly to your scenario. Triggers authorization. Use\nonly if cache_key cannot be easily determined (for example for search results page)",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "dynamic_cache_key",
        "description": "liquid which evaluates to the cache key, for example {{ context.page.slug\n}}/{{ context.params.slug2 }}for page with slug \"abc\" will cache separately\n/abc/1 and /abc/2, however abc/1/1 will return the same value as abc/1/2. If\nleft blank, the full url will be used.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "dynamic_cache_layout",
        "description": "defines whether layout should be cached as well, or only page. Usually it is\nnot possible to cache layout due to dynamic data in it, like name of a logged\nin user, hence default is false.",
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "format",
        "description": null,
        "type": { "name": "PageFormat", "path": "enum/pageformat", "info": "PageFormat" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "handler",
        "description": null,
        "type": { "name": "PageRequestMethod", "path": "enum/pagerequestmethod", "info": "PageRequestMethod" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "layout_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "max_deep_level",
        "description": "max nesting of the url to be resolved by this slug. For example slug \"abc\"\nwith max_deep_level 2 will resolve /abc, abc/1, abc/2, but will NOT resolve\nabc/2/something.",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_code",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_to",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "request_method",
        "description": null,
        "type": { "name": "PageRequestMethod", "path": "enum/pagerequestmethod", "info": "PageRequestMethod" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "response_headers",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "searchable",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "static_cache_expire",
        "description": "the number of seconds for which this page will be cached as a static html\npage; works only for not logged in users, skips any authorization",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_page_delete",
    "description": "Creates page",
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "authorization_policies",
        "description": "associated authorization policies",
        "type": { "name": "AuthorizationPolicy", "path": "object/authorizationpolicy", "info": "[AuthorizationPolicy!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "content",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "dynamic_cache_expire",
        "description": "the number of seconds for which this page will be cached; set\ndynamic_cache_layout accordingly to your scenario. Triggers authorization. Use\nonly if cache_key cannot be easily determined (for example for search results page)",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "dynamic_cache_key",
        "description": "liquid which evaluates to the cache key, for example {{ context.page.slug\n}}/{{ context.params.slug2 }}for page with slug \"abc\" will cache separately\n/abc/1 and /abc/2, however abc/1/1 will return the same value as abc/1/2. If\nleft blank, the full url will be used.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "dynamic_cache_layout",
        "description": "defines whether layout should be cached as well, or only page. Usually it is\nnot possible to cache layout due to dynamic data in it, like name of a logged\nin user, hence default is false.",
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "format",
        "description": null,
        "type": { "name": "PageFormat", "path": "enum/pageformat", "info": "PageFormat" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "handler",
        "description": null,
        "type": { "name": "PageRequestMethod", "path": "enum/pagerequestmethod", "info": "PageRequestMethod" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "layout_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "max_deep_level",
        "description": "max nesting of the url to be resolved by this slug. For example slug \"abc\"\nwith max_deep_level 2 will resolve /abc, abc/1, abc/2, but will NOT resolve\nabc/2/something.",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_code",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_to",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "request_method",
        "description": null,
        "type": { "name": "PageRequestMethod", "path": "enum/pagerequestmethod", "info": "PageRequestMethod" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "response_headers",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "searchable",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "static_cache_expire",
        "description": "the number of seconds for which this page will be cached as a static html\npage; works only for not logged in users, skips any authorization",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_page_update",
    "description": "Creates page",
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "page",
        "description": null,
        "type": { "name": "UpdatePageInputType", "path": "input_object/updatepageinputtype", "info": "UpdatePageInputType!" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "authorization_policies",
        "description": "associated authorization policies",
        "type": { "name": "AuthorizationPolicy", "path": "object/authorizationpolicy", "info": "[AuthorizationPolicy!]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "content",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "dynamic_cache_expire",
        "description": "the number of seconds for which this page will be cached; set\ndynamic_cache_layout accordingly to your scenario. Triggers authorization. Use\nonly if cache_key cannot be easily determined (for example for search results page)",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "dynamic_cache_key",
        "description": "liquid which evaluates to the cache key, for example {{ context.page.slug\n}}/{{ context.params.slug2 }}for page with slug \"abc\" will cache separately\n/abc/1 and /abc/2, however abc/1/1 will return the same value as abc/1/2. If\nleft blank, the full url will be used.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "dynamic_cache_layout",
        "description": "defines whether layout should be cached as well, or only page. Usually it is\nnot possible to cache layout due to dynamic data in it, like name of a logged\nin user, hence default is false.",
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "format",
        "description": null,
        "type": { "name": "PageFormat", "path": "enum/pageformat", "info": "PageFormat" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "handler",
        "description": null,
        "type": { "name": "PageRequestMethod", "path": "enum/pagerequestmethod", "info": "PageRequestMethod" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "layout_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "max_deep_level",
        "description": "max nesting of the url to be resolved by this slug. For example slug \"abc\"\nwith max_deep_level 2 will resolve /abc, abc/1, abc/2, but will NOT resolve\nabc/2/something.",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_code",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "redirect_to",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "request_method",
        "description": null,
        "type": { "name": "PageRequestMethod", "path": "enum/pagerequestmethod", "info": "PageRequestMethod" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "response_headers",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "searchable",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "static_cache_expire",
        "description": "the number of seconds for which this page will be cached as a static html\npage; works only for not logged in users, skips any authorization",
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_property_create",
    "description": "Creates property",
    "input_fields": [
      {
        "notices": [],
        "name": "property",
        "description": null,
        "type": {
          "name": "StandalonePropertyInputType",
          "path": "input_object/standalonepropertyinputtype",
          "info": "StandalonePropertyInputType!"
        },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "attribute_type",
        "description": "Type of the property",
        "type": { "name": "PropertyTypeEnum", "path": "enum/propertytypeenum", "info": "PropertyTypeEnum" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "default_value",
        "description": "Default value for new objects",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "Name of the property",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "target_id",
        "description": "Id of the schema to which this property definition belongs",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "target_type",
        "description": "Type of the schema to which this property definition belongs",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_property_delete",
    "description": "Creates property",
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "attribute_type",
        "description": "Type of the property",
        "type": { "name": "PropertyTypeEnum", "path": "enum/propertytypeenum", "info": "PropertyTypeEnum" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "default_value",
        "description": "Default value for new objects",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "Name of the property",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "target_id",
        "description": "Id of the schema to which this property definition belongs",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "target_type",
        "description": "Type of the schema to which this property definition belongs",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_property_update",
    "description": "Creates property",
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "property",
        "description": null,
        "type": {
          "name": "UpdateStandalonePropertyInputType",
          "path": "input_object/updatestandalonepropertyinputtype",
          "info": "UpdateStandalonePropertyInputType!"
        },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "attribute_type",
        "description": "Type of the property",
        "type": { "name": "PropertyTypeEnum", "path": "enum/propertytypeenum", "info": "PropertyTypeEnum" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "default_value",
        "description": "Default value for new objects",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "Name of the property",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "target_id",
        "description": "Id of the schema to which this property definition belongs",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "target_type",
        "description": "Type of the schema to which this property definition belongs",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_sms_notification_create",
    "description": "Creates sms_notification schema",
    "input_fields": [
      {
        "notices": [],
        "name": "sms_notification",
        "description": null,
        "type": {
          "name": "SmsNotificationInputType",
          "path": "input_object/smsnotificationinputtype",
          "info": "SmsNotificationInputType!"
        },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "content",
        "description": "liquid code to evaluate to valid text. If sms is triggered via form\nconfiguration, You have access to \"form\" variable, with data specified in the configuration.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "delay_by",
        "description": "liquid code which should evaluate to integer. Delays invoking the job by\nspecified number of minutes. Useful to invoke code at certain point in time,\nfor example 1 hour before something etc. To calculate proper number you can\nuse time_diff filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configurations",
        "description": "form configurations which trigger the sms",
        "type": { "name": "FormConfiguration", "path": "object/formconfiguration", "info": "[FormConfiguration!]" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "name of the sms, which is used in form_configurations or mutation to trigger it",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "to",
        "description": "liquid code to evaluate to valid mobile number with country code, for example\n+1 541 754 3010.  Useful filter to build valid mobile number is\n\"$to_mobile_number\".",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "trigger_condition",
        "description": "liquid code which should evaluate to true if the sms should be sent",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_sms_notification_delete",
    "description": "Creates sms_notification schema",
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "content",
        "description": "liquid code to evaluate to valid text. If sms is triggered via form\nconfiguration, You have access to \"form\" variable, with data specified in the configuration.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "delay_by",
        "description": "liquid code which should evaluate to integer. Delays invoking the job by\nspecified number of minutes. Useful to invoke code at certain point in time,\nfor example 1 hour before something etc. To calculate proper number you can\nuse time_diff filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configurations",
        "description": "form configurations which trigger the sms",
        "type": { "name": "FormConfiguration", "path": "object/formconfiguration", "info": "[FormConfiguration!]" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "name of the sms, which is used in form_configurations or mutation to trigger it",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "to",
        "description": "liquid code to evaluate to valid mobile number with country code, for example\n+1 541 754 3010.  Useful filter to build valid mobile number is\n\"$to_mobile_number\".",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "trigger_condition",
        "description": "liquid code which should evaluate to true if the sms should be sent",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_sms_notification_update",
    "description": "Creates sms_notification schema",
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "sms_notification",
        "description": null,
        "type": {
          "name": "UpdateSmsNotificationInputType",
          "path": "input_object/updatesmsnotificationinputtype",
          "info": "UpdateSmsNotificationInputType!"
        },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "content",
        "description": "liquid code to evaluate to valid text. If sms is triggered via form\nconfiguration, You have access to \"form\" variable, with data specified in the configuration.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "delay_by",
        "description": "liquid code which should evaluate to integer. Delays invoking the job by\nspecified number of minutes. Useful to invoke code at certain point in time,\nfor example 1 hour before something etc. To calculate proper number you can\nuse time_diff filter.",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configurations",
        "description": "form configurations which trigger the sms",
        "type": { "name": "FormConfiguration", "path": "object/formconfiguration", "info": "[FormConfiguration!]" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "name of the sms, which is used in form_configurations or mutation to trigger it",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "to",
        "description": "liquid code to evaluate to valid mobile number with country code, for example\n+1 541 754 3010.  Useful filter to build valid mobile number is\n\"$to_mobile_number\".",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "trigger_condition",
        "description": "liquid code which should evaluate to true if the sms should be sent",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_transactable_schema_create",
    "description": "Creates transactable schema",
    "input_fields": [
      {
        "notices": [],
        "name": "transactable_schema",
        "description": null,
        "type": {
          "name": "TransactableSchemaInputType",
          "path": "input_object/transactableschemainputtype",
          "info": "TransactableSchemaInputType!"
        },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "fields",
        "description": "Deprecated, use properties instead.",
        "is_deprecated": true,
        "deprecation_reason": "Use properties",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "parameterized_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of properties attributes to be included in the results",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_transactable_schema_delete",
    "description": "Creates transactable schema",
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "fields",
        "description": "Deprecated, use properties instead.",
        "is_deprecated": true,
        "deprecation_reason": "Use properties",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "parameterized_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of properties attributes to be included in the results",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_transactable_schema_update",
    "description": "Creates transactable schema",
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "transactable_schema",
        "description": null,
        "type": {
          "name": "UpdateTransactableSchemaInputType",
          "path": "input_object/updatetransactableschemainputtype",
          "info": "UpdateTransactableSchemaInputType!"
        },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "fields",
        "description": "Deprecated, use properties instead.",
        "is_deprecated": true,
        "deprecation_reason": "Use properties",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "parameterized_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of properties attributes to be included in the results",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_user_profile_schema_create",
    "description": "Creates user_profile schema",
    "input_fields": [
      {
        "notices": [],
        "name": "user_profile_schema",
        "description": null,
        "type": {
          "name": "UserProfileSchemaInputType",
          "path": "input_object/userprofileschemainputtype",
          "info": "UserProfileSchemaInputType!"
        },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "fields",
        "description": "Deprecated, use properties instead.",
        "is_deprecated": true,
        "deprecation_reason": "Use properties",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "parameterized_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of properties attributes to be included in the results",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_user_profile_schema_delete",
    "description": "Creates user_profile schema",
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "fields",
        "description": "Deprecated, use properties instead.",
        "is_deprecated": true,
        "deprecation_reason": "Use properties",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "parameterized_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of properties attributes to be included in the results",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "admin_user_profile_schema_update",
    "description": "Creates user_profile schema",
    "input_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "user_profile_schema",
        "description": null,
        "type": {
          "name": "UpdateUserProfileSchemaInputType",
          "path": "input_object/updateuserprofileschemainputtype",
          "info": "UpdateUserProfileSchemaInputType!"
        },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "fields",
        "description": "Deprecated, use properties instead.",
        "is_deprecated": true,
        "deprecation_reason": "Use properties",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "metadata",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "parameterized_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "physical_file_path",
        "description": "defines where the file definition will be available after pull; should start\nwith the module name follow by private/public scope, for example\nmanual/public/<rest of the path, same as in marketplace_builder>",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of properties attributes to be included in the results",
        "type": { "name": "Property", "path": "object/property", "info": "[Property!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "api_call_send",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "data",
        "description": "Variables that will be accesible in liquid",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "template",
        "description": "Template defined in marketplace_builder/notifications/api_call_notifications",
        "type": {
          "name": "NotificationTemplateInput",
          "path": "input_object/notificationtemplateinput",
          "info": "NotificationTemplateInput"
        },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "errors",
        "description": null,
        "type": { "name": "BaseError", "path": "object/baseerror", "info": "[BaseError!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "response",
        "description": null,
        "type": { "name": "Response", "path": "object/response", "info": "Response" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "constant_set",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "name",
        "description": "Name of the constant you want to set",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "value",
        "description": "Value of the constant, which will be securely store",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "deleted_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "Name of the constant",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "value",
        "description": "Decrypted value of a constant",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "constant_unset",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "name",
        "description": "Name of the constant you want to unset",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "deleted_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": "Name of the constant",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "value",
        "description": "Decrypted value of a constant",
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "credit_card_create",
    "description": "Creates credit card",
    "input_fields": [
      {
        "notices": [],
        "name": "credit_card",
        "description": null,
        "type": { "name": "CreditCardInputType", "path": "input_object/creditcardinputtype", "info": "CreditCardInputType!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "default_card",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "instance_client_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_method_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "token",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "credit_card_delete",
    "description": "destroys credit card",
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "default_card",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "instance_client_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_method_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "token",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "custom_attachment_create",
    "description": "Creates a CustomAttachment",
    "input_fields": [
      {
        "notices": [],
        "name": "custom_attachment",
        "description": null,
        "type": {
          "name": "CustomAttachmentInputType",
          "path": "input_object/customattachmentinputtype",
          "info": "CustomAttachmentInputType!"
        },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "file_url",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ]
  },
  {
    "notices": [],
    "name": "custom_attachment_delete",
    "description": "Remove a custom attachment",
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "file_url",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ]
  },
  {
    "notices": [],
    "name": "custom_attachment_update",
    "description": "Updates a CustomAttachment",
    "input_fields": [
      {
        "notices": [],
        "name": "custom_attachment",
        "description": null,
        "type": {
          "name": "UpdateCustomAttachmentInputType",
          "path": "input_object/updatecustomattachmentinputtype",
          "info": "UpdateCustomAttachmentInputType!"
        },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "file_url",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ]
  },
  {
    "notices": [],
    "name": "custom_image_create",
    "description": "Creates a CustomImage",
    "input_fields": [
      {
        "notices": [],
        "name": "custom_image",
        "description": null,
        "type": { "name": "NewCustomImageInputType", "path": "input_object/newcustomimageinputtype", "info": "NewCustomImageInputType!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "file_url",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "uploader_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "custom_image_delete",
    "description": "Remove a custom image",
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "file_url",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "uploader_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "custom_image_update",
    "description": "Updates a CustomImage",
    "input_fields": [
      {
        "notices": [],
        "name": "custom_image",
        "description": null,
        "type": { "name": "CustomImageInputType", "path": "input_object/customimageinputtype", "info": "CustomImageInputType!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "file_url",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "uploader_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "customization_create",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "customization",
        "description": null,
        "type": { "name": "CustomizationInputType", "path": "input_object/customizationinputtype", "info": "CustomizationInputType!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "address",
        "description": "Fetch address by name, e.g: address: address(name: \"office_address\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "addresses",
        "description": "Fetch all addresses, optionally you can filter results by name, e.g: home: addresses(name: \"home\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "attachment",
        "description": "Fetch attachment by name, e.g: sales_report: attachment(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g: sales_reports: attachments(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "custom_address",
        "description": "Fetch address by name, e.g: address: custom_address(name: \"office_address\")",
        "is_deprecated": true,
        "deprecation_reason": "Use address",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_addresses",
        "description": "Fetch all addresses, optionaly you can filter results by name, e.g: home: custom_addresses(name: \"home\")",
        "is_deprecated": true,
        "deprecation_reason": "Use addresses",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_attachment",
        "description": "Fetch attachment by name, e.g: sales_report: custom_attachment(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachment",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g:\nsales_reports: custom_attachments(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachments",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_image",
        "description": "Fetch image by name, e.g: header: custom_image(name: \"header\")",
        "is_deprecated": true,
        "deprecation_reason": "Use image",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: custom_images(name: \"cat\")",
        "is_deprecated": true,
        "deprecation_reason": "Use images",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "customizable",
        "description": null,
        "type": { "name": "Customizable", "path": "union/customizable", "info": "Customizable" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizable_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizable_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "deleted_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "human_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "image",
        "description": "Fetch image by name, e.g: header: image(name: \"header\")",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: images(name: \"cat\")",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "model",
        "description": "Defines belongs-to relation with other model, e.g: parent: model(model_name:\n\"parent\", join_on_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "ListingsCustomization" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "String" }
          }
        ]
      },
      {
        "notices": [],
        "name": "models",
        "description": "Defines has-many relation with other model, e.g: children: models(model_name:\n\"child\", join_on_property: \"parent_id\", foreign_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "[ListingsCustomization]" },
        "arguments": [
          {
            "name": "foreign_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "join_on_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "[String]" }
          }
        ]
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of all properties assigned to the object.",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Fetch any property by name, e.g: hair_color: property(name: \"hair_color\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_array",
        "description": "Fetch any property of Array type by name, it returns Array in contrast to\n\"property\" which returns String. E.g: todo_list: property_array(name: \"todo_list\")",
        "type": { "name": "String", "path": "scalar/string", "info": "[String]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "remote_model",
        "description": "Defines relation object accessible over HTTP in JSON collection identified by it's ID.",
        "type": { "name": "Customization", "path": "object/customization", "info": "Customization" },
        "arguments": [
          {
            "name": "endpoint",
            "description": "Endpoint that will return resources for given ids in json format",
            "type": { "name": "Endpoint", "path": "input_object/endpoint", "info": "Endpoint!" }
          },
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          }
        ]
      },
      {
        "notices": [],
        "name": "sort_score",
        "description": "when sorting by distance - field contains distance to target location",
        "is_deprecated": true,
        "deprecation_reason": "not supported everywhere",
        "type": { "name": "Int", "path": "scalar/int", "info": "[Int]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user",
        "description": "Defines relation with other user, e.g: invited_by: user(join_on_property: \"invited_by_id\") { id }",
        "type": { "name": "User", "path": "object/user", "info": "User" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": null,
            "type": { "name": "String", "path": "scalar/string", "info": "String" },
            "default_value": "user_id"
          }
        ]
      },
      {
        "notices": [],
        "name": "user_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "customization_delete",
    "description": "Remove a customization",
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "address",
        "description": "Fetch address by name, e.g: address: address(name: \"office_address\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "addresses",
        "description": "Fetch all addresses, optionally you can filter results by name, e.g: home: addresses(name: \"home\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "attachment",
        "description": "Fetch attachment by name, e.g: sales_report: attachment(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g: sales_reports: attachments(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "custom_address",
        "description": "Fetch address by name, e.g: address: custom_address(name: \"office_address\")",
        "is_deprecated": true,
        "deprecation_reason": "Use address",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_addresses",
        "description": "Fetch all addresses, optionaly you can filter results by name, e.g: home: custom_addresses(name: \"home\")",
        "is_deprecated": true,
        "deprecation_reason": "Use addresses",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_attachment",
        "description": "Fetch attachment by name, e.g: sales_report: custom_attachment(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachment",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g:\nsales_reports: custom_attachments(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachments",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_image",
        "description": "Fetch image by name, e.g: header: custom_image(name: \"header\")",
        "is_deprecated": true,
        "deprecation_reason": "Use image",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: custom_images(name: \"cat\")",
        "is_deprecated": true,
        "deprecation_reason": "Use images",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "customizable",
        "description": null,
        "type": { "name": "Customizable", "path": "union/customizable", "info": "Customizable" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizable_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizable_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "deleted_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "human_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "image",
        "description": "Fetch image by name, e.g: header: image(name: \"header\")",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: images(name: \"cat\")",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "model",
        "description": "Defines belongs-to relation with other model, e.g: parent: model(model_name:\n\"parent\", join_on_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "ListingsCustomization" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "String" }
          }
        ]
      },
      {
        "notices": [],
        "name": "models",
        "description": "Defines has-many relation with other model, e.g: children: models(model_name:\n\"child\", join_on_property: \"parent_id\", foreign_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "[ListingsCustomization]" },
        "arguments": [
          {
            "name": "foreign_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "join_on_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "[String]" }
          }
        ]
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of all properties assigned to the object.",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Fetch any property by name, e.g: hair_color: property(name: \"hair_color\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_array",
        "description": "Fetch any property of Array type by name, it returns Array in contrast to\n\"property\" which returns String. E.g: todo_list: property_array(name: \"todo_list\")",
        "type": { "name": "String", "path": "scalar/string", "info": "[String]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "remote_model",
        "description": "Defines relation object accessible over HTTP in JSON collection identified by it's ID.",
        "type": { "name": "Customization", "path": "object/customization", "info": "Customization" },
        "arguments": [
          {
            "name": "endpoint",
            "description": "Endpoint that will return resources for given ids in json format",
            "type": { "name": "Endpoint", "path": "input_object/endpoint", "info": "Endpoint!" }
          },
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          }
        ]
      },
      {
        "notices": [],
        "name": "sort_score",
        "description": "when sorting by distance - field contains distance to target location",
        "is_deprecated": true,
        "deprecation_reason": "not supported everywhere",
        "type": { "name": "Int", "path": "scalar/int", "info": "[Int]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user",
        "description": "Defines relation with other user, e.g: invited_by: user(join_on_property: \"invited_by_id\") { id }",
        "type": { "name": "User", "path": "object/user", "info": "User" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": null,
            "type": { "name": "String", "path": "scalar/string", "info": "String" },
            "default_value": "user_id"
          }
        ]
      },
      {
        "notices": [],
        "name": "user_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "customization_update",
    "description": "Updates a customization",
    "input_fields": [
      {
        "notices": [],
        "name": "customization",
        "description": null,
        "type": { "name": "CustomizationInputType", "path": "input_object/customizationinputtype", "info": "CustomizationInputType!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "address",
        "description": "Fetch address by name, e.g: address: address(name: \"office_address\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "addresses",
        "description": "Fetch all addresses, optionally you can filter results by name, e.g: home: addresses(name: \"home\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "attachment",
        "description": "Fetch attachment by name, e.g: sales_report: attachment(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g: sales_reports: attachments(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "custom_address",
        "description": "Fetch address by name, e.g: address: custom_address(name: \"office_address\")",
        "is_deprecated": true,
        "deprecation_reason": "Use address",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_addresses",
        "description": "Fetch all addresses, optionaly you can filter results by name, e.g: home: custom_addresses(name: \"home\")",
        "is_deprecated": true,
        "deprecation_reason": "Use addresses",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_attachment",
        "description": "Fetch attachment by name, e.g: sales_report: custom_attachment(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachment",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g:\nsales_reports: custom_attachments(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachments",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_image",
        "description": "Fetch image by name, e.g: header: custom_image(name: \"header\")",
        "is_deprecated": true,
        "deprecation_reason": "Use image",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: custom_images(name: \"cat\")",
        "is_deprecated": true,
        "deprecation_reason": "Use images",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "customizable",
        "description": null,
        "type": { "name": "Customizable", "path": "union/customizable", "info": "Customizable" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizable_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "customizable_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "deleted_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "human_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "image",
        "description": "Fetch image by name, e.g: header: image(name: \"header\")",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: images(name: \"cat\")",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "model",
        "description": "Defines belongs-to relation with other model, e.g: parent: model(model_name:\n\"parent\", join_on_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "ListingsCustomization" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "String" }
          }
        ]
      },
      {
        "notices": [],
        "name": "models",
        "description": "Defines has-many relation with other model, e.g: children: models(model_name:\n\"child\", join_on_property: \"parent_id\", foreign_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "[ListingsCustomization]" },
        "arguments": [
          {
            "name": "foreign_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "join_on_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "[String]" }
          }
        ]
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of all properties assigned to the object.",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Fetch any property by name, e.g: hair_color: property(name: \"hair_color\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_array",
        "description": "Fetch any property of Array type by name, it returns Array in contrast to\n\"property\" which returns String. E.g: todo_list: property_array(name: \"todo_list\")",
        "type": { "name": "String", "path": "scalar/string", "info": "[String]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "remote_model",
        "description": "Defines relation object accessible over HTTP in JSON collection identified by it's ID.",
        "type": { "name": "Customization", "path": "object/customization", "info": "Customization" },
        "arguments": [
          {
            "name": "endpoint",
            "description": "Endpoint that will return resources for given ids in json format",
            "type": { "name": "Endpoint", "path": "input_object/endpoint", "info": "Endpoint!" }
          },
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          }
        ]
      },
      {
        "notices": [],
        "name": "sort_score",
        "description": "when sorting by distance - field contains distance to target location",
        "is_deprecated": true,
        "deprecation_reason": "not supported everywhere",
        "type": { "name": "Int", "path": "scalar/int", "info": "[Int]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user",
        "description": "Defines relation with other user, e.g: invited_by: user(join_on_property: \"invited_by_id\") { id }",
        "type": { "name": "User", "path": "object/user", "info": "User" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": null,
            "type": { "name": "String", "path": "scalar/string", "info": "String" },
            "default_value": "user_id"
          }
        ]
      },
      {
        "notices": [],
        "name": "user_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "customizations_delete_all",
    "description": "Remove all customizations, beware there is no comming back!",
    "input_fields": [
      {
        "notices": [],
        "name": "all_custom_model_types",
        "description": "Mark this if you really want to remove all customizations",
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "custom_model_type_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "count",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "email_send",
    "description": "Email will be queued to sending",
    "input_fields": [
      {
        "notices": [],
        "name": "data",
        "description": "Variables that will be accesible in liquild",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "template",
        "description": "Template defined in marketplace_builder/notifications/email_notifications",
        "type": {
          "name": "NotificationTemplateInput",
          "path": "input_object/notificationtemplateinput",
          "info": "NotificationTemplateInput"
        },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "errors",
        "description": null,
        "type": { "name": "BaseError", "path": "object/baseerror", "info": "[BaseError!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "is_scheduled_to_send",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "import_models",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "models",
        "description": null,
        "type": { "name": "CustomizationImport", "path": "input_object/customizationimport", "info": "[CustomizationImport!]!" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "external_ids",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "ids",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID!]!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "import_transactables",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "transactables",
        "description": null,
        "type": { "name": "TransactableImport", "path": "input_object/transactableimport", "info": "[TransactableImport!]!" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "external_ids",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "ids",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID!]!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "import_users",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "users",
        "description": null,
        "type": { "name": "UserImport", "path": "input_object/userimport", "info": "[UserImport!]!" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "external_ids",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID!]!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "ids",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID!]!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "log",
    "description": "Creates a MarketplaceLogEntryMutation",
    "input_fields": [
      {
        "notices": [],
        "name": "message",
        "description": null,
        "type": { "name": "Any", "path": "scalar/any", "info": "Any!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "type",
        "description": null,
        "type": { "name": "LogEntryType", "path": "enum/logentrytype", "info": "LogEntryType!" },
        "arguments": []
      }
    ],
    "return_fields": [
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "message",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "payment_charge",
    "description": "Charges payment",
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "additional_tax_price",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "additional_tax_price_cents",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "currency",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "direct_charge",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "failed_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" }, "arguments": [] },
      {
        "notices": [],
        "name": "included_tax_price",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "included_tax_price_cents",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "merchant_account",
        "description": null,
        "type": { "name": "MerchantAccount", "path": "object/merchantaccount", "info": "MerchantAccount" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "paid_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payable_id",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payable_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payer",
        "description": null,
        "type": { "name": "User", "path": "object/user", "info": "User!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_gateway",
        "description": null,
        "type": { "name": "PaymentGateway", "path": "object/paymentgateway", "info": "PaymentGateway" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_gateway_fee_cents",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_method",
        "description": null,
        "type": { "name": "PaymentMethod", "path": "object/paymentmethod", "info": "PaymentMethod" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_transfers",
        "description": null,
        "type": { "name": "PaymentTransfer", "path": "object/paymenttransfer", "info": "[PaymentTransfer]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "receiver",
        "description": null,
        "type": { "name": "User", "path": "object/user", "info": "User!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "refunds",
        "description": null,
        "type": { "name": "Refund", "path": "object/refund", "info": "[Refund]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "service_fee_payer",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "service_fee_receiver",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "state",
        "description": null,
        "type": { "name": "PaymentState", "path": "enum/paymentstate", "info": "PaymentState" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "subtotal_amount",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_amount",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_amount_cents",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "transferable_amount",
        "description": "Amount that can be transferred to receiver",
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "transferable_amount_cents",
        "description": "Amount cents that can be transferred to receiver",
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "payment_create",
    "description": "Creates payment",
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment",
        "description": null,
        "type": { "name": "PaymentInputType", "path": "input_object/paymentinputtype", "info": "PaymentInputType!" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "errors",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "result",
        "description": null,
        "type": { "name": "Payment", "path": "object/payment", "info": "Payment" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "success",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "payment_delete",
    "description": "Deletes payment",
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "additional_tax_price",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "additional_tax_price_cents",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "currency",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "direct_charge",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "failed_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" }, "arguments": [] },
      {
        "notices": [],
        "name": "included_tax_price",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "included_tax_price_cents",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "merchant_account",
        "description": null,
        "type": { "name": "MerchantAccount", "path": "object/merchantaccount", "info": "MerchantAccount" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "paid_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payable_id",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payable_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payer",
        "description": null,
        "type": { "name": "User", "path": "object/user", "info": "User!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_gateway",
        "description": null,
        "type": { "name": "PaymentGateway", "path": "object/paymentgateway", "info": "PaymentGateway" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_gateway_fee_cents",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_method",
        "description": null,
        "type": { "name": "PaymentMethod", "path": "object/paymentmethod", "info": "PaymentMethod" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_transfers",
        "description": null,
        "type": { "name": "PaymentTransfer", "path": "object/paymenttransfer", "info": "[PaymentTransfer]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "receiver",
        "description": null,
        "type": { "name": "User", "path": "object/user", "info": "User!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "refunds",
        "description": null,
        "type": { "name": "Refund", "path": "object/refund", "info": "[Refund]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "service_fee_payer",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "service_fee_receiver",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "state",
        "description": null,
        "type": { "name": "PaymentState", "path": "enum/paymentstate", "info": "PaymentState" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "subtotal_amount",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_amount",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_amount_cents",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "transferable_amount",
        "description": "Amount that can be transferred to receiver",
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "transferable_amount_cents",
        "description": "Amount cents that can be transferred to receiver",
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "payment_refund",
    "description": "Refunds payment",
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "payment",
        "description": null,
        "type": { "name": "RefundPaymentInputType", "path": "input_object/refundpaymentinputtype", "info": "RefundPaymentInputType!" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "errors",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "result",
        "description": null,
        "type": { "name": "Payment", "path": "object/payment", "info": "Payment" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "success",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "payment_transfer_create",
    "description": "Creates payment transfer for payment",
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_transfer",
        "description": null,
        "type": {
          "name": "PaymentTransferInputType",
          "path": "input_object/paymenttransferinputtype",
          "info": "PaymentTransferInputType!"
        },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "errors",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "result",
        "description": null,
        "type": { "name": "PaymentTransfer", "path": "object/paymenttransfer", "info": "PaymentTransfer" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "success",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "payment_transfer_payout",
    "description": "Payout transfer to external bank account",
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "errors",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "result",
        "description": null,
        "type": { "name": "PaymentTransfer", "path": "object/paymenttransfer", "info": "PaymentTransfer" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "success",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "payment_transfer_process",
    "description": "Process payment transfer in payment gateway",
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "errors",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "result",
        "description": null,
        "type": { "name": "PaymentTransfer", "path": "object/paymenttransfer", "info": "PaymentTransfer" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "success",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "payment_transfer_update",
    "description": "Updates payment transfer",
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "payment_transfer",
        "description": null,
        "type": {
          "name": "PaymentTransferInputType",
          "path": "input_object/paymenttransferinputtype",
          "info": "PaymentTransferInputType!"
        },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "errors",
        "description": null,
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "result",
        "description": null,
        "type": { "name": "PaymentTransfer", "path": "object/paymenttransfer", "info": "PaymentTransfer" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "success",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "payment_update",
    "description": "Updates payment",
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "payment",
        "description": null,
        "type": { "name": "UpdatePaymentInputType", "path": "input_object/updatepaymentinputtype", "info": "UpdatePaymentInputType" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "additional_tax_price",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "additional_tax_price_cents",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "currency",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "direct_charge",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "failed_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" }, "arguments": [] },
      {
        "notices": [],
        "name": "included_tax_price",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "included_tax_price_cents",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "merchant_account",
        "description": null,
        "type": { "name": "MerchantAccount", "path": "object/merchantaccount", "info": "MerchantAccount" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "paid_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payable_id",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payable_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payer",
        "description": null,
        "type": { "name": "User", "path": "object/user", "info": "User!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_gateway",
        "description": null,
        "type": { "name": "PaymentGateway", "path": "object/paymentgateway", "info": "PaymentGateway" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_gateway_fee_cents",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_method",
        "description": null,
        "type": { "name": "PaymentMethod", "path": "object/paymentmethod", "info": "PaymentMethod" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "payment_transfers",
        "description": null,
        "type": { "name": "PaymentTransfer", "path": "object/paymenttransfer", "info": "[PaymentTransfer]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "receiver",
        "description": null,
        "type": { "name": "User", "path": "object/user", "info": "User!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "refunds",
        "description": null,
        "type": { "name": "Refund", "path": "object/refund", "info": "[Refund]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "service_fee_payer",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "service_fee_receiver",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "state",
        "description": null,
        "type": { "name": "PaymentState", "path": "enum/paymentstate", "info": "PaymentState" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "subtotal_amount",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_amount",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "total_amount_cents",
        "description": null,
        "type": { "name": "Float", "path": "scalar/float", "info": "Float!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "transferable_amount",
        "description": "Amount that can be transferred to receiver",
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "transferable_amount_cents",
        "description": "Amount cents that can be transferred to receiver",
        "type": { "name": "Float", "path": "scalar/float", "info": "Float" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "relationship_create",
    "description": "Creates an relationship",
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "address",
        "description": "Fetch address by name, e.g: address: address(name: \"office_address\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "addresses",
        "description": "Fetch all addresses, optionally you can filter results by name, e.g: home: addresses(name: \"home\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "attachment",
        "description": "Fetch attachment by name, e.g: sales_report: attachment(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g: sales_reports: attachments(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "creator",
        "description": null,
        "type": { "name": "User", "path": "object/user", "info": "User" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "creator_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "custom_address",
        "description": "Fetch address by name, e.g: address: custom_address(name: \"office_address\")",
        "is_deprecated": true,
        "deprecation_reason": "Use address",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_addresses",
        "description": "Fetch all addresses, optionaly you can filter results by name, e.g: home: custom_addresses(name: \"home\")",
        "is_deprecated": true,
        "deprecation_reason": "Use addresses",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_attachment",
        "description": "Fetch attachment by name, e.g: sales_report: custom_attachment(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachment",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g:\nsales_reports: custom_attachments(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachments",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_image",
        "description": "Fetch image by name, e.g: header: custom_image(name: \"header\")",
        "is_deprecated": true,
        "deprecation_reason": "Use image",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: custom_images(name: \"cat\")",
        "is_deprecated": true,
        "deprecation_reason": "Use images",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "customizations",
        "description": "Fetch any customization by name or id, ex: hair_color: customizations(name: \"hair_color\")",
        "type": { "name": "Customization", "path": "object/customization", "info": "[Customization]" },
        "arguments": [
          { "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } },
          { "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }
        ]
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "image",
        "description": "Fetch image by name, e.g: header: image(name: \"header\")",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: images(name: \"cat\")",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of all properties assigned to the object.",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Fetch any property by name, e.g: hair_color: property(name: \"hair_color\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_array",
        "description": "Fetch any property of Array type by name, it returns Array in contrast to\n\"property\" which returns String. E.g: todo_list: property_array(name: \"todo_list\")",
        "type": { "name": "String", "path": "scalar/string", "info": "[String]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "session_create_field",
    "description": "Adds a field to session",
    "input_fields": [
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "value",
        "description": null,
        "type": { "name": "Any", "path": "scalar/any", "info": "Any!" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "session_create_field",
        "description": "Adds a field to session",
        "is_deprecated": true,
        "deprecation_reason": "Use session tag",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": [
          { "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } },
          { "name": "value", "description": null, "type": { "name": "Any", "path": "scalar/any", "info": "Any!" } }
        ]
      }
    ]
  },
  {
    "notices": [],
    "name": "session_delete_field",
    "description": "Adds a field to session",
    "input_fields": [
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "session_delete_field",
        "description": "Adds a field to session",
        "is_deprecated": true,
        "deprecation_reason": "Use session tag",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      }
    ]
  },
  {
    "notices": [],
    "name": "transactable_create",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "transactable",
        "description": null,
        "type": { "name": "TransactableInputType", "path": "input_object/transactableinputtype", "info": "TransactableInputType!" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "creator",
        "description": null,
        "type": { "name": "User", "path": "object/user", "info": "User!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "creator_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "custom_address",
        "description": null,
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_image",
        "description": null,
        "type": { "name": "ListingImage", "path": "object/listingimage", "info": "[ListingImage]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "customizations",
        "description": "Fetch any customization by name or id, ex: hair_color: customization(name: \"hair_color\")",
        "type": { "name": "Customization", "path": "object/customization", "info": "[Customization]!" },
        "arguments": [
          { "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } },
          { "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } },
          { "name": "user_id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } }
        ]
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "is_deleted",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "model",
        "description": "Defines belongs-to relation with other model, e.g: parent: model(model_name:\n\"parent\", join_on_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "ListingsCustomization" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "String" }
          }
        ]
      },
      {
        "notices": [],
        "name": "models",
        "description": "Defines has-many relation with other model, e.g: children: models(model_name:\n\"child\", join_on_property: \"parent_id\", foreign_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "[ListingsCustomization]" },
        "arguments": [
          {
            "name": "foreign_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "join_on_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "[String]" }
          }
        ]
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Fetch any Property by name, ex: hair_color: property(name: \"hair_color\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_array",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "[String]!" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user",
        "description": "Defines relation with other user, e.g: invited_by: user(join_on_property: \"invited_by_id\") { id }",
        "type": { "name": "User", "path": "object/user", "info": "User" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": null,
            "type": { "name": "String", "path": "scalar/string", "info": "String" },
            "default_value": "user_id"
          }
        ]
      }
    ]
  },
  {
    "notices": [],
    "name": "transactable_delete",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "creator",
        "description": null,
        "type": { "name": "User", "path": "object/user", "info": "User!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "creator_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "custom_address",
        "description": null,
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_image",
        "description": null,
        "type": { "name": "ListingImage", "path": "object/listingimage", "info": "[ListingImage]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "customizations",
        "description": "Fetch any customization by name or id, ex: hair_color: customization(name: \"hair_color\")",
        "type": { "name": "Customization", "path": "object/customization", "info": "[Customization]!" },
        "arguments": [
          { "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } },
          { "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } },
          { "name": "user_id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } }
        ]
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "is_deleted",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "model",
        "description": "Defines belongs-to relation with other model, e.g: parent: model(model_name:\n\"parent\", join_on_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "ListingsCustomization" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "String" }
          }
        ]
      },
      {
        "notices": [],
        "name": "models",
        "description": "Defines has-many relation with other model, e.g: children: models(model_name:\n\"child\", join_on_property: \"parent_id\", foreign_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "[ListingsCustomization]" },
        "arguments": [
          {
            "name": "foreign_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "join_on_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "[String]" }
          }
        ]
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Fetch any Property by name, ex: hair_color: property(name: \"hair_color\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_array",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "[String]!" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user",
        "description": "Defines relation with other user, e.g: invited_by: user(join_on_property: \"invited_by_id\") { id }",
        "type": { "name": "User", "path": "object/user", "info": "User" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": null,
            "type": { "name": "String", "path": "scalar/string", "info": "String" },
            "default_value": "user_id"
          }
        ]
      }
    ]
  },
  {
    "notices": [],
    "name": "transactable_update",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "transactable",
        "description": null,
        "type": { "name": "TransactableInputType", "path": "input_object/transactableinputtype", "info": "TransactableInputType!" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "creator",
        "description": null,
        "type": { "name": "User", "path": "object/user", "info": "User!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "creator_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "custom_address",
        "description": null,
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_image",
        "description": null,
        "type": { "name": "ListingImage", "path": "object/listingimage", "info": "[ListingImage]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "customizations",
        "description": "Fetch any customization by name or id, ex: hair_color: customization(name: \"hair_color\")",
        "type": { "name": "Customization", "path": "object/customization", "info": "[Customization]!" },
        "arguments": [
          { "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } },
          { "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } },
          { "name": "user_id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } }
        ]
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "is_deleted",
        "description": null,
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "model",
        "description": "Defines belongs-to relation with other model, e.g: parent: model(model_name:\n\"parent\", join_on_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "ListingsCustomization" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "String" }
          }
        ]
      },
      {
        "notices": [],
        "name": "models",
        "description": "Defines has-many relation with other model, e.g: children: models(model_name:\n\"child\", join_on_property: \"parent_id\", foreign_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "[ListingsCustomization]" },
        "arguments": [
          {
            "name": "foreign_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "join_on_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "[String]" }
          }
        ]
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Fetch any Property by name, ex: hair_color: property(name: \"hair_color\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_array",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "[String]!" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user",
        "description": "Defines relation with other user, e.g: invited_by: user(join_on_property: \"invited_by_id\") { id }",
        "type": { "name": "User", "path": "object/user", "info": "User" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": null,
            "type": { "name": "String", "path": "scalar/string", "info": "String" },
            "default_value": "user_id"
          }
        ]
      }
    ]
  },
  {
    "notices": [],
    "name": "transactables_delete_all",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "all_transactable_types",
        "description": "Mark this if you really want to remove all transactables",
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "transactable_type_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "count",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "update_models",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "models",
        "description": null,
        "type": { "name": "ModelUpdate", "path": "input_object/modelupdate", "info": "[ModelUpdate!]!" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "ids",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID!]!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "update_users",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "users",
        "description": null,
        "type": { "name": "UserUpdate", "path": "input_object/userupdate", "info": "[UserUpdate!]!" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "ids",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "[ID!]!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "user_create",
    "description": "Creates user",
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": "when not provided, you will have access to all properties",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" }, "arguments": [] },
      {
        "notices": [],
        "name": "user",
        "description": null,
        "type": { "name": "UserInputType", "path": "input_object/userinputtype", "info": "UserInputType!" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "address",
        "description": "Fetch address by name, e.g: address: address(name: \"office_address\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "addresses",
        "description": "Fetch all addresses, optionally you can filter results by name, e.g: home: addresses(name: \"home\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "attachment",
        "description": "Fetch attachment by name, e.g: sales_report: attachment(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g: sales_reports: attachments(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "authentications",
        "description": null,
        "type": { "name": "Authentication", "path": "object/authentication", "info": "[Authentication]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "bank_accounts",
        "description": null,
        "type": { "name": "BankAccount", "path": "object/bankaccount", "info": "[BankAccount]" },
        "arguments": [{ "name": "payment_method_id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } }]
      },
      {
        "notices": [],
        "name": "communication",
        "description": null,
        "type": { "name": "Communication", "path": "object/communication", "info": "Communication" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "credit_cards",
        "description": null,
        "type": { "name": "CreditCard", "path": "object/creditcard", "info": "[CreditCard]" },
        "arguments": [{ "name": "payment_method_id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } }]
      },
      {
        "notices": [],
        "name": "custom_address",
        "description": "Fetch address by name, e.g: address: custom_address(name: \"office_address\")",
        "is_deprecated": true,
        "deprecation_reason": "Use address",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_addresses",
        "description": "Fetch all addresses, optionaly you can filter results by name, e.g: home: custom_addresses(name: \"home\")",
        "is_deprecated": true,
        "deprecation_reason": "Use addresses",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_attachment",
        "description": "Fetch attachment by name, e.g: sales_report: custom_attachment(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachment",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g:\nsales_reports: custom_attachments(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachments",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_image",
        "description": "Fetch image by name, e.g: header: custom_image(name: \"header\")",
        "is_deprecated": true,
        "deprecation_reason": "Use image",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: custom_images(name: \"cat\")",
        "is_deprecated": true,
        "deprecation_reason": "Use images",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "customizations",
        "description": null,
        "type": { "name": "Customization", "path": "object/customization", "info": "[Customization]" },
        "arguments": [
          { "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } },
          {
            "name": "user_id",
            "description": "ID of user that created customization",
            "type": { "name": "ID", "path": "scalar/id", "info": "ID" }
          }
        ]
      },
      {
        "notices": [],
        "name": "email",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "first_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "image",
        "description": "Fetch image by name, e.g: header: image(name: \"header\")",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: images(name: \"cat\")",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "language",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "last_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "merchant_accounts",
        "description": null,
        "type": { "name": "MerchantAccount", "path": "object/merchantaccount", "info": "[MerchantAccount]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "middle_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "profile",
        "description": null,
        "type": { "name": "Profile", "path": "object/profile", "info": "Profile" },
        "arguments": [
          { "name": "profile_type", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }
        ]
      },
      {
        "notices": [],
        "name": "profiles",
        "description": null,
        "type": { "name": "Profile", "path": "object/profile", "info": "[Profile]" },
        "arguments": [
          { "name": "profile_type", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }
        ]
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of all properties assigned to the object.",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Fetch any property by name, e.g: hair_color: property(name: \"hair_color\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_array",
        "description": "Fetch any property of Array type by name, it returns Array in contrast to\n\"property\" which returns String. E.g: todo_list: property_array(name: \"todo_list\")",
        "type": { "name": "String", "path": "scalar/string", "info": "[String]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "social_friends",
        "description": null,
        "type": { "name": "UserCollection", "path": "object/usercollection", "info": "UserCollection" },
        "arguments": [
          { "name": "page", "description": null, "type": { "name": "Int", "path": "scalar/int", "info": "Int" }, "default_value": 1 },
          { "name": "per_page", "description": null, "type": { "name": "Int", "path": "scalar/int", "info": "Int" }, "default_value": 20 }
        ]
      },
      {
        "notices": [],
        "name": "temporary_token",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [
          {
            "name": "valid_for",
            "description": "Number of hours before the token expires",
            "type": { "name": "Int", "path": "scalar/int", "info": "Int" }
          }
        ]
      },
      {
        "notices": [],
        "name": "transactables",
        "description": null,
        "type": { "name": "Transactable", "path": "object/transactable", "info": "[Transactable]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "user_delete",
    "description": "Deletes a user",
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "address",
        "description": "Fetch address by name, e.g: address: address(name: \"office_address\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "addresses",
        "description": "Fetch all addresses, optionally you can filter results by name, e.g: home: addresses(name: \"home\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "attachment",
        "description": "Fetch attachment by name, e.g: sales_report: attachment(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g: sales_reports: attachments(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "authentications",
        "description": null,
        "type": { "name": "Authentication", "path": "object/authentication", "info": "[Authentication]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "bank_accounts",
        "description": null,
        "type": { "name": "BankAccount", "path": "object/bankaccount", "info": "[BankAccount]" },
        "arguments": [{ "name": "payment_method_id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } }]
      },
      {
        "notices": [],
        "name": "communication",
        "description": null,
        "type": { "name": "Communication", "path": "object/communication", "info": "Communication" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "credit_cards",
        "description": null,
        "type": { "name": "CreditCard", "path": "object/creditcard", "info": "[CreditCard]" },
        "arguments": [{ "name": "payment_method_id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } }]
      },
      {
        "notices": [],
        "name": "custom_address",
        "description": "Fetch address by name, e.g: address: custom_address(name: \"office_address\")",
        "is_deprecated": true,
        "deprecation_reason": "Use address",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_addresses",
        "description": "Fetch all addresses, optionaly you can filter results by name, e.g: home: custom_addresses(name: \"home\")",
        "is_deprecated": true,
        "deprecation_reason": "Use addresses",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_attachment",
        "description": "Fetch attachment by name, e.g: sales_report: custom_attachment(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachment",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g:\nsales_reports: custom_attachments(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachments",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_image",
        "description": "Fetch image by name, e.g: header: custom_image(name: \"header\")",
        "is_deprecated": true,
        "deprecation_reason": "Use image",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: custom_images(name: \"cat\")",
        "is_deprecated": true,
        "deprecation_reason": "Use images",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "customizations",
        "description": null,
        "type": { "name": "Customization", "path": "object/customization", "info": "[Customization]" },
        "arguments": [
          { "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } },
          {
            "name": "user_id",
            "description": "ID of user that created customization",
            "type": { "name": "ID", "path": "scalar/id", "info": "ID" }
          }
        ]
      },
      {
        "notices": [],
        "name": "email",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "first_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "image",
        "description": "Fetch image by name, e.g: header: image(name: \"header\")",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: images(name: \"cat\")",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "language",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "last_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "merchant_accounts",
        "description": null,
        "type": { "name": "MerchantAccount", "path": "object/merchantaccount", "info": "[MerchantAccount]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "middle_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "profile",
        "description": null,
        "type": { "name": "Profile", "path": "object/profile", "info": "Profile" },
        "arguments": [
          { "name": "profile_type", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }
        ]
      },
      {
        "notices": [],
        "name": "profiles",
        "description": null,
        "type": { "name": "Profile", "path": "object/profile", "info": "[Profile]" },
        "arguments": [
          { "name": "profile_type", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }
        ]
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of all properties assigned to the object.",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Fetch any property by name, e.g: hair_color: property(name: \"hair_color\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_array",
        "description": "Fetch any property of Array type by name, it returns Array in contrast to\n\"property\" which returns String. E.g: todo_list: property_array(name: \"todo_list\")",
        "type": { "name": "String", "path": "scalar/string", "info": "[String]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "social_friends",
        "description": null,
        "type": { "name": "UserCollection", "path": "object/usercollection", "info": "UserCollection" },
        "arguments": [
          { "name": "page", "description": null, "type": { "name": "Int", "path": "scalar/int", "info": "Int" }, "default_value": 1 },
          { "name": "per_page", "description": null, "type": { "name": "Int", "path": "scalar/int", "info": "Int" }, "default_value": 20 }
        ]
      },
      {
        "notices": [],
        "name": "temporary_token",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [
          {
            "name": "valid_for",
            "description": "Number of hours before the token expires",
            "type": { "name": "Int", "path": "scalar/int", "info": "Int" }
          }
        ]
      },
      {
        "notices": [],
        "name": "transactables",
        "description": null,
        "type": { "name": "Transactable", "path": "object/transactable", "info": "[Transactable]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "user_profile_delete",
    "description": null,
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "profile_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user_id",
        "description": null,
        "type": { "name": "ID", "path": "scalar/id", "info": "ID!" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "address",
        "description": "Fetch address by name, e.g: address: address(name: \"office_address\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "addresses",
        "description": "Fetch all addresses, optionally you can filter results by name, e.g: home: addresses(name: \"home\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "attachment",
        "description": "Fetch attachment by name, e.g: sales_report: attachment(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g: sales_reports: attachments(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_address",
        "description": "Fetch address by name, e.g: address: custom_address(name: \"office_address\")",
        "is_deprecated": true,
        "deprecation_reason": "Use address",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_addresses",
        "description": "Fetch all addresses, optionaly you can filter results by name, e.g: home: custom_addresses(name: \"home\")",
        "is_deprecated": true,
        "deprecation_reason": "Use addresses",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_attachment",
        "description": "Fetch attachment by name, e.g: sales_report: custom_attachment(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachment",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g:\nsales_reports: custom_attachments(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachments",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_image",
        "description": "Fetch image by name, e.g: header: custom_image(name: \"header\")",
        "is_deprecated": true,
        "deprecation_reason": "Use image",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: custom_images(name: \"cat\")",
        "is_deprecated": true,
        "deprecation_reason": "Use images",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "customizations",
        "description": null,
        "type": { "name": "Customization", "path": "object/customization", "info": "[Customization]" },
        "arguments": [
          { "name": "customizable_id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } },
          { "name": "customizable_type", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } },
          { "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "[ID]" } },
          { "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } },
          {
            "name": "properties",
            "description": null,
            "type": { "name": "QueryCustomAttribute", "path": "input_object/querycustomattribute", "info": "[QueryCustomAttribute]" }
          },
          {
            "name": "sort",
            "description": null,
            "type": { "name": "CustomizationSortOrder", "path": "input_object/customizationsortorder", "info": "[CustomizationSortOrder]" }
          },
          { "name": "user_id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } }
        ]
      },
      {
        "notices": [],
        "name": "id",
        "description": "ID of an object.",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "image",
        "description": "Fetch image by name, e.g: header: image(name: \"header\")",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: images(name: \"cat\")",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "model",
        "description": "Defines belongs-to relation with other model, e.g: parent: model(model_name:\n\"parent\", join_on_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "ListingsCustomization" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "String" }
          }
        ]
      },
      {
        "notices": [],
        "name": "models",
        "description": "Defines has-many relation with other model, e.g: children: models(model_name:\n\"child\", join_on_property: \"parent_id\", foreign_property: \"parent_id\") { id }",
        "type": { "name": "ListingsCustomization", "path": "object/listingscustomization", "info": "[ListingsCustomization]" },
        "arguments": [
          {
            "name": "foreign_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "join_on_property",
            "description": "Load resources with foreign_property == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          },
          {
            "name": "model_name",
            "description": "Joins model [formaly customization] with custom-model-type-name == model_name",
            "type": { "name": "String", "path": "scalar/string", "info": "[String]" }
          }
        ]
      },
      {
        "notices": [],
        "name": "profile_type",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of all properties assigned to the object.",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Fetch any property by name, e.g: hair_color: property(name: \"hair_color\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_array",
        "description": "Fetch any property of Array type by name, it returns Array in contrast to\n\"property\" which returns String. E.g: todo_list: property_array(name: \"todo_list\")",
        "type": { "name": "String", "path": "scalar/string", "info": "[String]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "remote_model",
        "description": "Defines relation object accessible over HTTP in JSON collection identified by it's ID.",
        "type": { "name": "Customization", "path": "object/customization", "info": "Customization" },
        "arguments": [
          {
            "name": "endpoint",
            "description": "Endpoint that will return resources for given ids in json format",
            "type": { "name": "Endpoint", "path": "input_object/endpoint", "info": "Endpoint!" }
          },
          {
            "name": "join_on_property",
            "description": "Load remote resource with id == join_on_property",
            "type": { "name": "String", "path": "scalar/string", "info": "String!" }
          }
        ]
      },
      {
        "notices": [],
        "name": "user",
        "description": "Defines relation with other user, e.g: invited_by: user(join_on_property: \"invited_by_id\") { id }",
        "type": { "name": "User", "path": "object/user", "info": "User" },
        "arguments": [
          {
            "name": "join_on_property",
            "description": null,
            "type": { "name": "String", "path": "scalar/string", "info": "String" },
            "default_value": "user_id"
          }
        ]
      }
    ]
  },
  {
    "notices": [],
    "name": "user_profiles_delete_all",
    "description": "Remove all user profiles, beware there is no comming back!",
    "input_fields": [
      {
        "notices": [],
        "name": "all_user_profile_types",
        "description": "Mark this if you really want to remove all user_profiles",
        "type": { "name": "Boolean", "path": "scalar/boolean", "info": "Boolean" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user_profile_type_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "count",
        "description": null,
        "type": { "name": "Int", "path": "scalar/int", "info": "Int" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "user_session_create",
    "description": "Sign In User",
    "input_fields": [
      {
        "notices": [],
        "name": "email",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "password",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "remember_me",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "email",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "password",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      }
    ]
  },
  {
    "notices": [],
    "name": "user_session_destroy",
    "description": "Sign Out User",
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "user_session_destroy",
        "description": "Sign Out User",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": [
          {
            "name": "form_configuration_name",
            "description": null,
            "type": { "name": "String", "path": "scalar/string", "info": "String" }
          }
        ]
      }
    ]
  },
  {
    "notices": [],
    "name": "user_update",
    "description": "Updates current_user",
    "input_fields": [
      {
        "notices": [],
        "name": "form_configuration_name",
        "description": "when not provided, you will have access to all properties",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "id",
        "description": "when not provided we try to use current_user",
        "type": { "name": "ID", "path": "scalar/id", "info": "ID" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "user",
        "description": null,
        "type": { "name": "UserInputType", "path": "input_object/userinputtype", "info": "UserInputType!" },
        "arguments": []
      }
    ],
    "return_fields": [
      {
        "notices": [],
        "name": "address",
        "description": "Fetch address by name, e.g: address: address(name: \"office_address\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "addresses",
        "description": "Fetch all addresses, optionally you can filter results by name, e.g: home: addresses(name: \"home\")",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "attachment",
        "description": "Fetch attachment by name, e.g: sales_report: attachment(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g: sales_reports: attachments(name: \"sales_report\")",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "authentications",
        "description": null,
        "type": { "name": "Authentication", "path": "object/authentication", "info": "[Authentication]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "bank_accounts",
        "description": null,
        "type": { "name": "BankAccount", "path": "object/bankaccount", "info": "[BankAccount]" },
        "arguments": [{ "name": "payment_method_id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } }]
      },
      {
        "notices": [],
        "name": "communication",
        "description": null,
        "type": { "name": "Communication", "path": "object/communication", "info": "Communication" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "created_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "credit_cards",
        "description": null,
        "type": { "name": "CreditCard", "path": "object/creditcard", "info": "[CreditCard]" },
        "arguments": [{ "name": "payment_method_id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID" } }]
      },
      {
        "notices": [],
        "name": "custom_address",
        "description": "Fetch address by name, e.g: address: custom_address(name: \"office_address\")",
        "is_deprecated": true,
        "deprecation_reason": "Use address",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "CustomAddrress" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_addresses",
        "description": "Fetch all addresses, optionaly you can filter results by name, e.g: home: custom_addresses(name: \"home\")",
        "is_deprecated": true,
        "deprecation_reason": "Use addresses",
        "type": { "name": "CustomAddrress", "path": "object/customaddrress", "info": "[CustomAddrress]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_attachment",
        "description": "Fetch attachment by name, e.g: sales_report: custom_attachment(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachment",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "PrivateFile" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_attachments",
        "description": "Fetch all attachments, optionally you can filter results by name, e.g:\nsales_reports: custom_attachments(name: \"sales_report\")",
        "is_deprecated": true,
        "deprecation_reason": "Use attachments",
        "type": { "name": "PrivateFile", "path": "object/privatefile", "info": "[PrivateFile]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "custom_image",
        "description": "Fetch image by name, e.g: header: custom_image(name: \"header\")",
        "is_deprecated": true,
        "deprecation_reason": "Use image",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "custom_images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: custom_images(name: \"cat\")",
        "is_deprecated": true,
        "deprecation_reason": "Use images",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "customizations",
        "description": null,
        "type": { "name": "Customization", "path": "object/customization", "info": "[Customization]" },
        "arguments": [
          { "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } },
          {
            "name": "user_id",
            "description": "ID of user that created customization",
            "type": { "name": "ID", "path": "scalar/id", "info": "ID" }
          }
        ]
      },
      {
        "notices": [],
        "name": "email",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "external_id",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "first_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      { "notices": [], "name": "id", "description": null, "type": { "name": "ID", "path": "scalar/id", "info": "ID!" }, "arguments": [] },
      {
        "notices": [],
        "name": "image",
        "description": "Fetch image by name, e.g: header: image(name: \"header\")",
        "type": { "name": "Image", "path": "object/image", "info": "Image" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "images",
        "description": "Fetch all images, optionaly you can filter results by name, e.g: cat_images: images(name: \"cat\")",
        "type": { "name": "Image", "path": "object/image", "info": "[Image]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }]
      },
      {
        "notices": [],
        "name": "language",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "last_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "merchant_accounts",
        "description": null,
        "type": { "name": "MerchantAccount", "path": "object/merchantaccount", "info": "[MerchantAccount]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "middle_name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "name",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "profile",
        "description": null,
        "type": { "name": "Profile", "path": "object/profile", "info": "Profile" },
        "arguments": [
          { "name": "profile_type", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }
        ]
      },
      {
        "notices": [],
        "name": "profiles",
        "description": null,
        "type": { "name": "Profile", "path": "object/profile", "info": "[Profile]" },
        "arguments": [
          { "name": "profile_type", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String" } }
        ]
      },
      {
        "notices": [],
        "name": "properties",
        "description": "List of all properties assigned to the object.",
        "type": { "name": "HashObject", "path": "scalar/hashobject", "info": "HashObject" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "property",
        "description": "Fetch any property by name, e.g: hair_color: property(name: \"hair_color\")",
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "property_array",
        "description": "Fetch any property of Array type by name, it returns Array in contrast to\n\"property\" which returns String. E.g: todo_list: property_array(name: \"todo_list\")",
        "type": { "name": "String", "path": "scalar/string", "info": "[String]" },
        "arguments": [{ "name": "name", "description": null, "type": { "name": "String", "path": "scalar/string", "info": "String!" } }]
      },
      {
        "notices": [],
        "name": "slug",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String!" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "social_friends",
        "description": null,
        "type": { "name": "UserCollection", "path": "object/usercollection", "info": "UserCollection" },
        "arguments": [
          { "name": "page", "description": null, "type": { "name": "Int", "path": "scalar/int", "info": "Int" }, "default_value": 1 },
          { "name": "per_page", "description": null, "type": { "name": "Int", "path": "scalar/int", "info": "Int" }, "default_value": 20 }
        ]
      },
      {
        "notices": [],
        "name": "temporary_token",
        "description": null,
        "type": { "name": "String", "path": "scalar/string", "info": "String" },
        "arguments": [
          {
            "name": "valid_for",
            "description": "Number of hours before the token expires",
            "type": { "name": "Int", "path": "scalar/int", "info": "Int" }
          }
        ]
      },
      {
        "notices": [],
        "name": "transactables",
        "description": null,
        "type": { "name": "Transactable", "path": "object/transactable", "info": "[Transactable]" },
        "arguments": []
      },
      {
        "notices": [],
        "name": "updated_at",
        "description": null,
        "type": { "name": "JSONDate", "path": "scalar/jsondate", "info": "JSONDate" },
        "arguments": []
      }
    ]
  }
]
{% endraw %}
{% endparse_json %}

{% export graphql_mutations, namespace: 'api_reference' %}
