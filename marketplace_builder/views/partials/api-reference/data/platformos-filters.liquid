{% parse_json platformos_filters %}
{% raw %}
{
  "filters": [
    {
      "name": "add_hash_key",
      "aliases": ["assign_to_hash_key"],
      "returns": [{ "types": ["Hash"], "description": "" }],
      "params": [
        { "name": "hash", "types": ["Hash"], "description": "", "default": null },
        { "name": "key", "types": ["String"], "description": "", "default": null },
        { "name": "value", "types": ["Object"], "description": "", "default": null }
      ],
      "examples": [
        "{% assign accountants = \"Angela,Kevin,Oscar\" | split: \",\" %}\n{% assign management = \"David,Jan,Michael\" | split: \",\" %}\n{% assign company = '{}' | parse_json %}\n{% assign company = company | add_hash_key: \"name\", \"Dunder Mifflin\" %}\n{% assign company = company | add_hash_key: \"accountants\", accountants %}\n{% assign company = company | add_hash_key: \"management\", management %}\n{{ company }} => {\"name\"=>\"Dunder Mifflin\", \"accountants\"=>[\"Angela\", \"Kevin\", \"Oscar\"], \"management\"=>[\"David\", \"Jan\", \"Michael\"]}"
      ]
    },
    {
      "name": "add_to_array",
      "aliases": [],
      "returns": [{ "types": ["Array<Object>"], "description": "array to which you add the item given as the second parameter" }],
      "params": [
        { "name": "array", "types": ["Array<Object>"], "description": "array to which you add a new element", "default": null },
        { "name": "item", "types": ["Object"], "description": "item you add to the array", "default": null }
      ],
      "examples": ["{% assign array = 'a,b,c' | split: ',' %}\n{{ array | add_to_array: 'd' }} => ['a', 'b', 'c', 'd']"]
    },
    {
      "name": "add_to_date",
      "aliases": [],
      "returns": [
        {
          "types": ["Date"],
          "description": "input date/time to which the number_of_days days have been added; use negative values to obtain\na date in the past"
        }
      ],
      "params": [
        {
          "name": "time",
          "types": ["String", "Integer", "Date", "Time"],
          "description": "parsable time to which you add number_of_days",
          "default": null
        },
        { "name": "number_of_days", "types": ["Integer"], "description": "number of days to add to the input date", "default": null }
      ],
      "examples": ["{{ '2010-01-01' | add_to_date: 1 }} => 2010-01-02"]
    },
    {
      "name": "advanced_format",
      "aliases": [],
      "returns": [{ "types": ["String"], "description": "formatted string" }],
      "params": [
        { "name": "argument_to_format", "types": ["Object"], "description": "object you want to format", "default": null },
        {
          "name": "format",
          "types": ["String"],
          "description": "should look like: %[flags][width][.precision]type. For more examples and information see: https://ruby-doc.org/core-2.5.1/Kernel.html#method-i-sprintf",
          "default": null
        }
      ],
      "examples": [
        "{{ 3.124 | advanced_format: '%.2f' }} => 3.12",
        "{{ 3 | advanced_format: '%.2f' }} => 3.00\nIn the example above flags is not present, width is not present (refers to the total final\nlength of the string), precision \".2\" means 2 digits after the decimal point,\ntype \"f\" means floating point"
      ]
    },
    {
      "name": "any",
      "aliases": [],
      "returns": [{ "types": ["Boolean"], "description": "checks if given array contains at least one of the queried string/number" }],
      "params": [
        { "name": "array", "types": ["Array"], "description": "array to search in", "default": "[]" },
        {
          "name": "query",
          "types": ["String", "Number"],
          "description": "String/Number compared to each item in the given array",
          "default": "'true'"
        }
      ],
      "examples": ["{% assign elements = 'foo,bar' | split: ',' %}\n{{ elements | any: 'foo' }} => true"]
    },
    {
      "name": "asset_url",
      "aliases": [],
      "returns": [{ "types": ["String"], "description": "URL to the physical file if existing, root asset URL otherwise" }],
      "params": [
        { "name": "file_path", "types": ["String"], "description": "path to the asset, relative to assets directory", "default": null }
      ],
      "examples": [
        "{{ \"valid/file.jpg\" | asset_url }} => https://cdn-server.com/valid/file.jpg\n{{ \"nonexistent/file.jpg\" | asset_url }} => https://cdn-server.com/assets/"
      ]
    },
    {
      "name": "base64_decode",
      "aliases": [],
      "returns": [{ "types": ["String"], "description": "decoded string" }],
      "params": [{ "name": "base64_string", "types": ["String"], "description": "Base64 encoded string", "default": null }],
      "examples": ["{{ 'aGVsbG8gYmFzZTY0\\n' | base64_decode }} => 'hello base64'"]
    },
    {
      "name": "base64_encode",
      "aliases": [],
      "returns": [
        {
          "types": ["String"],
          "description": "Returns the Base64-encoded version of bin. This method complies with RFC 2045. Line feeds are added to every 60 encoded characters."
        }
      ],
      "params": [{ "name": "bin", "types": ["String"], "description": "string to be encoded", "default": null }],
      "examples": ["{{ 'hello base64' | base64_encode }} => 'aGVsbG8gYmFzZTY0\\n'"]
    },
    {
      "name": "compact",
      "aliases": [],
      "returns": [{ "types": ["Array<Object>"], "description": "array from which blank values are removed" }],
      "params": [{ "name": "array", "types": ["Array<Object>"], "description": "array with some blank values", "default": null }],
      "examples": [
        "{{ '1,' | split: ',' | add_to_array: false | add_to_array: '2' | compact }} => 12",
        "{{ '1,' | split: ',' | add_to_array: null | add_to_array: '2' | compact }} => 12",
        "{% parse_json empty_object %}{}{% endparse_json %}\n{{ '1,' | split: ',' | add_to_array: empty_object | add_to_array: '2' | compact }} => 12",
        "{% assign empty_array = ',' | split: ',' %}\n{{ '1,' | split: ',' | add_to_array: empty_array | add_to_array: '2' | compact }} => 12"
      ]
    },
    {
      "name": "compute_hmac",
      "aliases": [],
      "returns": [
        {
          "types": ["String"],
          "description": "Keyed-hash message authentication code (HMAC), that can\nbe used to authenticate requests from third\nparty apps, e.g. Stripe webhooks requests"
        }
      ],
      "params": [
        { "name": "data", "types": ["String"], "description": "message to be authenticated", "default": null },
        { "name": "secret", "types": ["String"], "description": "secret key", "default": null },
        {
          "name": "algorithm",
          "types": ["String"],
          "description": "defaults to SHA256. Supported algorithms are:\nSHA, SHA1, SHA224, SHA256, SHA384, SHA512, MD4, MDC2, MD5, RIPEMD160, DSS1.",
          "default": "'sha256'"
        }
      ],
      "examples": ["{{ 'some_data' | compute_hmac: 'some_secret', 'MD4' }} => 'cabff538af5f97ccc27d481942616492'"]
    },
    {
      "name": "detect",
      "aliases": [],
      "returns": [{ "types": ["Object"], "description": "first object from the collection that matches the specified conditions" }],
      "params": [
        { "name": "objects", "types": ["Array<Object>"], "description": "array of objects to be processed", "default": null },
        { "name": "conditions", "types": ["Hash"], "description": "hash with conditions { field_name: value }", "default": "{}" }
      ],
      "examples": [
        "{{ objects }} => [{\"foo\":1,\"bar\":\"a\"},{\"foo\":2,\"bar\":\"b\"},{\"foo\":3,\"bar\":\"c\"}]\n{{ objects | detect: foo: 2 }} => [{\"foo\":2,\"bar\":\"b\"}]"
      ]
    },
    {
      "name": "dig",
      "aliases": [],
      "returns": [
        {
          "types": ["Object"],
          "description": "Extracted nested value specified by the sequence of keys by calling dig at each step,\nreturning null if any intermediate step is null."
        }
      ],
      "params": [
        { "name": "hash", "types": ["Hash"], "description": "", "default": null },
        {
          "name": "keys",
          "types": ["Array"],
          "description": "comma separated sequence of string keys to dig down the hash",
          "default": null
        }
      ],
      "examples": [
        "{% parse_json user_json %}\n{\n  \"name\": {\n    \"first\": \"John\"\n    \"last\": \"Doe\"\n  }\n}\n{% endparse_json %}\n{{ user_json | dig: \"name\", \"first\" }} => \"John\""
      ]
    },
    {
      "name": "escape_javascript",
      "aliases": [],
      "returns": [{ "types": ["String"], "description": "escaped text" }],
      "params": [{ "name": "text", "types": ["String"], "description": "text to be escaped", "default": null }],
      "examples": [
        "{% capture js %}\nvar msg = 'hello world';\nfunction yell(x) {\n  if (!x) { return; }\n  return x + \"!!!\";\n}\nyell(msg).\n{% endcapture %}\n\n{{ js | escape_javascript }}\n=> \\nvar msg = \\'hello world\\';\\nfunction yell(x) {\\n if (!x) { return; }\\n return x + \\\"!!!\\\";\\n}\\nyell(msg).\\n"
      ]
    },
    {
      "name": "expand_url_template",
      "aliases": [],
      "returns": [{ "types": ["String"], "description": "expanded URL" }],
      "params": [
        { "name": "template", "types": ["String"], "description": "URL template", "default": null },
        { "name": "params", "types": ["Hash"], "description": "hash with data injected into template", "default": null }
      ],
      "examples": [
        "{% assign template = \"/search/{city}/{street}\" %}\n{{ template | expand_url_template city: \"Sydney\", street: \"BlueRoad\" }}\n=> /search/Sydney/BlueRoad"
      ]
    },
    {
      "name": "extract_url_params",
      "aliases": [],
      "returns": [{ "types": ["Hash"], "description": "hash with extracted params" }],
      "params": [
        { "name": "url", "types": ["String"], "description": "URL with params to extract", "default": null },
        { "name": "templates", "types": ["String", "Array<String>"], "description": "URL templates array", "default": null }
      ],
      "examples": [
        "{% assign url = \"/search/Sydney/BlueRoad\" %}\n{% assign template = \"/search/{city}/{street}\" %}\n{{ url | extract_url_params: template }}\n=> {\"city\"=>\"Sydney\", \"street\"=>\"BlueRoad\"}"
      ]
    },
    {
      "name": "fetch",
      "aliases": [],
      "returns": [{ "types": ["Object"], "description": "" }],
      "params": [
        { "name": "hash", "types": ["Hash"], "description": "input hash to be traversed", "default": null },
        { "name": "key", "types": ["String"], "description": "key to be fetched from hash branch", "default": null }
      ],
      "examples": [
        "{% parse_json users %}\n[{\n  \"name\": \"Jane\"\n}, {\n  \"name\": \"Bob\"\n}]\n{% endparse_json %}\n{{ users | first | fetch: \"name\" }} => \"Jane\""
      ]
    },
    {
      "name": "flatten",
      "aliases": [],
      "returns": [{ "types": ["Array<Object>"], "description": "with objects" }],
      "params": [{ "name": "array", "types": ["Array<Array>"], "description": "array of arrays to be processed", "default": null }],
      "examples": ["{{ array_of_arrays }} => [[1,2], [3,4], [5,6]]\n{{ array_of_arrays | flatten }} => [1,2,3,4,5,6]"]
    },
    {
      "name": "format_number",
      "aliases": [],
      "returns": [{ "types": ["String"], "description": "formatted number" }],
      "params": [
        { "name": "number", "types": ["Object"], "description": "string (numberlike), integer or float to format", "default": null },
        {
          "name": "locale",
          "types": null,
          "description": "Sets the locale to be used for formatting (defaults to current locale).",
          "default": null
        },
        { "name": "precision", "types": null, "description": "Sets the precision of the number (defaults to 3).", "default": null },
        {
          "name": "significant",
          "types": null,
          "description": "If true, precision will be the number of significant_digits. If false, the number of fractional digits (defaults to false).",
          "default": null
        },
        {
          "name": "separator",
          "types": null,
          "description": "Sets the separator between the fractional and integer digits (defaults to \".\").",
          "default": null
        },
        { "name": "delimiter", "types": null, "description": "Sets the thousands delimiter (defaults to \"\").", "default": null },
        {
          "name": "strip_insignificant_zeros",
          "types": null,
          "description": "If true removes insignificant zeros after the decimal separator (defaults to false).",
          "default": null
        }
      ],
      "examples": [
        "{{ 111.2345 | format_number }} # => 111.235",
        "{{ 111.2345 | format_number: precision: 2 }} # => 111.23",
        "{{ 111 | format_number: precision: 2 }} # => 111.00",
        "{{ 1111.2345 | format_number: precision: 2, separator: ',', delimiter: '.' }} # => 1.111,23"
      ]
    },
    {
      "name": "group_by",
      "aliases": [],
      "returns": [
        {
          "types": ["Hash<MethodResult => Array<Object>>"],
          "description": "the original array grouped by method\nspecified by the second parameter"
        }
      ],
      "params": [
        { "name": "objects", "types": ["Array<Object>"], "description": "array to be grouped", "default": null },
        { "name": "method_name", "types": ["String"], "description": "method name to be used to group Objects", "default": null }
      ],
      "examples": [
        "{% parse_json objects %}\n  [\n    { \"size\": \"xl\", \"color\": \"red\"},\n    { \"size\": \"xl\", \"color\": \"yellow\"},\n    { \"size\": \"s\", \"color\": \"red\"}\n  ]\n{% endparse_json %}\n\n{{ objects | group_by: 'size' }} => {\"xl\"=>[{\"size\"=>\"xl\", \"color\"=>\"red\"}, {\"size\"=>\"xl\", \"color\"=>\"yellow\"}], \"s\"=>[{\"size\"=>\"s\", \"color\"=>\"red\"}]}"
      ]
    },
    {
      "name": "html_safe",
      "aliases": [],
      "returns": [
        {
          "types": ["String"],
          "description": "string that can be rendered with all HTML tags,\nby default all variables are striped from dangerous HTML tags"
        }
      ],
      "params": [{ "name": "text", "types": ["String"], "description": "", "default": null }],
      "examples": [
        "{{ '<h1>Hello</h1>' }} => '<h1>Hello</h1>'\n{{ '<h1>Hello</h1>' | html_safe }} => '<h1>Hello</h1>'",
        "{{ '<script>alert(\"Hello\")</script>' }} => <script>alert(\"Hello\")</script> - this will just print text in the source code of the page\n{{ '<script>alert(\"Hello\")</script>' | html_safe }} => <script>alert(\"Hello\")</script> - this script will be evaluated when user enters te page"
      ]
    },
    {
      "name": "humanize",
      "aliases": [],
      "returns": [
        {
          "types": ["String"],
          "description": "a human readable string derived from the input; capitalizes the first word, turns\nunderscores into spaces, and strips a trailing '_id' if present. Used for creating a formatted output (e.g. by replacing underscores with spaces, capitalizing the first word, etc.)."
        }
      ],
      "params": [{ "name": "key", "types": ["String"], "description": "input string to be transformed", "default": null }],
      "examples": ["{{ 'car_model' | humanize }} => 'Car model'", "{{ 'customer_id' | humanize }} => 'Customer'"]
    },
    {
      "name": "in_groups_of",
      "aliases": [],
      "returns": [
        {
          "types": ["Array<Array<Object>>"],
          "description": "the original array split into groups of the size\nspecified by the second parameter (an array of arrays)"
        }
      ],
      "params": [
        { "name": "array", "types": ["Array<Object>"], "description": "array to be split into groups", "default": null },
        { "name": "integer", "types": ["Integer"], "description": "the size of each group the array is to be split into", "default": null }
      ],
      "examples": ["{% assign elements = '1,2,3,4' | split: ',' %}\n{{ elements | in_groups_of: 3 }} => [[1, 2, 3], [4, null, null]]"]
    },
    {
      "name": "intersection",
      "aliases": [],
      "returns": [{ "types": ["Array<Object>"], "description": "that exists in both arrays" }],
      "params": [
        { "name": "array", "types": ["Array<Object>"], "description": "array of objects to be processed", "default": null },
        { "name": "other_array", "types": ["Array<Object>"], "description": "array of objects to be processed", "default": null }
      ],
      "examples": [
        "{% assign array = '1,2,3,4' | split: ',' %}\n{% assign other_array = '3,4,5,6' | split: ',' %}\n\n{{ array | intersection: other_array }} => [3,4]"
      ]
    },
    {
      "name": "is_date_before",
      "aliases": ["date_before"],
      "returns": [{ "types": ["Boolean"], "description": "returns true if the first time is lower than the second time" }],
      "params": [
        {
          "name": "first_time",
          "types": ["String", "Integer", "Date", "Time"],
          "description": "time to compare to the second parameter",
          "default": null
        },
        {
          "name": "second_time",
          "types": ["String", "Integer", "Date", "Time"],
          "description": "time against which the first parameter is compared to",
          "default": null
        }
      ],
      "examples": [
        "{{ '2010-01-02' | date_before: '2010-01-03' }} => true",
        "{{ '6 months ago' | date_before: '2010-01-03' }} => false",
        "{{ '1 day ago' | date_before: 'now' }} => true"
      ]
    },
    {
      "name": "is_date_in_past",
      "aliases": [],
      "returns": [{ "types": ["Boolean"], "description": "true if time passed is in the past, false otherwise" }],
      "params": [
        {
          "name": "time",
          "types": ["String", "Integer", "Date", "Time"],
          "description": "time object, can also be a string",
          "default": null
        }
      ],
      "examples": ["{{ '2010-01-01' | is_date_in_past }} => true", "{{ '3000-01-01' | is_date_in_past }} => false"]
    },
    {
      "name": "is_included_in_array",
      "aliases": [],
      "returns": [{ "types": ["Boolean"], "description": "whether the array includes the element given" }],
      "params": [
        { "name": "array", "types": ["Array"], "description": "array of elements to look into", "default": null },
        { "name": "el", "types": ["Object"], "description": "look for this element inside the array", "default": null }
      ],
      "examples": ["{% assign elements = 'a,b,c,d' | split: ',' %}\n{{ elements | is_included_in_array: 'c' }} => true"]
    },
    {
      "name": "is_token_valid",
      "aliases": [],
      "returns": [
        {
          "types": ["Boolean"],
          "description": "returns true if the token has not expired and was generated for the given user, false otherwise"
        }
      ],
      "params": [
        {
          "name": "token",
          "types": ["String"],
          "description": "encrypted token generated via the temporary_token GraphQL property",
          "default": null
        },
        { "name": "user_id", "types": ["Integer"], "description": "id of the user who generated the token", "default": null }
      ],
      "examples": ["{% token = '1234' %}\n{{ token | is_token_valid: context.current_user.id }} => false"]
    },
    {
      "name": "json",
      "aliases": ["to_json"],
      "returns": [{ "types": ["String"], "description": "JSON formatted string containing a representation of object." }],
      "params": [{ "name": "object", "types": ["Object"], "description": "object you want a JSON representation of", "default": null }],
      "examples": ["{{ user | json }} => {\"name\":\"Mike\",\"email\":\"mike@mail.com\"}"]
    },
    {
      "name": "jwt_decode",
      "aliases": [],
      "returns": [{ "types": ["Hash"], "description": "result of decoding JWT token" }],
      "params": [
        { "name": "encoded_token", "types": ["String"], "description": "encoded JWT token you want to decode", "default": null },
        { "name": "algorithm", "types": ["String"], "description": "the algorithm that was used to encode the token", "default": null },
        {
          "name": "secret",
          "types": ["String"],
          "description": "either a shared secret (for HMAC) or a PUBLIC key for RSA\nValid options:\n  none - unsigned token\n  HS256 - HMAC using SHA-256 hash algorithm\n  HS384 - HMAC using SHA-384 hash algorithm\n  HS512 - HMAC using SHA-512 hash algorithm\n  RS256 - RSA using SHA-256 hash algorithm\n  RS384 - RSA using SHA-384 hash algorithm\n  RS512 - RSA using SHA-512 hash algorithm",
          "default": "nil"
        }
      ],
      "examples": [
        "HMAC:\n{% assign original_payload = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJrZXkiOiJ2YWx1ZSIsImFub3RoZXJfa2V5IjoiYW5vdGhlciB2YWx1ZSJ9.XT8sHXyPTA9DoHzssXh1q6Uv2D1ENosW0F3Ixle85L0' | jwt_decode: 'HS256', 'this-is-secret'  }} =>\n[\n  {\n    \"key\" => \"value\",\n    \"another_key\" => \"another value\"\n  },\n  {\n    \"typ\" => \"JWT\",\n    \"alg\" => \"HS256\"\n  }\n]",
        "RSA:\n{% capture public_key %}\n-----BEGIN PUBLIC KEY-----\nMIIBI...\n-----END PUBLIC KEY-----\n{% endcapture %}\n{% assign original_payload = 'some encoded token' | jwt_decode: 'RS256', public_key %}"
      ]
    },
    {
      "name": "jwt_encode",
      "aliases": [],
      "returns": [{ "types": ["String"], "description": "JWT token encrypted using the algorithm of your choice" }],
      "params": [
        { "name": "payload", "types": ["Hash"], "description": "payload or message you want to encrypt", "default": null },
        { "name": "algorithm", "types": ["String"], "description": "algorithm you want to use for encryption", "default": null },
        {
          "name": "secret",
          "types": ["String"],
          "description": "either a shared secret (for HMAC) or a private key for RSA",
          "default": "nil"
        }
      ],
      "examples": [
        "{% capture payload_string %}\n{\n  \"key\": \"value\",\n  \"another_key\": \"another value\"\n}\n{% endcapture %}\n{% assign payload = payload_string | parse_json %}",
        "HMAC:\n{{ payload | jwt_encode: 'HS256', 'this-is-secret'  }} => 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJrZXkiOiJ2YWx1ZSIsImFub3RoZXJfa2V5IjoiYW5vdGhlciB2YWx1ZSJ9.XT8sHXyPTA9DoHzssXh1q6Uv2D1ENosW0F3Ixle85L0'",
        "RSA:\n{% capture private_key %}\n-----BEGIN RSA PRIVATE KEY-----\nMIIEpA...\n-----END RSA PRIVATE KEY-----\n{% endcapture %}\n{% assign jwt_token = payload | jwt_encode: 'RS256', private_key  %}\n{% comment %} Please note that storing private key as a plain text in a code is not a good idea. We suggest you\n              provide the key via Partner Portal and use context.constants.<name of private key constant> instead.{% endcomment %}"
      ]
    },
    {
      "name": "limit",
      "aliases": [],
      "returns": [{ "types": ["Array<Object>"], "description": "parameter; [1,2,3,4] limited to 2 elements gives [1,2]" }],
      "params": [
        { "name": "array", "types": ["Array<Object>"], "description": "array to shrink", "default": null },
        { "name": "limit", "types": ["Integer"], "description": "number of elements to be returned", "default": null }
      ],
      "examples": [
        "items => [{ id: 1, name: 'foo', label: 'Foo' }, { id: 2, name: 'bar', label: 'Bar' }]\n{{ items | limit: 1 }} => [{ id: 1, name: 'foo', label: 'Foo' }]"
      ]
    },
    {
      "name": "localize",
      "aliases": ["l"],
      "returns": [{ "types": ["String","nil"], "description": "formatted representation of the passed parsable time" }],
      "params": [
        {
          "name": "time",
          "types": ["String", "Integer", "Date", "Time"],
          "description": "parsable time object to be formatted",
          "default": null
        },
        {
          "name": "format",
          "types": ["String"],
          "description": "the format to be used for formatting the time; default is 'long'; other values can be used:\nthey are taken from translations, keys are of the form 'time.formats.#!{format_name}'",
          "default": "'long'"
        },
        { "name": "zone", "types": ["String"], "description": "the time zone to be used for time", "default": "nil" }
      ],
      "examples": ["{{ '2010-01-01' | localize }} => 'January 01, 2010'"]
    },
    {
      "name": "map",
      "aliases": [],
      "returns": [
        {
          "types": ["Array<Object>"],
          "description": "array of objects obtained from the original array of objects\n(passed in as the object parameter) by calling the method 'method' on each object\nin the original array"
        }
      ],
      "params": [
        { "name": "object", "types": ["Array<Object>"], "description": "array of objects to be processed", "default": null },
        {
          "name": "method",
          "types": ["String"],
          "description": "method name to be called on each of the objects in the passed\nin array of objects",
          "default": null
        }
      ],
      "examples": [
        "{% assign objects = '[{\"id\":1,\"name\":\"foo\",\"label\":\"Foo\"},{\"id\":2,\"name\":\"bar\",\"label\":\"Bar\"}]' | parse_json %}\n{{ objects | map: 'name' }} => ['foo', 'bar']"
      ]
    },
    {
      "name": "map_attributes",
      "aliases": [],
      "returns": [{ "types": ["Array<Array>"], "description": "array of arrays with values for given keys" }],
      "params": [
        { "name": "array", "types": ["Array<Object>"], "description": "array of objects to be processed", "default": null },
        { "name": "attributes", "types": ["Array<String>"], "description": "array of keys to be extracted", "default": null }
      ],
      "examples": [
        "items => [{ id: 1, name: 'foo', label: 'Foo' }, { id: 2, name: 'bar', label: 'Bar' }]\n{{ items | map_attributes: 'id', 'name' }} => [[1, 'foo'], [2, 'bar']]"
      ]
    },
    {
      "name": "markdown",
      "aliases": ["markdownify"],
      "returns": [{ "types": ["String"], "description": "processed text with markdown syntax changed to HTML" }],
      "params": [{ "name": "text", "types": ["String"], "description": "text using markdown syntax", "default": null }],
      "examples": [
        "{{ '**Foo**' | markdown }} => '<b>Foo</b>'",
        "{{ '# Foo' | markdown }}  => '<h1>Foo</h1>'",
        "{{ '<b>Foo</b>' | markdown }}  => '<b>Foo</b>'",
        "{{ '<div>Foo</div>' | markdown }}  => 'Foo' # If you need unsecure tags you have to use also `html_safe | sanitize` filters"
      ]
    },
    {
      "name": "matches",
      "aliases": [],
      "returns": [{ "types": ["Boolean"], "description": "whether the given string matches the given regular expression" }],
      "params": [
        { "name": "text", "types": ["String"], "description": "string to check against the regular expression", "default": null },
        {
          "name": "regexp",
          "types": ["String"],
          "description": "string representing a regular expression pattern against which\nto match the first parameter",
          "default": null
        }
      ],
      "examples": ["{{ 'foo' | matches: '[a-z]' }} => true"]
    },
    {
      "name": "new_line_to_br",
      "aliases": ["nl2br"],
      "returns": [{ "types": ["String"], "description": "replaces newlines in the input string with the <br /> HTML tag" }],
      "params": [{ "name": "html", "types": ["String"], "description": "HTML string to be processed", "default": "''" }],
      "examples": ["{% capture text %}\n  foo\n  bar\n{% endcapture %}\n\n{{ text | new_line_to_br }} => 'foo<br />bar'"]
    },
    {
      "name": "pad_left",
      "aliases": [],
      "returns": [
        { "types": ["String"], "description": "returns string padded from left to the length of count with the symbol character" }
      ],
      "params": [
        { "name": "str", "types": ["String"], "description": "string to pad", "default": null },
        { "name": "count", "types": ["Integer"], "description": "minimum length of output string", "default": null },
        { "name": "symbol", "types": ["String"], "description": "string to pad with", "default": "' '" }
      ],
      "examples": ["{{ 'foo' | pad_left: 5 }} => '  foo'", "{{ 'Y' | pad_left: 3, 'X' }} => 'XXY'"]
    },
    {
      "name": "parameterize",
      "aliases": [],
      "returns": [
        {
          "types": ["String"],
          "description": "replaces special characters in a string so that it may be used as part of a 'pretty' URL;\nthe default separator used is '-';"
        }
      ],
      "params": [
        { "name": "text", "types": ["String"], "description": "input string to be 'parameterized'", "default": null },
        {
          "name": "separator",
          "types": ["String"],
          "description": "string to be used as separator in the output string; default is '-'",
          "default": "'-'"
        }
      ],
      "examples": ["{{ 'John arrived_foo' | parameterize }} => 'john-arrived_foo'"]
    },
    {
      "name": "parse_json",
      "aliases": ["to_hash"],
      "returns": [{ "types": ["Hash"], "description": "Hash created based on JSON" }],
      "params": [{ "name": "object", "types": ["Object"], "description": "String containing valid JSON", "default": null }],
      "examples": [
        "{% assign text = '{ \"name\": \"foo\", \"bar\": {} }' %}\n{% assign object = text | parse_json %}\n{{ object.name }} => 'foo'"
      ]
    },
    {
      "name": "pluralize",
      "aliases": [],
      "returns": [{ "types": ["String"], "description": "pluralized version of the input string" }],
      "params": [
        { "name": "string", "types": ["String"], "description": "string to be pluralized", "default": null },
        {
          "name": "count",
          "types": ["Number"],
          "description": "optional count number based on which string will be pluralized or singularized",
          "default": "2"
        }
      ],
      "examples": ["{{ 'dog' | pluralize: 1 }} => 'dog'\n{{ 'dog' | pluralize: 2 }} => 'dogs'"]
    },
    {
      "name": "pricify",
      "aliases": [],
      "returns": [{ "types": ["String"], "description": "formatted price using global price formatting rules" }],
      "params": [
        { "name": "amount", "types": ["Numeric", "String"], "description": "amount to be formatted", "default": null },
        { "name": "currency", "types": ["String"], "description": "currency to be used for formatting", "default": "'USD'" }
      ],
      "examples": [
        "{{ 0 | pricify }} => $0",
        "{{ 1 | pricify }} => $1",
        "{{ 1.20 | pricify }} => $1.20",
        "{{ 1000000 | pricify }} => $1,000,000"
      ]
    },
    {
      "name": "pricify_cents",
      "aliases": [],
      "returns": [{ "types": ["String"], "description": "formatted price using the global price formatting rules" }],
      "params": [
        { "name": "amount", "types": ["Numeric", "String"], "description": "amount in cents to be formatted", "default": null },
        { "name": "currency", "types": ["String"], "description": "currency to be used for formatting", "default": "'USD'" }
      ],
      "examples": ["{{ 1 | pricify_cents }} => $0.01", "{{ 100 | pricify_cents }} => $1", "{{ 1000000 | pricify_cents }} => $10,000"]
    },
    {
      "name": "querify",
      "aliases": [],
      "returns": [{ "types": ["String"], "description": "a query string" }],
      "params": [{ "name": "hash", "types": ["Hash{Object => Object}"], "description": "hash to be \"querified\"", "default": null }],
      "examples": ["{{ hash }} => { 'name' => 'Dan', 'id' => 1 }\n{{ hash | querify }} => 'name=Dan&id=1'"]
    },
    {
      "name": "random_string",
      "aliases": [],
      "returns": [{ "types": ["String"], "description": "returns a random alphanumeric string of given length" }],
      "params": [
        {
          "name": "length",
          "types": ["Int"],
          "description": "how many random characters should be included; default is 12",
          "default": "12"
        }
      ],
      "examples": ["{{ 10 | random_string }} => '6a1ee2629'"]
    },
    {
      "name": "raw_escape_string",
      "aliases": [],
      "returns": [
        { "types": ["String"], "description": "HTML-escaped input string; returns a string with its HTML tags visible in\nthe browser" }
      ],
      "params": [{ "name": "value", "types": ["String"], "description": "input string to be HTML-escaped", "default": null }],
      "examples": ["{{ 'foo<b>bar</b>' | raw_escape_string }} => 'foo&lt;b&gt;bar&lt;/b&gt;'"]
    },
    {
      "name": "regex_matches",
      "aliases": [],
      "returns": [
        {
          "types": ["Array<Array<String>>"],
          "description": "matches for the expression in the string;\neach item in the array is an array containing all groups of matches; for example\nfor the regex (.)(.) and the text 'abcdef', the result will look like:\n[[\"a\", \"b\"], [\"c\", \"d\"], [\"e\", \"f\"]]"
        }
      ],
      "params": [
        { "name": "text", "types": ["String"], "description": "", "default": null },
        { "name": "regexp", "types": ["String"], "description": "regexp to use for matching", "default": null }
      ],
      "examples": [
        "To retrieve the URL from a meta tag see the example below:\n{% assign text = '<html><head><meta property=\"og:image\" content=\"http://somehost.com/someimage.jpg\" /></head><body>content</body></html>' | html_safe %}\n\n{% assign matches = text | regex_matches: '<meta\\s+property=\"og:image\"\\s+content=\"([^\"]+)\"' %}\n\n{% if matches.size > 0 %}\n  {% assign image_path = matches[0][0] %}\n  {{ image_path }}\n{% endif %}"
      ]
    },
    {
      "name": "reject",
      "aliases": [],
      "returns": [{ "types": ["Array<Object>"], "description": "with objects from collection that don't match provided conditions" }],
      "params": [
        { "name": "objects", "types": ["Array<Object>"], "description": "array of objects to be processed", "default": null },
        { "name": "conditions", "types": ["Hash"], "description": "hash with conditions { field_name: value }", "default": "{}" }
      ],
      "examples": [
        "{{ objects }} => [{\"foo\":1,\"bar\":\"a\"},{\"foo\":2,\"bar\":\"b\"},{\"foo\":3,\"bar\":\"c\"},{\"foo\":2,\"bar\":\"d\"}]\n{{ objects | reject: foo: 2 }} => [{\"foo\":1,\"bar\":\"a\"},{\"foo\":3,\"bar\":\"c\"}]"
      ]
    },
    {
      "name": "remove_hash_key",
      "aliases": ["delete_hash_key"],
      "returns": [
        {
          "types": ["Object"],
          "description": "value which was assigned to a deleted key. If the key did not exist in the first place, null is returned."
        }
      ],
      "params": [
        { "name": "hash", "types": ["Hash"], "description": "", "default": null },
        { "name": "key", "types": ["String"], "description": "", "default": null }
      ],
      "examples": [
        "{% assign hash = '{ \"a\": \"1\", \"b\": \"2\"}' | parse_json %}\n{% assign a_value = hash | remove_hash_key: \"a\" %}\n{{ a_value }} => \"1\"\n{{ hash }} => { \"b\": \"2\" }"
      ]
    },
    {
      "name": "rotate",
      "aliases": [],
      "returns": [
        {
          "types": ["Array<Object>"],
          "description": "the input array rotated by a number of times given as the second\nparameter; [1,2,3,4] rotated by 2 gives [3,4,1,2]"
        }
      ],
      "params": [
        { "name": "array", "types": ["Array<Object>"], "description": "array to be rotated", "default": null },
        { "name": "count", "types": ["Integer"], "description": "number of times to rotate the input array", "default": "1" }
      ],
      "examples": ["{% assign numbers = \"1,2,3\" | split: \",\" %}\n{{ numbers | rotate }} => [2,3,1]"]
    },
    {
      "name": "sanitize",
      "aliases": [],
      "returns": [{ "types": ["String"], "description": "" }],
      "params": [
        { "name": "input", "types": ["String"], "description": "", "default": null },
        { "name": "whitelist_attributes", "types": ["Array<String>"], "description": "", "default": "nil" },
        { "name": "whitelist_tags", "types": ["Array<String>"], "description": "", "default": "nil" }
      ],
      "examples": [
        "{% capture link %}\n  <a href=\"javascript:prompt(1)\" target=\"_blank\">Link</a>\n{% endcapture %}\n{{ link | sanitize }} => <a href=\"\">Link</a>\n{% assign whitelist_attributes = 'target' | split: '|' %}\n{{ link | sanitize: whitelist_attributes }} => <a href=\"\" target=\"_blank\">Link</a>"
      ]
    },
    {
      "name": "select",
      "aliases": [],
      "returns": [{ "types": ["Array<Object>"], "description": "with objects from collection that matches provided conditions" }],
      "params": [
        { "name": "objects", "types": ["Array<Object>"], "description": "array of objects to be processed", "default": null },
        { "name": "conditions", "types": ["Hash"], "description": "hash with conditions { field_name: value }", "default": "{}" }
      ],
      "examples": [
        "{{ objects }} => [{\"foo\":1,\"bar\":\"a\"},{\"foo\":2,\"bar\":\"b\"},{\"foo\":3,\"bar\":\"c\"},{\"foo\":2,\"bar\":\"d\"}]\n{{ objects | select: foo: 2 }} => [{\"foo\":2,\"bar\":\"b\"},{\"foo\":2,\"bar\":\"d\"}]"
      ]
    },
    {
      "name": "sha1",
      "aliases": [],
      "returns": [{ "types": ["String"], "description": "SHA1 digest of the input object" }],
      "params": [
        { "name": "object", "types": ["String"], "description": "input object that you want to obtain the digest for", "default": null }
      ],
      "examples": ["{{ 'foo' | sha1 }} => '0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33'"]
    },
    {
      "name": "shuffle_array",
      "aliases": [],
      "returns": [{ "types": ["Array<Array>"], "description": "array with shuffled items" }],
      "params": [{ "name": "array", "types": ["Array<Object>"], "description": "array of objects to be processed", "default": null }],
      "examples": ["items => [1, 2, 3, 4]\n{{ items | shuffle_array }} => [3, 2, 4, 1]"]
    },
    {
      "name": "slugify",
      "aliases": [],
      "returns": [
        {
          "types": ["String"],
          "description": "replaces special characters in a string so that it may be used as part of a 'pretty' URL;"
        }
      ],
      "params": [{ "name": "text", "types": ["String"], "description": "input string to be 'slugified'", "default": null }],
      "examples": ["{{ 'John arrived_foo' | slugify }} => 'john-arrived-foo'"]
    },
    {
      "name": "strftime",
      "aliases": [],
      "returns": [
        {
          "types": ["String"],
          "description": "formatted representation of the time object; the formatted representation\nwill be based on what the format parameter specifies"
        }
      ],
      "params": [
        {
          "name": "time",
          "types": ["String", "Integer", "Date", "Time", "DateTime"],
          "description": "parsable time object",
          "default": null
        },
        {
          "name": "format",
          "types": ["String"],
          "description": "string representing the desired output format\ne.g. '%Y-%m-%d' will result in '2020-12-21'",
          "default": null
        },
        { "name": "zone", "types": ["String"], "description": "string representing the time zone", "default": "nil" }
      ],
      "examples": [
        "{{ '2018-05-30T09:12:34.000-07:00' | strftime: '%Y-%m-%d %H:%M' }} => 2018-05-30 09:12\n\n{% assign time = '2010-01-01 08:00' | to_time %}\n{{ time | strftime: \"%Y-%m-%d\" }} => '2010-01-01'"
      ]
    },
    {
      "name": "subtract_array",
      "aliases": [],
      "returns": [{ "types": ["Array<Object>"], "description": "that is a difference between two arrays" }],
      "params": [
        { "name": "array", "types": ["Array<Object>"], "description": "array of objects to be processed", "default": null },
        { "name": "other_array", "types": ["Array<Object>"], "description": "array of objects to be processed", "default": null }
      ],
      "examples": [
        "{% assign array = '1,2' | split: ',' %}\n{% assign other_array = '2' | split: ',' %}\n\n{{ array | subtract_array: other_array }} => [1]"
      ]
    },
    {
      "name": "sum_array",
      "aliases": [],
      "returns": [{ "types": ["Numeric"], "description": "summarised value of array" }],
      "params": [{ "name": "array", "types": ["Array<Numeric>"], "description": "array with values to be summarised", "default": null }],
      "examples": ["{% assign numbers = '[1,2,3]' | parse_json %}\n{{ numbers | sum_array }} => 6"]
    },
    {
      "name": "time_diff",
      "aliases": [],
      "returns": [{ "types": ["Float"], "description": "duration between start and finish in unit; default is ms (milliseconds)" }],
      "params": [
        { "name": "start", "types": ["String", "Integer", "Date", "Time"], "description": "", "default": null },
        { "name": "finish", "types": ["String", "Integer", "Date", "Time"], "description": "", "default": null },
        {
          "name": "unit",
          "types": ["String"],
          "description": "time unit - allowed options are: d, days, h, hours, m, minutes, s, seconds, ms, milliseconds [default]",
          "default": "'ms'"
        },
        { "name": "precision", "types": ["Integer"], "description": "defines rounding after comma; default is 3", "default": "3" }
      ],
      "examples": ["{% assign result = 'now' | time_diff: 'in 5 minutes', 'd' %}\n{% log result %}"]
    },
    {
      "name": "titleize",
      "aliases": [],
      "returns": [
        {
          "types": ["String"],
          "description": "capitalizes all the words and replaces some characters in the string to create\na string in title-case format"
        }
      ],
      "params": [{ "name": "text", "types": ["String"], "description": "string to be processed", "default": null }],
      "examples": ["{{ 'foo bar_zoo-xx' | titleize }} => 'Foo Bar Zoo Xx'"]
    },
    {
      "name": "to_date",
      "aliases": [],
      "returns": [{ "types": ["Date"], "description": "a Date object obtained/parsed from the input object" }],
      "params": [
        {
          "name": "time",
          "types": ["String", "Integer", "Date", "Time"],
          "description": "parsable time object to be converted to date",
          "default": null
        }
      ],
      "examples": ["{{ '2010-01-01 8:00:00' | to_date }} => 2010-01-01"]
    },
    {
      "name": "to_mobile_number",
      "aliases": [],
      "returns": [
        { "types": ["String"], "description": "returns mobile number in E.164 format; recommended for sending sms notifications" }
      ],
      "params": [
        { "name": "number", "types": ["String"], "description": "the base part of mobile number", "default": null },
        {
          "name": "country",
          "types": ["String"],
          "description": "country for which country code should be used. Can be anything - full name, iso2, iso3",
          "default": "nil"
        }
      ],
      "examples": ["{{ '500 123 999' | to_mobile_number: 'PL' }} => '+48500123999'"]
    },
    {
      "name": "to_positive_integer",
      "aliases": [],
      "returns": [{ "types": ["Integer"], "description": "" }],
      "params": [
        { "name": "param", "types": ["Object"], "description": "value to be coerced to positive integer", "default": null },
        {
          "name": "default",
          "types": ["Integer"],
          "description": "default value in case param is not valid positive integer",
          "default": null
        }
      ],
      "examples": ["{{ '1' | to_positive_integer: 2 }} => 1\n{{ '' | to_positive_integer: 2 }} => 2"]
    },
    {
      "name": "to_time",
      "aliases": [],
      "returns": [
        { "types": "[\"DateTime\"]", "description": "a time object created from parsing the string representation of time given as input" }
      ],
      "params": [
        {
          "name": "time",
          "types": ["String", "Integer", "Date", "Time"],
          "description": "a string representation of time ('today', '3 days ago', 'in 10 minutes' etc.) or an integer in UNIX time format or time",
          "default": null
        },
        { "name": "zone", "types": ["String"], "description": "time zone", "default": "nil" },
        { "name": "format", "types": ["String"], "description": "specific format to be used when parsing time", "default": "nil" }
      ],
      "examples": [
        "{{ 'today' | to_time }} => 2017-04-15 15:21:00",
        "{{ 'today' | to_time: 'UTC' }} => 2017-04-15 15:21:00",
        "{{ '1 day ago' | to_time }} => 2017-04-14 15:21:00",
        "{{ '5 days from now' | to_time }} => 2017-04-14 15:21:00",
        "{{ '2010:01:01' | to_time: '', '%Y:%m:%d' }} => 2010-01-01 00:00:00"
      ]
    },
    {
      "name": "translate",
      "aliases": ["t"],
      "returns": [
        { "types": ["String"], "description": "translation value taken from translations YML file for the key given as parameter" }
      ],
      "params": [
        { "name": "key", "types": ["String"], "description": "translation key", "default": null },
        { "name": "options", "types": ["Hash{String => String}"], "description": "values passed to translation string", "default": "{}" }
      ],
      "examples": ["{{ 'beer' | translate }} => 'cerveza'", "{{ 'beer' | t }} => 'cerveza'", "{{ 'drinks.alcoholic.beer' | t }} => 'piwo'"]
    },
    {
      "name": "url_for_path_with_token",
      "aliases": [],
      "returns": [
        { "types": ["String"], "description": "returns an URL for the given page slug, which includes the user's temporary token" }
      ],
      "params": [],
      "examples": ["{{ '/account' | url_for_with_token: current_user }} => 'https://example.com/account?temporary_token=TOKEN_HERE'"]
    },
    {
      "name": "useragent",
      "aliases": [],
      "returns": [{ "types": ["Hash"], "description": "parsed browser user agent information" }],
      "params": [
        { "name": "useragent_header", "types": ["String"], "description": "browser user agent from the request header", "default": null }
      ],
      "examples": [
        "{{ context.headers.HTTP_USER_AGENT | useragent }} =>\n{\n  \"device\": {\"family\":\"Other\",\"model\":\"Other\",\"brand\":null},\n  \"family\":\"Firefox\",\n  \"os\":{\"version\":null,\"family\":\"Windows 7\"},\n  \"version\":{\"version\":\"47.0\",\"major\":\"47\",\"minor\":\"0\",\"patch\":null}\n}"
      ]
    },
    {
      "name": "uuid",
      "aliases": [],
      "returns": [{ "types": ["String"], "description": "Universally unique identifier v4" }],
      "params": [{ "name": "_dummy", "types": ["String"], "description": "parameter will be ignored", "default": "nil" }],
      "examples": [
        "{{ '' | uuid }} => \"2d931510-d99f-494a-8c67-87feb05e1594\"\n\n{% assign id = '' | uuid %}\n{{ id }} => \"b12bd15e-4da7-41a7-b673-272221049c01\""
      ]
    },
    {
      "name": "verify_access_key",
      "aliases": [],
      "returns": [{ "types": ["Boolean"], "description": "" }],
      "params": [{ "name": "access_key", "types": ["String"], "description": "can be obtained in Partner Portal", "default": null }],
      "examples": ["{% assign access_key = '12345' %}\n{{ access_key | verify_access_key }} => true"]
    },
    {
      "name": "video_params",
      "aliases": [],
      "returns": [{ "types": ["Hash"], "description": "metadata about video" }],
      "params": [{ "name": "url", "types": ["String"], "description": "URL to a video on the internet", "default": null }],
      "examples": [
        "{{ 'https://www.youtube.com/watch?v=8N_tupPBtWQ' | video_params }}\n=> {\"provider\"=>\"YouTube\", \"url\"=>\"https://www.youtube.com/watch?v=8N_tupPBtWQ\", \"video_id\"=>\"8N_tupPBtWQ\", \"embed_url\"=>\"https://www.youtube.com/embed/8N_tupPBtWQ\", \"embed_code\"=>\"<iframe src=\\\"https://www.youtube.com/embed/8N_tupPBtWQ\\\" frameborder=\\\"0\\\" allowfullscreen=\\\"allowfullscreen\\\"></iframe>\"},"
      ]
    },
    {
      "name": "videoify",
      "aliases": [],
      "returns": [
        {
          "types": ["String"],
          "description": "if the given URL is supported, an HTML formatted string containing a video player (inside an iframe)\nwhich will play the video at the given URL; otherwise an empty string is returned"
        }
      ],
      "params": [{ "name": "url", "types": ["String"], "description": "URL to a video on the internet", "default": "''" }],
      "examples": []
    }
  ]
}
{% endraw %}
{% endparse_json %}

{% export platformos_filters, namespace: 'api_reference' %}
